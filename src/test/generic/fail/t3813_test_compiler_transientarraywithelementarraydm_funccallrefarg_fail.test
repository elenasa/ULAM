## -*- mode:ulam -*-
#=t3813_test_compiler_transientarraywithelementarraydm_funccallrefarg_fail
##      gen code output:
##
##/home/elenas/WORK/ulam/repo/MFM-fork/MFM/src/core/include/UlamRef.tcc:94: FAILED: ILLEGAL_ARGUMENT
##
##
## UNCAUGHT FAILURE, ABORTING
##
## Aborted (core dumped)
##
## eval fails!
##
#!
Exit status: -11
Ue_R { Bool b(false);  Bool c(false);  Int test() {  System s;  A ar[3];  Foo& fr = ar 2 [] mFoo 3 [] . cast;  0 cast return } }
Uq_System { <NOMAIN> }
Un_A : QW { Bool(7) sp(false);  Foo mFoo[3]( Unary(3) mTre(0); ), ( Unary(3) mTre(0); ), ( Unary(3) mTre(0); );  :QW<> <NOMAIN> }
Uq_QW { /* empty class block */ }
Ue_Foo { Unary(3) mTre(0);  <NOMAIN> }
##
## Dave requested a way to get default values for Self (within a quark);
## a loophole, since a quark would be an undefined atom, but as a ref, its done (t3679)
## As of ulam-3, loophole no longer needed; now it is a runtime check, rather than compile time restriction.
##
## similar to 3811, except accessing array item beyond its size
## this is a realtime error, not compile time.
##
#>R.ulam
  ulam 2;
use System;
use A;
element R {
  Bool b, c;

  Int test(){
    System s;

    A ar[3];

    Foo& fr = ar[2].mFoo[3]; //mFoo[3] should have been caught~!!!
    return 0;
  }
}

#:A.ulam
  ulam 2;
use QW;
transient A : QW {
  Bool(7) sp;
  Foo mFoo[3];
}

#:QW.ulam
  ulam 2;
quark QW {
}

#:Foo.ulam
  ulam 2;
element Foo {
  Unary(3) mTre;
}


#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

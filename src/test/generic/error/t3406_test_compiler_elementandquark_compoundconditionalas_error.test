## -*- mode:ulam -*-
#=t3406_test_compiler_elementandquark_compoundconditionalas_error
#!
./Foo.ulam:10:23: ERROR: As-Conditional: NodeBinaryOpLogicalAnd is not a valid form of '(ident as Type)'; Operation deleted.
./Foo.ulam:10:3: ERROR: Incomplete true block; if-control.
Unrecoverable Program Parse FAILURE: <Foo.ulam>
##
##
##      //point of this test; but invalid statement (double parens inside if with as-conditions)
##
#>Foo.ulam
use Counter4;
element Foo {
 Counter4 m_c4;
 Int e;
 Bool b;
 Int test(){
  Atom ae, aq;
  Foo f;
  ae = aq = f; //easy
  if((aq as Counter4) && (ae as Foo)){
    aq.incr();
    e = aq.get();
    ae.b = true;
  }
  return e;
  }
}

#:Counter4.ulam
ulam 1;
quark Counter4 {
Int d;
Void incr(){
 d+=1;
}
Int get(){
 return d;
}
}
##
##      //simplified, works!
##      //bool rtn1 = fms->add("Foo.ulam","use Counter4;\nelement Foo {\nCounter4 m_c4;\n Int e;\n Bool b;\n Int test(){\n Atom aq;\n Foo f;\n aq = f; //easy\n if(aq as Counter4){\naq.incr();\ne = aq.get();\n}\n return e;\n}\n }\n");
##
##      //while too? yep
##      //bool rtn1 = fms->add("Foo.ulam","use Counter4;\nelement Foo {\nCounter4 m_c4;\n Int e;\n Bool b;\n Int test(){\n Atom aq;\n Foo f;\n aq = f; //easy\n while(aq as Counter4){\naq.incr();\ne = aq.get();\n if(e > 2) break;}\n return e;\n}\n }\n");
##
##      // not even with double parens instide single if condition
##      //bool rtn1 = fms->add("Foo.ulam","use Counter4;\nelement Foo {\nCounter4 m_c4;\n Int e;\n Bool b;\n Int test(){\n Atom aq;\n Foo f;\n aq = f; //easy\n if((aq as Counter4)){\naq.incr();\ne = aq.get();\n}\n return e;\n}\n }\n");
##
##      // not even with && b.
##      //bool rtn1 = fms->add("Foo.ulam","use Counter4;\nelement Foo {\nCounter4 m_c4;\n Int e;\n Bool b;\n Int test(){\n Atom aq, ae;\n Foo f;\n ae = aq = f; //easy\n if(aq as Counter4 && b){\naq.incr();\ne = aq.get();\n}\n return e;\n}\n }\n");
##
##      // parse okay with 'is' and 'has'
##      //bool rtn1 = fms->add("Foo.ulam","use Counter4;\nelement Foo {\nCounter4 m_c4;\n Int e;\n Bool b;\nInt test(){\n Atom ae, aq;\n Foo f;\n ae = aq = f; //easy\n if((aq has Counter4) && (ae is Foo)){\n return 1;\n}\nreturn 0;\n}\n }\n");
##
##      //simplified
##      //bool rtn1 = fms->add("Foo.ulam","element Foo {\n Bool b,c;\n Int test(){\n b = true; if((b == true) && (c == false)){\n return 1;\n}\n return 0;\n}\n }\n");
##      //bool rtn1 = fms->add("Foo.ulam","element Foo {\n Int b,c;\n Int test(){\n b = 100;\n c = 99;\n if((b <= 100) && (c < b)){\n return 1;\n}\n return 0;\n}\n }\n");
##
##
#.

## -*- mode:ulam -*-
#=t3603_test_compiler_elementinheritedquark_virtualfuncs_hascond
#!
##
## gen code output: (times 10)
## assert: arg is 1
##after asserts abort: arg is 1
##
## requires immediate quark vtable support!!! and 'has'
##
##Exit status: 0
##Ue_Test : System { :<> Bool b[10](true,true,true,true,true,true,true,true,true,true);  Int test() {  E1 e1;  Atom a1;  a1 e1 cast = a1 Sub1 has cond { Sub1 a1;  } if e1 Base has cond { Base e1;  b 0 [] e1 ( )afunc . 1 cast == = ( b 0 [] )assert b 1 [] e1 ( 1 cast )afunc . 2 cast == = ( b 1 [] )assert b 2 [] e1 ( )bfunc . 3 cast == = ( b 2 [] )assert } if E2 e2;  E2 a2;  a2 e2 = a2 Base has cond { Base a2;  b 3 [] a2 ( )afunc . 1 cast == = ( b 3 [] )assert b 4 [] a2 ( 1 cast )afunc . 2 cast == = ( b 4 [] )assert b 5 [] a2 ( )bfunc . 5 cast == = ( b 5 [] )assert } if a2 Sub1 has cond { Sub1 a2;  b 6 [] a2 ( )afunc . 4 cast == = ( b 6 [] )assert b 7 [] a2 ( 1 cast )afunc . 2 cast == = ( b 7 [] )assert b 8 [] a2 ( )bfunc . 5 cast == = ( b 8 [] )assert b 9 [] a2 ( )cfunc . 6 cast == = ( b 9 [] )assert } if 0 cast return } }
##Uq_Base { Int(3) m_i(0);  <NOMAIN> }
##Uq_Sub1 : Base { :< Int(3) m_i(0); > <NOMAIN> }
##Ue_E1 { Bool sp(false);  Base m_base( Int(3) m_i(0); );  <NOMAIN> }
##Ue_E2 { Bool sp(false);  Sub1 m_sub( :< Int(3) m_i(0); >);  <NOMAIN> }
##Uq_System { <NOMAIN> }
##
./Test.ulam:17:14: ERROR: DEPRECATED keyword <has>.
./Test.ulam:17:16: ERROR: Unexpected token <TOK_TYPE_IDENTIFIER>; Expected ).
./Test.ulam:17:20: ERROR: Name of variable ')': Identifier must begin with a lower-case letter.
./Test.ulam:17:20: ERROR: Invalid Statement (possible missing semicolon).
./Test.ulam:20:14: ERROR: DEPRECATED keyword <has>.
./Test.ulam:52:5: ERROR: Expecting Type of data member/function (or, in the midst of errors); Got <return>.
./Test.ulam:7:1: ERROR: Empty/Incomplete Class Definition 'Test'; Possible missing ending curly brace.
./Test.ulam:52:5: ERROR: Invalid Class Type <return>; KEYWORD should be 'element', 'quark', 'union', or 'transient', or 'local'.
./Test.ulam:7:9: ERROR: Invalid Type: Test.
 ERROR: No parse tree for This Class: Test.
Unrecoverable Program Parse FAILURE: <Test.ulam>
./Test.ulam:52:12: ERROR: Invalid Class Type <0>; KEYWORD should be 'element', 'quark', 'union', or 'transient', or 'local'.
Unrecoverable Program Parse FAILURE: <System.ulam>
##
## informed by vtable-example 11/17/15, t3601
##
#:Base.ulam
  ulam 2;
quark Base {
  Int(3) m_i; //for non-zero quark
  Int afunc() { return 1; } // not virtual
  virtual Int afunc(Int a) { return 2; } // but overload of same name can be virtual
  virtual Int bfunc() { return 3; }
}

#:Sub1.ulam
  ulam 2;
use Base;
quark Sub1 : Base {
  Int afunc() { return 4; } // not virtual
  Int bfunc() { return 5; } // virtual override
  virtual Int cfunc() { return 6; } // new func
}

#:E1.ulam
  ulam 2;
use Base;
element E1 { //used to inherit from Base
  Bool sp; //so not at pos 0
  Base m_base;
  Int afunc(Int a) { return 7; } // virtual override
  Int bfunc() { return 8; } // virtual override
}

#:E2.ulam
  ulam 2;
use Sub1;
element E2 {
  Bool sp; //so not at pos 0
  Sub1 m_sub;
  Int afunc(Int a) { return 9; }
  Int cfunc() { return 10; }
}

#>Test.ulam
  ulam 2;
use Base;
use Sub1;
use E1;
use E2;
use System;
element Test : System {
  Bool b[10]; //test results should all be true when we're done!

  Int test() {
    E1 e1;

    //but eval Atom type loses element info...
    Atom a1 = e1;     // (Atom a1 is copy of e1, unknown to culam)

    //./Test.ulam:33:12: ERROR: Invalid lefthand type of conditional operator 'as'; Class 'E1' Not Found during eval.
    if (a1 has Sub1) {      // not true!!
     }

    if (e1 has Base) {      // succeeds
      b[0] = (e1.m_base.afunc() == 1);
      assert(b[0]);
      b[1] = (e1.m_base.afunc(1) == 2);
      assert(b[1]); // E1's vtable UN-used for 'has'
      b[2] = (e1.m_base.bfunc() == 3);
      assert(b[2]); // ditto!
    }
    /*
    E2 e2;
    E2 a2 = e2;     // (a2 is copy of e2, unknown to culam)

    if (a2 has Base) {      // succeeds
      b[3] = (a2.afunc() == 1); // !! not 4!  afunc() is not virtual
      assert(b[3]);
      b[4] = (a2.afunc(1) == 2); // Sub1's vtable used!
      assert(b[4]);
      b[5] = (a2.bfunc() == 5); // ditto!
      assert(b[5]);
    }

    if (a2 has Sub1) {      // succeeds
      b[6] = (a2.afunc() == 4); // !! not 1!  a2 is a Sub1 here
      assert(b[6]);
      b[7] = (a2.afunc(1) == 2); // Sub1's vtable used!
      assert(b[7]);
      b[8] = (a2.bfunc() == 5); // ditto!
      assert(b[8]);
      b[9] = (a2.cfunc() == 6); // ditto!
      assert(b[9]);
    }
    */
    return 0;
  }
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}

#.

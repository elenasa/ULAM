## -*- mode:ulam -*-
#=t41432_test_compiler_elementtemplatewithinheritedclassparameterquarktemplateandancestorwdefaultvalue_badtypedef_error
#!
./Crackle.ulam:9:19: ERROR: Unexpected token <TOK_OPEN_PAREN>; Expected ;.
./Crackle.ulam:5:1: ERROR: Empty/Incomplete Class Definition 'Crackle'; Possible missing ending curly brace.
./Crackle.ulam:10:3: ERROR: Invalid Class Type <Zary>; KEYWORD should be 'element', 'quark', 'union', or 'transient', or 'local'.
./R.ulam:16:5: ERROR: Invalid Type: Crackle.
 ERROR: No parse tree for This Class: Crackle.
Unrecoverable Program Parse FAILURE: <Crackle.ulam>
./Pop.ulam:2:7: ERROR: Context Crackle(UNKNOWN) needed to fix any unseen class instances of template 'Pop' is missing its class definition; Bailing...
./Crackle.ulam:10:8: ERROR: Invalid Class Type <mzary>; KEYWORD should be 'element', 'quark', 'union', or 'transient', or 'local'.
Unrecoverable Program Parse FAILURE: <Pop.ulam>
./Crackle.ulam:10:13: ERROR: Invalid Class Type <;>; KEYWORD should be 'element', 'quark', 'union', or 'transient', or 'local'.
Unrecoverable Program Parse FAILURE: <Foo.ulam>
./Crackle.ulam:11:1: ERROR: Invalid Class Type <}>; KEYWORD should be 'element', 'quark', 'union', or 'transient', or 'local'.
Unrecoverable Program Parse FAILURE: <Zar.ulam>
Unrecoverable Program Parse FAILURE: <System.ulam>
##
## see t41431. cannot use constant as default that is set to a local constant, why?? BUG. Fixed.
## see t41433. Bad Typedef typo!! caused assert to hit~
##
#>R.ulam
  ulam 5;
local constant Unsigned cTip = 1;
element R {
  Int test()
  {
    System s;
    Pop(0xfeed, 7, 3, 1) pop;

    Unsigned ans = pop.behaving();
    s.print(ans);
    s.assert(ans==3u);

    s.assert(pop.samely());
    s.assert(!pop.badly());

    Crackle(0xf00d) crackle;
    Unsigned ans2 = crackle.behaving();
    s.print(ans2);
    s.assert(ans2==4u);

    //override default value of class arg
    Crackle(0xbead,4+cTip) snap;
    Unsigned ans3 = snap.behaving();
    s.print(ans3);
    s.assert(ans3==4u);

    return 0;
  }
}

#:Crackle.ulam
  ulam 5;
local constant Unsigned(5) cTag = 3;
local constant Unary(5) cProg = 4;
local constant Unsigned cLevel = 2;
transient Crackle(Bits specId, Unsigned trig = cTrigger) : Pop(specId,cTag,cProg,cLevel)
{
  constant Unsigned cTrigger = cLevel;
  Bits mId = specId;
  typedef Zary Zar(cProg,myTag,true).Zary; //BAD TYPEDEF!!!
  Zary mzary;
}

#:Pop.ulam
  ulam 5;
quark Pop(Bits speciesID, Unsigned(5) mytag, Unary(5) myProgress, Unsigned triggerlevel) {
  typedef Foo(myProgress,mytag,false) MyFoo; //typedef
  MyFoo mFoo; //dm

  Unsigned behaving() {
    return mFoo.func();
  }

  Bool samely() {
    Foo(myProgress,mytag,false) foo; //local
    return mFoo.func() == foo.func();
  }

  Bool badly() {
    MyFoo foo;
    return foo.z == mFoo.mZar.z;
  }

}

#:Foo.ulam
  ulam 5;
local constant Bool cTrue = true;
quark Foo(Unary(5) x, Unsigned(4) y, Bool z) : Zar(x, y, z) {
  Zar(x,y,cTrue) mZar;
}

#:Zar.ulam
  ulam 5;
quark Zar(Unary(5) x, Unsigned(4) y, Bool z) { //same param names not the problem!
  Unsigned func() { return x; }
  typedef Unary(y) Zary;

}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

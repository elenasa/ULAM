## -*- mode:ulam -*-
#=t41326_test_compiler_quarkinheritance_ascond_issue_error
##
#!
./Foo.ulam:24:12: ERROR: Invalid righthand type of conditional operator 'as'; must be a quark name, not E4.
Unrecoverable Program Type Label FAILURE.
##
##       informed by Spencer Harmon 7/14/2019:
## culam: NodeVarRefAs.cpp:236: virtual void MFM::NodeVarRefAs::genCode(MFM::File*, MFM::UVPass&): Assertion `vclasstype == UC_QUARK' failed.'
##
#>Foo.ulam
  ulam 5;
element Foo +System {
  Int m_c4;
  Int m_a4;

  Int test()
  {
    E4 e4;
    QBase2& qb2ref = (QBase2 &) e4;

    // ok to use quark refs in as-cond
    if(qb2ref as E4)
    {
      m_c4 = qb2ref.vfunca(); //110
      print(m_c4);
      assert(m_c4==110);

      //multiple copies of QBase1: ALL SHARED
      assert(qb2ref.m_b1);
    }

    //error case: non-ref quark (should not assert)
    QBase2 qb2 = (QBase2) e4;
    if(qb2 as E4)
    {
      m_a4 = qb2.vfunca(); //110
      print(m_a4);
      assert(m_a4==110);

      //multiple copies of QBase1: ALL SHARED
      assert(qb2.m_b1);
    }

    return 0;
  }
}


#:E4.ulam
  ulam 5;
element E4 : QBase3 +QBase2 +QBase1 {
  Bool m_b4;
  virtual Int vfuncc() { return 412; }
  virtual Void behave() { }
  typedef QBase2 QB2;
}

#:QBase1.ulam
    ulam 4;
quark QBase1 {
  Bool m_b1;
  Void funcNotVirtualSoIrrelevantHere() { }
  virtual Int vfunca() { m_b1 = true; return 110; }
}

#:QBase2.ulam
  ulam 5;
quark QBase2 +QBase1 {
  Bool m_b2;
  Bits(1) m_bit; //so that len of QBase2 is different than its pos in E4.
  virtual ARGB getColor(Unsigned s) { return super.getColor(s); }
  virtual Int vfuncc() { m_b2 = true; return 212; }
}

#:QBase3.ulam
  ulam 4;
quark QBase3 : QBase1 {
  Bool m_b3;
  virtual Int vfuncb() { return 311; }
}


#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

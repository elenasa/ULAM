## -*- mode:ulam -*-
#=t41545_test_compiler_duplicatefunctionsameparametersdifferentreturntypes_error
#!
./Fail.ulam:14:3: ERROR: Duplicate defined function 'fail' with the same parameters..
./Fail.ulam:5:8: NOTE: Void fail(Int code).
./Fail.ulam:14:3: NOTE: (even when return types differ).
./Fail.ulam:2:1: ERROR: Empty/Incomplete Class Definition 'Fail'; Possible missing ending curly brace.
./Fail.ulam:14:27: ERROR: Invalid Class Type <fail>; KEYWORD should be 'element', 'quark', 'union', or 'transient', or 'local'.
./Fail.ulam:2:7: ERROR: Invalid Type: Fail.
 ERROR: No parse tree for This Class: Fail.
Unrecoverable Program Parse FAILURE: <Fail.ulam>
./Fail.ulam:14:31: ERROR: Invalid Class Type <(>; KEYWORD should be 'element', 'quark', 'union', or 'transient', or 'local'.
Unrecoverable Program Parse FAILURE: <System.ulam>
##
## informed by t41132; Int pretty easy type to catch at parse time, hence duplicate error,
##                     o.w. becomes "Ambiguous match" errmsg.
##
#>R.ulam
  ulam 2;
element R {
  Bool b;
  Int test(){
    Fail f;
    f.fail(1);
    return 0;
  }
}

#:StringByteSource.ulam
  ulam 3;
transient StringByteSource : ByteSource {
  String m_string = "";
  Unsigned m_index = 0;

  Self(String s) {
    m_string = s;
  }

  @Override
  Int readByte() {
    if (m_index >= m_string.lengthof) return -1;
    return m_string[m_index++];
  }
}

#:ByteSource.ulam
  ulam 3;
quark ByteSource {
  virtual Int readByte() ;
}


#:Fail.ulam
  ulam 2;
quark Fail {
  System s;
  Void fail() { s.assert(false); }
  Void fail(Int code) {s.print(code); s.assert(true); /*true for testing purposes only!!!*/ }
  Void fail(Bits bits) { fail((Int) bits); }
  Void fail(ByteSource & bs) { fail(bs.readByte()); }
  Void fail(ByteSource bs) { fail(bs.readByte()); } /* can't use abstract class as argument type */
  Void fail(String string) {
    StringByteSource sbs(string); //ByteSource subclass.
    fail(sbs);
  }
  typedef Int MyInt;
  Bool fail(MyInt code) { fail(code); return true; } //even when return types differ!
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

## -*- mode:ulam -*-
#=t41418_test_compiler_castingbitstobigtransientarray_error
#!
./QIMsg.ulam:3:7: ERROR: Trying to exceed allotted bit size (64) for a base quark QIMsg(120u) with 122 bits.
./QIMsg.ulam:3:7: ERROR: Trying to exceed allotted bit size (64) for quark QIMsg(120u) with 122 bits.
./QIMsg.ulam:3:7: NOTE: Components of QIMsg(120u) are..
./QIMsg.ulam:9:3: NOTE: (2 of 122 bits, at 0) Unary(2) mDirection.
./QIMsg.ulam:10:3: NOTE: (120 of 122 bits, at 2) Bits(120) mPayload.
./QIMsg.ulam:3:7: ERROR: CLASS INSTANCE 'QIMsg(120u)' SIZED 122 FAILED.
Unrecoverable Program Type Label FAILURE.
##
## informed by Dave's ish 2/24/2021: Transient array and Bit casting new (see t41416).
##             worried about change to Node::genCodeWriteFromATmpVar when rstor is TMPTBV,
##             the new type for transient tmpvars. Tests t3975,t3896 had big arrays that
##             were unhappy with the code change to Node.cpp;
##             Hence, we are testing Transient arrays here. Seems ok.
##
##  was ./QIMsg.ulam:4:11: ERROR: Type Bitsize specifier for base type: Bits, has a constant value of 120 that exceeds the maximum bitsize 64.
##
#>Anchor10.ulam
  ulam 5;
local constant Unsigned cMSG_BITS = SegPkt10.sizeof; //exceeds maximum size of Bits
//local constant Unsigned cMSG_BITS = 30; //fails since not same bitsize as transient
local typedef QSegment(cMSG_BITS) QSegX;

/**
   \symbol A1
   \symmetries none
   \color #448
 */
element Anchor10 : QSegX {
    System s;
  Int test() {
    typedef QSegX.QC_QIMsg.Payload MPayload;
    SegPkt10 pkt[3];
    pkt[1].mCN = SegPkt10.cSET_ANGLE;
    pkt[1].mUpbound = true;
    mMessageBuffer.mPayload = (MPayload) pkt[1];
    pkt[2] = (SegPkt10) mMessageBuffer.mPayload;

    s.assert(pkt[1].mCN==pkt[2].mCN);
    s.assert(pkt[2].mUpbound);
    return 0;
  }
}


transient SegPkt10 {
  typedef Unsigned(3) CN;
  constant CN cNO_OP       = 0u;
  constant CN cSET_LENGTH  = 1u;
  constant CN cSET_STRETCH = 2u;
  constant CN cSET_ANGLE   = 3u;
  constant CN cSET_FLEX    = 4u;
  constant CN cGROW_HEAD   = 5u;
  constant CN cRSV6        = 6u;
  constant CN cRSV7        = 7u;

  Bool mUpbound;
  CN mCN;
  String mStr = "Hello World";
  Atom mAtom;
}



#:QSegment.ulam
  ulam 5;
quark QSeg {
  typedef Unsigned(5) SegPtr; // SN 0..24 (25..31 reserved)
  typedef Unsigned(2) Type;

}

/** Base class for a 1D fragile data transport system.  To be subclassed by SPLAT code.
 */
quark QSegment(Unsigned cMSG_BITS) : QSeg {
  // Data members
  typedef QIMsg(cMSG_BITS) QC_QIMsg;
  QC_QIMsg mMessageBuffer;

}

#:QIMsg.ulam
  ulam 5;
/** An internal message */
quark QIMsg(Unsigned bits) {
  typedef Bits(bits) Payload;
  typedef Unary(2) Direction;
  constant Direction cEMPTY = 0u;
  constant Direction cUP    = 1u;
  constant Direction cDOWN  = 2u;
  Direction mDirection;
  Payload mPayload;
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

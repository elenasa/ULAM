## -*- mode:ulam -*-
#=t3866_test_compiler_elementinheritance_withlocaldefs_anotherfilescopeunseen_error
#!
./Foo.ulam:6:11: ERROR: Expected a Type after the keyword 'local' for filescope: Foo.ulam; used incorrectly.
./Foo.ulam:6:11: ERROR: Invalid typedef base Type.
./Foo.ulam:6:17: ERROR: Invalid typedef Alias <local>, Type Identifier (2nd arg) requires capitalization.
./Foo.ulam:4:1: ERROR: Empty/Incomplete Class Definition 'Foo'; Possible missing ending curly brace.
./Foo.ulam:6:22: ERROR: Invalid Class Type <.>; KEYWORD should be 'element', 'quark', 'union', or 'transient', or 'local'.
./Soo.ulam:2:15: ERROR: Invalid Type: Foo.
 ERROR: No parse tree for This Class: Foo.
Unrecoverable Program Parse FAILURE: <Foo.ulam>
./Foo.ulam:6:23: ERROR: Invalid Class Type <Soo3>; KEYWORD should be 'element', 'quark', 'union', or 'transient', or 'local'.
Unrecoverable Program Parse FAILURE: <System.ulam>
##
## test of local defs: different file scopes, uses locals from another class, informed by t3865
## difference: Soo typedef is local, still based on another classes typedef
## local.local parsing error in Foo.ulam
##
#>Soo.ulam
  ulam 3;
local typedef Foo.Soo3 Soo3; //ok
quark Soo(Unsigned(3) v) {
  Unsigned(v) us = 4u;
  Bool check()
  {
    return us.sizeof == Foo.soosize; //uses another's exported local constant
  }
  Bool func()
  {
    if(self is Soo3) //uses its typedef from another class' exported local
      return check();
    return false;
  }
}

#:Foo.ulam
  ulam 3;
local constant Unsigned(3) soosize = 3u;
local typedef Soo(soosize) Soo3;
element Foo : Soo3 {
  constant Unsigned(3) soosize = local.soosize;
  typedef local.local.Soo3 Soo3; //double local error!
  Bool(7) sp;
  Unsigned a = 73;
  Int test() {
    System s;
    Foo f;
    a = f.us;
    s.print(a);
    s.assert(a == 4u);
    a = Soo3.sizeof;
    s.print(a);
    s.assert(a == 3u);

    sp = func();
    s.assert(sp);
    return (Int) a; //=3
  }
}


#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

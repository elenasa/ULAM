## -*- mode:ulam -*-
#=t3689_test_compiler_elementandquark_castreftosub_error
#!
./A.ulam:15:12: ERROR: Use explicit cast to convert Qbase& to A for =.
./A.ulam:20:5: ERROR: Use explicit cast to convert Qbase& to A for variable initialization.
Unrecoverable Program Type Label FAILURE.
##
## Dave requested a way to get default values for Self (within a quark);
## a loophole, since a quark would be an undefined atom, but as a ref, its done (t3679)
## As of ulam-3, loophole no longer needed; now it is a runtime check, rather than compile time restriction.
##
#>A.ulam
  ulam 2;
use System;
use QW;
element A : QW {
  Bool b, c;
  Int test(){
    System s;
    Qbase& qref = self;
    m_five = 0x5;
    c = (qref.m_five == 0x5);
    s.assert(c);
    A apple2;
    c = (apple2.m_five != 0x5);
    s.assert(c);
    apple2 = qref; //assignment: unused var (qref read)
    c = (apple2.m_five == 0x5);
    s.assert(c);

    qref.m_five = 0x3;
    A apple = qref; //init: unused var (qref read)
    b = (apple.m_five == 0x3);
    s.assert(b);

    return (Int) b;
  }
}

#:QW.ulam
  ulam 2;
use Qbase;
quark QW : Qbase{
  Bool bw;
  Self func()
  {
    Atom a = self.atomof;
    Self& sra = (Self&) a; //new way!
    //Self sra = (Self) a; //Cannot explicitly cast Atom to type: QW
    return sra;
  }
}

#:Qbase.ulam
  ulam 2;
quark Qbase{
  Unary(5) m_five;
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

## -*- mode:ulam -*-
#=t41666_test_compiler_accesszerolengtharrayreference_primitive_error
#!
##      include/Ue_10101A10.tcc:38: FAILED: ARRAY_INDEX_OUT_OF_BOUNDS
##
./A.ulam:17:20: ERROR: Array subscript [0] exceeds the size (0) of array 'nosite'.
Exit status: -1
Unrecoverable Program Test FAILURE.
##
## informed by t3840, t3671, t3843
##
#>A.ulam
  ulam 2;
use System;
element A : QBar{
  System s;
  typedef Int BigSite[10];
  typedef BigSite & BSRef;
  typedef BSRef BRR;

  typedef Int NoSite[0];
  typedef NoSite & NoRef;
  typedef NoRef NRR;

  Int test(){
    NoSite nosite;
    NoRef nositeref = nosite;
    NRR nrr = nositeref; //ref to ref
    Int an = nosite[0]; ////ARRAY_INDEX_OUT_OF_BOUNDS (t3842)

    s.assert(NoSite.sizeof == 0);
    s.assert(nosite.sizeof == 0);

    //the rest of this should still gcc compile without ambiguity.
    BigSite site;
    BSRef siteref = site;
    BRR brr = siteref; //ref to ref
    Int a = 2;
    for(Int i = 0; i < 10; ++i){
      siteref[i] = a; //self.atomof, self also work
      s.assert(brr[i]==2);
    }
    return 10;
  }
}

#:QBar.ulam
  ulam 5;
quark QBar {
    typedef Int NoSite[0];
    NoSite m_q1;
    NoSite m_q2;
    NoSite m_q3;
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

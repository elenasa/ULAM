## -*- mode:ulam -*-
#=t41411_test_compiler_explicitcastingbitstoquarkandquarktobits_ish_error
#!
./Anchor10.ulam:21:29: ERROR: Use explicit cast to convert SegPkt10 to Bits(4) for =.
./Anchor10.ulam:22:5: ERROR: Use explicit cast to convert Bits(4) to SegPkt10 for variable initialization.
Unrecoverable Program Type Label FAILURE.
##
## informed by Dave's ish 2/24/2021: implementation missing.
##
#>Anchor10.ulam
  ulam 5;
local constant Unsigned cMSG_BITS = SegPkt10.sizeof;
local typedef QSegment(cMSG_BITS) QSegX;

/**
   \symbol A1
   \symmetries none
   \color #448
 */
element Anchor10 : QSegX {
    System s;
  Int test() {
    typedef QSegX.QC_QIMsg.Payload MPayload;
    SegPkt10 pkt;
    pkt.mCN = SegPkt10.cSET_ANGLE;
    pkt.mUpbound = true;
    // not safe to cast unexplicitly
    //mMessageBuffer.mPayload = (MPayload) pkt;
    //SegPkt10 pkt2 = (SegPkt10) mMessageBuffer.mPayload;

    mMessageBuffer.mPayload = pkt;
    SegPkt10 pkt2 = mMessageBuffer.mPayload;

    s.assert(pkt.mCN==pkt2.mCN);
    s.assert(pkt2.mUpbound);
    return 0;
  }
}


quark SegPkt10 {
  typedef Unsigned(3) CN;
  constant CN cNO_OP       = 0u;
  constant CN cSET_LENGTH  = 1u;
  constant CN cSET_STRETCH = 2u;
  constant CN cSET_ANGLE   = 3u;
  constant CN cSET_FLEX    = 4u;
  constant CN cGROW_HEAD   = 5u;
  constant CN cRSV6        = 6u;
  constant CN cRSV7        = 7u;

  Bool mUpbound;
  CN mCN;
}



#:QSegment.ulam
  ulam 5;
quark QSeg {
  typedef Unsigned(5) SegPtr; // SN 0..24 (25..31 reserved)
  typedef Unsigned(2) Type;

}

/** Base class for a 1D fragile data transport system.  To be subclassed by SPLAT code.
 */
quark QSegment(Unsigned cMSG_BITS) : QSeg {
  // Data members
  typedef QIMsg(cMSG_BITS) QC_QIMsg;
  QC_QIMsg mMessageBuffer;

}

#:QIMsg.ulam
  ulam 5;
/** An internal message */
quark QIMsg(Unsigned bits) {
  typedef Bits(bits) Payload;
  typedef Unary(2) Direction;
  constant Direction cEMPTY = 0u;
  constant Direction cUP    = 1u;
  constant Direction cDOWN  = 2u;
  Direction mDirection;
  Payload mPayload;
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

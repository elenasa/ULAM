## -*- mode:ulam -*-
#=t41471_test_compiler_constantfromanotherclasssuperarg_ish
##
## gen output: 3 asserts
#!
Exit status: 4
Ue_T { Int test() {  System s;  constant Int foobits = 4;  s ( true )assert . constant Bool fb = true;  s ( 1u )assert . typedef QFoo(4) Q;  constant Bool qb = true;  s ( 1u )assert . 4 return } }
Uq_System { <NOMAIN> }
Ue_Foo : QFoo(4) { constant Unsigned nbits = 4u;  :QFoo(4)< Bits(4) m_bits(0);  constant Bool fourbits = true; > ^QBar(true)< Bool m_b( 1u); > <NOMAIN> }
Uq_QFoo(Unary(4) bits) : QBar(b) { Bits(UNKNOWN) m_bits(notready);  constant Bool fourbits = bits 4 ==;  :QBar11< Bool m_b(notready); > <NOMAIN> }
Uq_QBar(Bool b) { Bool m_b(notready);  <NOMAIN> }
##
##  informed by Daves ish 20210605, the assert that got away! (still missing)
##
#>T.ulam
 ulam 5;
element T{
  Int test(){
    System s;
    constant Int foobits = Foo.nbits;
    s.assert(foobits==4);
    constant Bool fb = Foo.Super.Super.b; //==Q.Super.b;
    s.assert(fb);
    typedef Foo.Super Q;
    constant Bool qb = Q.Super.b;
    s.assert(qb);
    return foobits;
  }

}

#:Foo.ulam
 ulam 5;
element Foo : QFoo(4) {
  constant Unsigned nbits = Super.bits;
}

#:QFoo.ulam
 ulam 5;
quark QFoo(Unary(4) bits) : QBar(fourbits) {
  Bits(bits) m_bits;
  constant Bool fourbits = (bits == 4);
}

#:QBar.ulam
 ulam 5;
quark QBar(Bool b) {
  Bool m_b = b;
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

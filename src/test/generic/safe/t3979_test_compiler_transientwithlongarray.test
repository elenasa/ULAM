## -*- mode:ulam -*-
#=t3979_test_compiler_transientwithlongarray
##
## gen output: (10 asserts)
## unevaluable (includes atom-based element sizes)
##
#!
Exit status: 0
Ue_Foo { Bool sp(false);  Int test() {  System s;  Tumi tmis;  s ( tmis barrlong 0 [] . cast )assert . s ( tmis barrlong 5 [] . cast )assert . s ( tmis barrlong 4 [] . ! cast )assert . tmis barrlong 4 [] . true cast = s ( tmis barrlong 4 [] . cast )assert . tmis barrlong 0 [] . false cast = s ( tmis barrlong 0 [] . ! cast )assert . Bool(7) barrlong[6] = { true, false, true, false, false, true };  s ( barrlong 0 [] cast )assert . s ( barrlong 5 [] cast )assert . s ( barrlong 4 [] ! cast )assert . barrlong 4 [] true cast = s ( barrlong 4 [] cast )assert . barrlong 0 [] false cast = s ( barrlong 0 [] ! cast )assert . 0 cast return } }
Uq_System { <NOMAIN> }
Un_Tumi { Bool b2( true);  Unsigned(9) u2( 7u);  Bool(7) barrlong[6]( { true, false, true, false, false, true });  <NOMAIN> }
##
## based on t3715, t3968 except acessing the quark data member structure instead
## with data member structure read/write (informed by ish 12/1/16)
##
#>Foo.ulam
  ulam 3;
use System;
element Foo {
  Bool sp;
  Int test() {
    System s;
    Tumi tmis;

    //read/write long bool DM array
    s.assert(tmis.barrlong[0]);
    s.assert(tmis.barrlong[5]);
    s.assert(!tmis.barrlong[4]);
    tmis.barrlong[4] = true; //write
    s.assert(tmis.barrlong[4]);
    tmis.barrlong[0] = false; //write
    s.assert(!tmis.barrlong[0]);

    //read/write long bool local array (NodeListArrayInitialization bug!)
    Bool(7) barrlong[6] = { true, false, true, false, false, true };
    s.assert(barrlong[0]);
    s.assert(barrlong[5]);
    s.assert(!barrlong[4]);
    barrlong[4] = true; //write
    s.assert(barrlong[4]);
    barrlong[0] = false; //write
    s.assert(!barrlong[0]);

    return 0;
  }
}


#:Tumi.ulam
  ulam 3;
transient Tumi {
  Bool b2 = true;
  Unsigned(9) u2 = 7;
  Bool(7) barrlong[6] = { true, false, true, false, false, true };
}

#:System.ulam
ulam 1;
quark System {Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

## -*- mode:ulam -*-
#=t3417_test_compiler_elementandquark_caarray_funcreturn
##      /* gen code output:
##	 Int(3) Arg: 0x2
##       assert: arg is 1
##       after assert's abort: arg is 1
##      */
##      // correct answer in gen code output, not exit status.
#!
Exit status: 2
Ue_IntArrayTest { constant Int isn = 3;  typedef Int(3) Intn;  IAN(3) ia( typedef Int(3) Intn;  constant Int n = 3; );  Int test() {  System s;  Int(3) a;  a self ( )func . = s ( a )print . s ( a 2 == )assert . a cast return } }
Uq_IAN(Int n) { typedef Int(UNKNOWN) Intn;  <NOMAIN> }
Uq_System { <NOMAIN> }
##
##      //informed by 3416 only return is Int("3") instead of atom; using class args for bitsize "3"
##      // (don't have to use native aref).
#>IntArrayTest.ulam
  ulam 1;
use IAN;
use System;
element IntArrayTest {
  constant Int isn = 3;
  typedef Int(isn) Intn;
  IAN(isn) ia;
  Intn func() {
    return ia[1];
  }
  Int test() {
    System s;
    Intn a;
    a = func();
    s.print(a);
    s.assert(a == 2);
    return a;
  }
}

##
##      //./IAN.ulam:5:2: ERROR: Returning Int as a smaller type Int(3) requires explicit casting.
#:IAN.ulam
  ulam 1;
quark IAN(Int n) {
  typedef Int(n) Intn;
  Intn aref(Int index){
    return (Intn) (n - index);
  }
}
#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
##
##      // simplify for debug..wo class param, use hardcoded Int(3)
##      // return isn't 3+1, it's zero; might need system to see..
##      // bool rtn1 = fms->add("IntArrayTest.ulam", "ulam 1;\nuse IAN;\nelement IntArrayTest {\ntypedef IAN.Intn Intn;\n IAN ia;\n  Intn func() {\n return ia[1];\n }\n Int test() {\n Intn a;\n a = func();\n return a;\n  }\n}\n");
##      //bool rtn2 = fms->add("IAN.ulam", "ulam 1;\nquark IAN {\ntypedef Int(3) Intn;\n Intn aref(Int index){\n return 3-index;\n}\n}\n");
##
##
##      //works! BUT return isnt' 3-1, it's 0
##      //bool rtn1 = fms->add("IntArrayTest.ulam", "ulam 1;\nuse IAN;\nelement IntArrayTest {\ntypedef Int(3) Intn;\n IAN(3) ia;\n  Intn func() {\n return ia[1];\n }\n Int test() {\n Intn a = func();\n return a;\n  }\n}\n");
##      //bool rtn2 = fms->add("IAN.ulam", "ulam 1;\nquark IAN(Int n) {\ntypedef Int(n) Intn;\n Intn aref(Int index){\n return n-index;\n}\n}\n");
##
##
#.

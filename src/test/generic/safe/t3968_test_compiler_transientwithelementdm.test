## -*- mode:ulam -*-
#=t3968_test_compiler_transientwithelementdm
##
## gen output: (+ interleaved assert)
##  Int Arg: 881
##  Int Arg: 43
##  Int Arg: 34
##  Int Arg: 34
##
## unevaluable (includes atom-based element sizes)
##
#!
Exit status: -11
Ue_Foo { Bool sp(false);  Int ta(9);  QW qarr[4]( Int(3) qi(3);  Bool qb(true);  Int(3) qi(3);  Bool qb(true);  Int(3) qi(3);  Bool qb(true);  Int(3) qi(3);  Bool qb(true); );  Int test() {  System s;  Too t;  t ( 881u cast )set . self ta . t ( )get . = s ( self ta . )print . t sp . self ta . 881u cast == cast = s ( t sp . cast )assert . Foo& fooref = t mis . f . cast;  fooref ta . 43 cast = s ( t mis . f . ta . )print . s ( t mis . f . ta . 43 cast == )assert . Foo newfoo;  newfoo ta . 34 cast = s ( newfoo ta . )print . s ( newfoo ta . 34 cast == )assert . t mis . f . newfoo = s ( t mis . f . ta . )print . s ( t mis . f . ta . 34 cast == )assert . self ta . return } }
Un_Too { Bool(7) sp(false);  Int a( 87);  Foo f[5]( Bool sp(false);  Int ta( 9);  QW qarr[4]( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ); ), ( Bool sp(false);  Int ta( 9);  QW qarr[4]( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ); ), ( Bool sp(false);  Int ta( 9);  QW qarr[4]( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ); ), ( Bool sp(false);  Int ta( 9);  QW qarr[4]( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ); ), ( Bool sp(false);  Int ta( 9);  QW qarr[4]( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ); );  Bits bits(0);  Tumi mi[2]( Bool b2( true);  Unsigned(9) u2( 7u);  Foo f( Bool sp(false);  Int ta( 9);  QW qarr[4]( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ); );  QW q( Int(3) qi( 3);  Bool qb( true); ); ), ( Bool b2( true);  Unsigned(9) u2( 7u);  Foo f( Bool sp(false);  Int ta( 9);  QW qarr[4]( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ); );  QW q( Int(3) qi( 3);  Bool qb( true); ); );  Tumi mis( Bool b2( true);  Unsigned(9) u2( 7u);  Foo f( Bool sp(false);  Int ta( 9);  QW qarr[4]( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ); );  QW q( Int(3) qi( 3);  Bool qb( true); ); );  <NOMAIN> }
Uq_System { <NOMAIN> }
Uq_QW { Int(3) qi( 3);  Bool qb( true);  <NOMAIN> }
Un_Tumi { Bool b2( true);  Unsigned(9) u2( 7u);  Foo f( Bool sp(false);  Int ta( 9);  QW qarr[4]( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ), ( Int(3) qi( 3);  Bool qb( true); ); );  QW q( Int(3) qi( 3);  Bool qb( true); );  <NOMAIN> }
##
## based on t3715, except acessing the element data member structure instead
## with data member structure read/write (informed by ish 12/1/16)
##
#>Foo.ulam
  ulam 3;
use Too;
use System;
element Foo {
  Bool sp;
  Int ta = 9;
  QW qarr[4]; //quark array in element
  Int test() {
    System s;
    Too t;

    t.set(t.sizeof);
    ta = t.get();
    s.print(ta);
    t.sp = (ta == 881u);
    s.assert(t.sp);

    //read/write dm element
    Foo& fooref = t.mis.f;
    fooref.ta = 43;
    s.print(t.mis.f.ta);
    s.assert(t.mis.f.ta == 43);

    Foo newfoo;
    newfoo.ta = 34;
    s.print(newfoo.ta);
    s.assert(newfoo.ta == 34); //not default

    t.mis.f = newfoo; //***the change
    s.print(t.mis.f.ta);
    s.assert(t.mis.f.ta == 34);

    return ta;
  }
}

#:Too.ulam
  ulam 2;
use Tumi;
transient Too {
  Bool(7) sp;
  Int a = 87;
  Foo f[5]; //element array in transient
  Bits bits;
  Tumi mi[2]; //transient array in transient
  Tumi mis; //transient in transient
  Int get()
  {
    return a;
  }
  Void set(Int arg)
  {
    a = arg;
  }
  //  Int test() { NO TESTS in TRANSIENTS
}

#:Tumi.ulam
  ulam 2;
use Foo;
use QW;
transient Tumi {
  Bool b2 = true;
  Unsigned(9) u2 = 7;
  Foo f; //element in transient
  QW q; //quark in transient
}

#:QW.ulam
  ulam 1;
quark QW {
  Int(3) qi = 3;
  Bool qb = true;
}

#:System.ulam
ulam 1;
quark System {Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

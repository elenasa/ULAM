## -*- mode:ulam -*-
#=t3977_test_compiler_productandsum3264bitboundstosaturate
##
## gen output: (with asserts)
## Unsigned Arg: 4294967295
## Int Arg: 1073741823
## Int Arg: 2147483647
## Int Arg: 2147483647
## Int Arg: 2147483647
##
#!
Exit status: 64
Ue_A { typedef Int(64) Long;  typedef Int(31) Jint;  Int m_iarr[2](1,2147483647);  Int test() {  System s;  Unary v = 4294967295u;  Unary w = 4294967295u;  w v += s ( w cast 4294967295u cast == )assert . w v *= s ( w cast 4294967295u cast == )assert . Unsigned x = 1 cast;  Unsigned y = 4294967295u;  y x += s ( y )print . s ( y 4294967295u == )assert . y x *= s ( y 4294967295u == )assert . Int(31) d = 1 cast;  Int(31) e = 1073741823;  e d += s ( e cast )print . s ( e 1073741823 == )assert . e d *= s ( e 1073741823 == )assert . Int a = 1 cast;  Int b = 2147483647;  b a += s ( b )print . s ( b 2147483647 == )assert . b a *= s ( b 2147483647 == )assert . Int(64) k = 1 cast;  Int(64) m = HexU64(0x7fffffff, 0xffffffff);  m k += s ( m HexU64(0x7fffffff, 0xffffffff) == )assert . m k *= s ( m HexU64(0x7fffffff, 0xffffffff) == )assert . Int iarr[2] = { 1, 2147483647 };  iarr 1 [] iarr 0 [] += s ( iarr 0 [] 1 cast == )assert . s ( iarr 1 [] )print . s ( iarr 1 [] 2147483647 == )assert . iarr 1 [] iarr 0 [] *= s ( iarr 1 [] 2147483647 == )assert . Int(64) larr[2] = { HexU64(0x0, 0x1), HexU64(0x7fffffff, 0xffffffff) };  larr 1 [] larr 0 [] += s ( larr 0 [] 1 cast == )assert . s ( larr 1 [] HexU64(0x7fffffff, 0xffffffff) == )assert . larr 1 [] larr 0 [] *= s ( larr 1 [] HexU64(0x7fffffff, 0xffffffff) == )assert . self m_iarr . 1 [] self m_iarr . 0 [] += s ( self m_iarr . 0 [] 1 cast == )assert . s ( self m_iarr . 1 [] )print . s ( self m_iarr . 1 [] 2147483647 == )assert . self m_iarr . 1 [] self m_iarr . 0 [] *= s ( self m_iarr . 1 [] 2147483647 == )assert . 64u cast return } }
Uq_System { <NOMAIN> }
##
## 32-bit and 64-bit arith ops have special processing (CastOps.h) to detect over/under-flows
## (informed by t3428) here, addition and muliplication
##
#>A.ulam
  ulam 3;
element A {
  typedef Int(64) Long;
  typedef Int(31) Jint;
  Int m_iarr[2] = { 1, Int.maxof };

  Int test(){
    System s;

    Unary v = Unary.maxof, w = Unary.maxof;
    w += v;
    s.assert(w == Unary.maxof); //saturates, no problem
    w *= v;
    s.assert(w == Unary.maxof); //saturates, no problem

    Unsigned x = 1, y = Unsigned.maxof;
    y += x;
    s.print(y);
    s.assert(y == Unsigned.maxof); //saturates
    y *= x;
    s.assert(y == Unsigned.maxof); //saturates

    Jint d = 1, e = Jint.maxof;
    e += d;
    s.print(e);
    s.assert(e == Jint.maxof); //saturates, no problem
    e *= d;
    s.assert(e == Jint.maxof); //saturates, no problem

    Int a = 1, b = Int.maxof;
    b += a;
    s.print(b);
    s.assert(b == Int.maxof); //saturates
    b *= a;
    s.assert(b == Int.maxof); //saturates

    Long k = 1, m = Long.maxof;
    m += k;
    s.assert(m == Long.maxof); //saturates
    m *= k;
    s.assert(m == Long.maxof); //saturates

    //as local arrays
    Int iarr[2] = {1, Int.maxof};
    iarr[1] += iarr[0];
    s.assert(iarr[0] == 1);
    s.print(iarr[1]);
    s.assert(iarr[1] == Int.maxof); //saturates
    iarr[1] *= iarr[0];
    s.assert(iarr[1] == Int.maxof); //saturates

    Long larr[2] = { 1, Long.maxof };
    larr[1] += larr[0];
    s.assert(larr[0] == 1);
    s.assert(larr[1] == Long.maxof); //saturates
    larr[1] *= larr[0];
    s.assert(larr[1] == Long.maxof); //saturates

    //even if data member (long entire array)
    m_iarr[1] += m_iarr[0];
    s.assert(m_iarr[0] == 1);
    s.print(m_iarr[1]);
    s.assert(m_iarr[1] == Int.maxof); //saturates
    m_iarr[1] *= m_iarr[0];
    s.assert(m_iarr[1] == Int.maxof); //saturates

    return m.sizeof;
  }
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

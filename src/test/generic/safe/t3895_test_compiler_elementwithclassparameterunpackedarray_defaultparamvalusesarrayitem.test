## -*- mode:ulam -*-
#=t3895_test_compiler_elementwithclassparameterunpackedarray_defaultparamvalusesarrayitem
##
##  gen output: (+ assert)
##  Int Arg: 3
##
#!
Exit status: 3
Ue_T { Int r(3);  Int test() {  System s;  constant Int site[10] = { 1 cast, 2 cast, 3 cast, 4 cast };  S(11121314141414141414,3,3u) n;  self r . n ( )func . cast = s ( self r . )print . s ( self r . 3 cast == )assert . self r . return } }
Uq_System { <NOMAIN> }
Uq_S(Int y[UNKNOWN], Int x, Unsigned s = NONREADYCONST) { <NOMAIN> }
Uq_V(Int a) { Unsigned(UNKNOWN) vfoo(notready);  <NOMAIN> }
##./T.ulam:16:7: ERROR: Class argument types are limited to scalars by MFM::UlamTypeInfo: Int[10] (arg 1) in class S(21011121314141414141414,3,3u).
##./T.ulam:16:7: ERROR: Class argument types are limited to 32 bits by MFM::UlamTypeInfo: Int(64) (arg 2) in class S(21011121314141414141414,3,3u).
##Unrecoverable Program Type Label FAILURE.
##
## otherwise is supported by ulam compiler:
##
##    //informed by t3894: param bitsize based on constant array item
##
#>T.ulam
 ulam 3;
local typedef Int BigSite[10];
element T{
  Int r;
  Int test(){
    System s;
    constant BigSite site = { 1, 2, 3, 4 };
    S(site, 3) n;
    r = (Int) n.func();
    s.print(r);
    s.assert(r==3);
    return r;
  }
}

quark S(BigSite y, Int x, Unsigned s = V(y[x-1]).sizeof){
  Unsigned func()
  {
    return s;
  }
}

#:V.ulam
  ulam 1;
quark V(Int a) {
  Unsigned(a) vfoo;
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

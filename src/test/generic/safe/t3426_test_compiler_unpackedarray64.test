## -*- mode:ulam -*-
#=t3426_test_compiler_unpackedarray64
##      /* gen code output:
##	 Int Arg: 2147483647
##	 Int Arg: -2147483648
##	 Int Arg: -2147483647
##	 Int Arg: -2147483646
##	 Int Arg: -2147483645
##	 Int Arg: -2147483644
##	 Int Arg: -2147483643
##	 Int Arg: -2147483642
##	 Int Arg: -2147483641
##	 Int Arg: -2147483640
##      */
#!
Exit status: 640
Ue_A { typedef Int(64) BigSite[10];  Int test() {  System s;  Int(64) site[10];  { Int i = 0 cast;  i 10 cast < cond { Int(64) k = i 2147483647 +b cast;  site i [] k = s ( site i [] cast )print . } _1: i 1 += while } 640u cast return } }
Uq_System { <NOMAIN> }
##
##      //informed by t3276:
#>A.ulam
  ulam 1;
use System;
element A {
  typedef Int(64) BigSite[10];
  Int test(){
    System s;
    BigSite site;
    for(Int i = 0; i < 10; ++i)
    {
      Int(64) k = i + Int.maxof;
      site[i] = k;
      s.print((Int) site[i]);
    }
    return site.sizeof;
  }
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
##
##      //simplify for debugging
##      //bool rtn1 = fms->add("A.ulam"," element A {\n Int test(){\nInt(64) k;\n k = 1 + Int.maxof;\n return k.sizeof;\n }\n }\n");
##      //site[i] = i, k = 512, etc.. requires casting 32 to 64
##      // ReadArrayLong and WriteArrayLong do not exist in BitField!!! do now!
##      //bool rtn1 = fms->add("A.ulam"," element A {\ntypedef Int(64) BigSite[1];\nInt test(){ Int(64) k = 512;\n BigSite site; for(Int i = 0; i < 1; ++i){\n site[i] = k;\n }\n return site.sizeof;\n }\n }\n");
##
##      // good for isolating bug!
##      //bool rtn1 = fms->add("A.ulam"," element A {\ntypedef Int(64) BigSite[1];\nInt test(){ Int(64) k = 512;\n BigSite site; site[0] = k; return site.sizeof;\n }\n }\n");
##
##      //./A.ulam:3:23: ERROR: Cast problem! Value type: Int failed to be cast as type: Int(64).
##      //bool rtn1 = fms->add("A.ulam"," element A {\ntypedef Int BigSite[1];\nInt test(){ Int(64) k = 512;\n BigSite site; for(Int i = 0; i < 1; ++i){\n site[i] = k;\n }\n return site.sizeof;\n }\n }\n");
##
#.

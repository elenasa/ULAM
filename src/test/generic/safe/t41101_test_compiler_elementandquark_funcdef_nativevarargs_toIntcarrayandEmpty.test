## -*- mode:ulam -*-
#=t41101_test_compiler_elementandquark_funcdef_nativevarargs_toIntcarrayandEmpty
##      gen code: (+ 2 asserts)
##       arg 1 type name: <Ut_102321i>
##       arg 2 type name: <Ut_10141i>
##       arg 3 type name: <Ut_102321i>
##	 Int Arg: 4
##       Int Arg: -2147483648
##
##	 unevaluable because eval is unable to return a non-void native function in an empty block
#!
Exit status: -11
Ue_A { Math math();  Int test() {  System s;  QW qw;  CAQ caq;  Int m = self math . ( qw ( )toInt . cast -4 caq ( 7 cast )aref . )max .;  s ( m )print . s ( m 4 cast == )assert . Int no = self math . ( )max .;  s ( no )print . s ( no -2147483648 == )assert . m return } }
Uq_Math { <NOMAIN> }
Uq_System { <NOMAIN> }
Uq_QW { <NOMAIN> }
Uq_CAQ { constant Int cInt[8] = { -1 cast, 1 cast, -2 cast, 2 cast, -3 cast, 3 cast, -4 cast, 4 cast };  <NOMAIN> }
##
## informed t3250; 3 More var arg cases: casted quark w toInt, custom array, and no var args
##
#>A.ulam
  ulam 3;
element A {
  Math math;
  Int test(){
    System s;
    QW qw; //req'd explicit cast quark to int
    CAQ caq; //custom array
    Int m = math.max((Int) qw, -4, caq[7]);
    s.print(m);
    s.assert(m == 4);

    //empty var arg func call..
    Int no = math.max();
    s.print(no);
    s.assert(no == Int.minof);
    return m;
  }
}

#:QW.ulam
  ulam 1;
quark QW {
  Int toInt()
  {
    return 1;
  }
}

#:CAQ.ulam
  ulam 2;
quark CAQ
{
  constant Int cInt[] = {-1, 1, -2, 2, -3, 3, -4, 4 };
  Int aref(Int index)
  {
    return cInt[index];
  }
}

##      // max with variable number of args...
##      //with final void * 0 instead of nargs as first arg.
#:Math.ulam
  ulam 3;
quark Math {
  Int max(...) native;
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

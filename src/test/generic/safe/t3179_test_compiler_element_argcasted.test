## -*- mode:ulam -*-
#=t3179_test_compiler_element_argcasted
##      /* gen code outpu:
##	 Bool(3) Arg: 0x7 (true)
##      */
#!
Exit status: 1
Ue_Foo { System s();  Bool(3) m_b(true);  Int test() {  self m_b . self ( true cast )check . = self s . ( self m_b . )print . self m_b . cast return } }
Uq_System { <NOMAIN> }
#>Foo.ulam
  ulam 1;
use System;
element Foo {
  System s;
  Bool(3) m_b;
  Bool(3) check(Bool(2+1) b) {
    return b /* true */;
  }
  Bool(3) check(Bool(2+3) b) {
    return false;
  }
  Int test() {
    m_b = check( (Bool(3)) true);
    s.print(m_b);
    return (Int) m_b;
  }
}
##      // the test:
##     //changed m_b and check return type to Bool(3) to use System print for gen code test
##
#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
##     //  //simplify for debugging
##     //  //bool rtn1 = fms->add("Foo.ulam","ulam 1; element Foo {\n Bool m_b; Bool check(Bool(2+1) b) {\n return b /* true */;\n }\n Bool(3) check(Bool(2+3) b) {\n return false;\n }\n  Int test() {\n m_b = check( (Bool(3)) true);\n  return m_b;\n }\n }\n"); //should be able to cast an arg.
##     //  // fails With return and args Bool(3); when either one is something else, ok!
##     //  // bug in CS: assignReturnValue comparing UTIs
##     //  //bool rtn1 = fms->add("Foo.ulam","ulam 1;\n element Foo {\nBool(3) m_b;\n Bool(3) check(Bool(3) b) {\n return b /* true */;\n }\n  Int test() {\n m_b = check( true);\n return m_b;\n }\n }\n"); //should be able to cast an arg.
##
##     //  // Bool(3) as typedef, and used in place of Bool(3) is golden!
##      //bool rtn1 = fms->add("Foo.ulam","ulam 1;\n element Foo {\ntypedef Bool(3) Boo;\n Boo m_b;\n Boo check(Boo b) {\n return b /* true */;\n }\n  Int test() {\n m_b = check( true);\n return m_b;\n }\n }\n"); //should be able to cast an arg.
##
#.

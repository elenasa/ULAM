## -*- mode:ulam -*-
#=t3172_test_compiler_elementandquark_returnquark
##
##  gen code output: (1 assert)
##    Unsigned Arg: 15
##
#!
Exit status: 15
Ue_Foo { System s();  typedef Bar Pop[2];  Unsigned(4) m_i(0u);  Bar m_bar[2]( Bool val_b[3](false,false,false);  Bool val_b[3](false,true,false); );  Int test() {  Foo f;  f m_i . 15 cast = self m_bar . 1 [] f ( 1 cast )check . = self s . ( self m_bar . 1 [] val_b 1 [] . )assert . self s . ( f m_i . cast )print . f m_i . cast return } }
Uq_System { <NOMAIN> }
Uq_Bar { Bool val_b[3](false,false,false);  <NOMAIN> }
#>Foo.ulam
  ulam 1;
use System;
use Bar;
element Foo {
  System s;
  typedef Bar Pop[2];
  Unsigned(4) m_i;
  Pop m_bar;
  Bar check(Int v) {
    Bar b;
    b.val_b[1] = true;
    return b;
  }
  Int test() {
    Foo f;
    f.m_i = 15;
    m_bar[1] = f.check(1);
    s.assert(m_bar[1].val_b[1]);
    s.print(f.m_i);
    return f.m_i;
  }
}
##      // array of quarks, as typedef
##      //modified gencode to allow quarks as return values, and parameters.
##
##      // simplify to DEBUG:
##      //bool rtn1 = fms->add("Foo.ulam","ulam 1;\nuse Bar;\n element Foo {\n typedef Bar Pop[2];\n Pop m_bar;\n Int test() {\n Bar b;\n m_bar[1] = b;\n return 0;\n }\n }\n");
##
##      // singleton quark
##      //bool rtn1 = fms->add("Foo.ulam","ulam 1; use Bar; element Foo { Int(4) m_i; Bar m_bar; Bar check(Int v) { Bar b; b.val_b[1] = true; return b; } Int test() { Foo f; f.m_i = 15; m_bar = f.check(1); return f.m_i; } }\n"); //tests offsets, but too complicated data members in Foo for memberselect
##
#:Bar.ulam
  ulam 1;
quark Bar {
  Bool val_b[3];
  Void reset(Bool b) {
    b = false;
  }
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

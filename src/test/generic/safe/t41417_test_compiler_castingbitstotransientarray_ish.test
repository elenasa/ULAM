## -*- mode:ulam -*-
#=t41417_test_compiler_castingbitstotransientarray_ish
#!
Exit status: 0
Ue_Anchor10 : QSegment(4u) { System s();  :QSegment(4u)< constant Unsigned cMSG_BITS = 4u;  typedef QIMsg(4u) QC_QIMsg;  QIMsg(4u) mMessageBuffer( typedef Bits(4) Payload;  Bits(4) mPayload(11);  constant Unsigned bits = 4u;  typedef Unary(2) Direction;  constant Unary(2) cEMPTY = 0u;  constant Unary(2) cUP = 1u;  constant Unary(2) cDOWN = 3u;  Unary(2) mDirection(0u); );  :QSeg< typedef Unsigned(5) SegPtr;  typedef Unsigned(2) Type; >> ^QSeg< typedef Unsigned(5) SegPtr;  typedef Unsigned(2) Type; > Int test() {  typedef Bits(4) MPayload;  SegPkt10 pkt[3];  pkt 1 [] mCN . 3u = pkt 1 [] mUpbound . true = self mMessageBuffer . mPayload . pkt 1 [] cast = pkt 2 [] self mMessageBuffer . mPayload . cast = self s . ( pkt 1 [] mCN . pkt 2 [] mCN . == )assert . self s . ( pkt 2 [] mUpbound . )assert . 0 cast return } }
Un_SegPkt10 { typedef Unsigned(3) CN;  constant Unsigned(3) cNO_OP = 0u;  constant Unsigned(3) cSET_LENGTH = 1u;  constant Unsigned(3) cSET_STRETCH = 2u;  constant Unsigned(3) cSET_ANGLE = 3u;  constant Unsigned(3) cSET_FLEX = 4u;  constant Unsigned(3) cGROW_HEAD = 5u;  constant Unsigned(3) cRSV6 = 6u;  constant Unsigned(3) cRSV7 = 7u;  Bool mUpbound(false);  Unsigned(3) mCN(0);  <NOMAIN> }
Uq_QSegment(Unsigned cMSG_BITS) : QSeg { typedef QIMsg(bits) QC_QIMsg;  QIMsg(bits) mMessageBuffer(notready);  :QSeg< typedef Unsigned(5) SegPtr;  typedef Unsigned(2) Type; > <NOMAIN> }
Uq_System { <NOMAIN> }
Uq_QSeg { typedef Unsigned(5) SegPtr;  typedef Unsigned(2) Type;  <NOMAIN> }
Uq_QIMsg(Unsigned bits) { typedef Bits(UNKNOWN) Payload;  typedef Unary(2) Direction;  constant Unary(2) cEMPTY = 0u;  constant Unary(2) cUP = 1u;  constant Unary(2) cDOWN = 3u;  Unary(2) mDirection(0);  Bits(UNKNOWN) mPayload(notready);  <NOMAIN> }
##
## informed by Dave's ish 2/24/2021: Transient array and Bit casting new (see t41416).
##             worried about change to Node::genCodeWriteFromATmpVar when rstor is TMPTBV,
##             the new type for transient tmpvars. Tests t3975,t3896 had big arrays that
##             were unhappy with the code change to Node.cpp;
##             Hence, we are testing Transient arrays here. Seems ok.
##
#>Anchor10.ulam
  ulam 5;
local constant Unsigned cMSG_BITS = SegPkt10.sizeof;
local typedef QSegment(cMSG_BITS) QSegX;

/**
   \symbol A1
   \symmetries none
   \color #448
 */
element Anchor10 : QSegX {
    System s;
  Int test() {
    typedef QSegX.QC_QIMsg.Payload MPayload;
    SegPkt10 pkt[3];
    pkt[1].mCN = SegPkt10.cSET_ANGLE;
    pkt[1].mUpbound = true;
    mMessageBuffer.mPayload = (MPayload) pkt[1];
    pkt[2] = (SegPkt10) mMessageBuffer.mPayload;

    s.assert(pkt[1].mCN==pkt[2].mCN);
    s.assert(pkt[2].mUpbound);
    return 0;
  }
}


transient SegPkt10 {
  typedef Unsigned(3) CN;
  constant CN cNO_OP       = 0u;
  constant CN cSET_LENGTH  = 1u;
  constant CN cSET_STRETCH = 2u;
  constant CN cSET_ANGLE   = 3u;
  constant CN cSET_FLEX    = 4u;
  constant CN cGROW_HEAD   = 5u;
  constant CN cRSV6        = 6u;
  constant CN cRSV7        = 7u;

  Bool mUpbound;
  CN mCN;
}



#:QSegment.ulam
  ulam 5;
quark QSeg {
  typedef Unsigned(5) SegPtr; // SN 0..24 (25..31 reserved)
  typedef Unsigned(2) Type;

}

/** Base class for a 1D fragile data transport system.  To be subclassed by SPLAT code.
 */
quark QSegment(Unsigned cMSG_BITS) : QSeg {
  // Data members
  typedef QIMsg(cMSG_BITS) QC_QIMsg;
  QC_QIMsg mMessageBuffer;

}

#:QIMsg.ulam
  ulam 5;
/** An internal message */
quark QIMsg(Unsigned bits) {
  typedef Bits(bits) Payload;
  typedef Unary(2) Direction;
  constant Direction cEMPTY = 0u;
  constant Direction cUP    = 1u;
  constant Direction cDOWN  = 2u;
  Direction mDirection;
  Payload mPayload;
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

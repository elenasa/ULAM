## -*- mode:ulam -*-
#=t3328_test_compiler_elementwithclassparameters_self
##      // gen output: + interleaved asserts
##      //    Bool(3) Arg: 0x7 (true)
##      //    Bool(3) Arg: 0x0 (false)
##      //Constants have explicit types
#!
Exit status: 1
Ue_R { System s();  Int test() {  Atom a;  S(1,2) s12;  s12 b2 . s12 ( )func . cast = self s . ( s12 b2 . )print . self s . ( s12 b2 . cast )assert . s12 b1 . s12 ( a )func . cast = self s . ( s12 b1 . )print . self s . ( s12 b1 . ! cast )assert . s12 b2 . cast return } }
Uq_System { <NOMAIN> }
Ue_S(Int x, Int y) { Bool(UNKNOWN) b1(notready);  Bool(UNKNOWN) b2(notready);  <NOMAIN> }
##
##    //informed by t3255
##
#>R.ulam
  ulam 1;
use System;
element R{
  System s;
  Int test() {
    Atom a;
    S(1,2) s12;

    s12.b2 = s12.func();
    s.print(s12.b2);
    s.assert(s12.b2);
    s12.b1 = s12.func(a);
    s.print(s12.b1);
    s.assert(!s12.b1);
    return (Int) s12.b2;
  }
}
#:S.ulam
  ulam 1;
element S(Int x, Int y){
  Bool(x+y) b1, b2;
  Bool func() {
    return (self is S(x,y)); //is Self also ok
  }
  Bool func(Atom d) {
    return (d is S(x,y)); //is Self also ok
   }
}


##      // simple case: OK!  "Bool(x+y) b1, b2;" works!!
##      //bool rtn1 = fms->add("S.ulam"," ulam 1;\n element S(Int x, Int y){\nBool sp;\n Bool(x+y) b1, b2;\n Int test() {\nS(1,2) s;\n/*Atom a;\n a = self;\n self = a;\n*/ return 0;\n }\n }\n");
##
##      //"(self is S(x,y)" works
##      //bool rtn1 = fms->add("S.ulam"," ulam 1;\n element S(Int x, Int y){\nBool sp;\n Bool func() {\n return (self is S(x,y));\n}\n Int test() {\nS(1,2) s12;\n s12.sp = s12.func();\n return 0;\n }\n }\n");
##
##      //bool rtn2 = fms->add("R.ulam"," ulam 1;\nuse S;\nelement R{\n Int test() {\nS(1,2) s12;\n s12.b2 = s12.func();\nreturn s12.b2;\n }\n }\n");
##      //bool rtn1 = fms->add("S.ulam"," ulam 1;\nelement S(Int x, Int y){\nBool(x+y) b2;\n Bool func() {\n return (self is S(x,y));\n}\n}\n");
##      //if(rtn1 && rtn2)
##      //return std::string("R.ulam");
##
##      //bool rtn1 = fms->add("S.ulam"," ulam 1;\nelement S(Int x, Int y){\nBool(x+y) b2;\n Bool func() {\n return (self is S(x,y));\n}\n Int test() {\nS(1,2) s12;\n  s12.b2 = s12.func();\n  return s12.b2;\n }\n }\n");
##
##      // simplify to just the test return statement:
##      //bool rtn1 = fms->add("S.ulam"," ulam 1;\nelement S(Int x, Int y){\nBool(x+y) b2;\n  Int test() {\nS(1,2) s12;\n  return s12.b2;\n }\n }\n");
##

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

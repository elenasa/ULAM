## -*- mode:ulam -*-
#=t41533_test_compiler_instanceofconstructorandclassidof
##  gen output: (interleaved asserts + 1)
##  Unsigned Arg: 2
##  Unsigned Arg: 1
##
#!
Exit status: 0
Ue_T : System { Unsigned(8) cid7[2](2u,2u);  Unsigned(8) cid4[2](1u,1u);  :System<> Int test() {  Int w = 12 cast;  Int h = 6 cast;  self cid7 . 0 [] .[2u] cast = self cid7 . 1 [] .[2u] cast = self ( self cid7 . 0 [] cast )print . self ( self cid7 . 0 [] self cid7 . 1 [] == )assert . self cid4 . 0 [] .[1u] cast = self cid4 . 1 [] .[1u] cast = self ( self cid4 . 0 [] cast )print . self ( self cid4 . 0 [] self cid4 . 1 [] == )assert . self ( self cid7 . 0 [] self cid4 . 0 [] != )assert . 0 cast return } }
Uq_System { <NOMAIN> }
Uq_B2D : B2DT(7) { /* empty class block */ }
Uq_B2DT(Unary(8) cBITS_PER_COORD) { constant Unsigned cCOMPILATION_ERROR_UNLESS_BITS_GE_2 = 1u cBITS_PER_COORD 1u -b /;  typedef Unsigned(UNKNOWN) BCoord;  constant Unsigned(UNKNOWN) cILLEGAL = unresolved maxof .;  constant Unsigned(UNKNOWN) cMAXVAL = unresolved maxof . 1u -b;  constant Unsigned(UNKNOWN) cMINVAL = unresolved minof .;  Unsigned(UNKNOWN) mX(notready);  Unsigned(UNKNOWN) mY(notready);  <NOMAIN> }
##
##  informed by t41531 consecutive of-operators on Types (without symbols)
##
#>T.ulam
 ulam 5;
element T : System {
  Unsigned(8) cid7[2];
  Unsigned(8) cid4[2];
  Int test(){
    Int w = 12, h = 6;
    cid7[0] = B2D.instanceof(w,h).classidof;
    cid7[1] = B2D.instanceof(0,0).classidof;
    print(cid7[0]);
    assert(cid7[0]==cid7[1]);

    cid4[0] = B2DT(4).instanceof(w,h).classidof;
    cid4[1] = B2DT(4).instanceof(0,0).classidof;
    print(cid4[0]);
    assert(cid4[0]==cid4[1]);
    assert(cid7[0] != cid4[0]);

    return 0;
  }
}

#:B2DT.ulam
  ulam 5;
quark B2DT(Unary(8) cBITS_PER_COORD) {
  constant Unsigned cCOMPILATION_ERROR_UNLESS_BITS_GE_2 = 1u/(cBITS_PER_COORD-1u);
  typedef Unsigned(cBITS_PER_COORD) BCoord;
  constant BCoord cILLEGAL = BCoord.maxof;
  constant BCoord cMAXVAL = BCoord.maxof-1u;
  constant BCoord cMINVAL = BCoord.minof;
  BCoord mX = cILLEGAL;
  BCoord mY = cILLEGAL;

  Self(Int x, Int y) {
    init(x,y);
  }

  Void init(Int x, Int y) {
    if (x < cMINVAL || x < cMINVAL ||
        y > cMAXVAL || y > cMAXVAL)
      invalidate();
    else {
      mX = (BCoord) x;
      mY = (BCoord) y;
    }
  }

  Void invalidate() {
    mX = mY = cILLEGAL;
  }
}

#:B2D.ulam
  ulam 5;
quark B2D : B2DT(7) { }

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

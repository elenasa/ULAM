## -*- mode:ulam -*-
#=t3305_test_compiler_multiplestmts_binaryops
##      /* gen code output:
##	 Int Arg: 2
##	 Int Arg: 0
##	 Int Arg: 0
##	 Int Arg: 1
##	 Int Arg: 1
##      */
##
#!
Exit status: 1
Ue_A { System s();  Bool(7) spb(false);  Int c(0);  Int d(1);  Int test() {  Int a;  Int b;  a b self c . 1 cast = = = self c . a b +b = self s . ( self c . )print . self c . self c . a -b b -b = self s . ( self c . )print . a self c . b * = self s . ( a )print . b b b / = self s . ( b )print . self d . a b +b self c . +b = self s . ( self d . )print . a b +b self c . +b return } }
Uq_System { <NOMAIN> }
##      // multiple statements, each of the binary ops, where all idents == 1
##      // when using the same variable for each result, the final value is returned throughout.
##      // to see intermediate results use different variables:
#>A.ulam
  ulam 1;
use System;
element A{
  System s;
  Bool(7) spb;
  Int c, d;
  Int test() {
    Int a, b;
    a = b = c = 1;
    c = a + b;
    s.print(c);
    c = c - a - b;
    s.print(c);
    a = c * b;
    s.print(a);
    b = b / b;
    s.print(b);
    d = (a + b + c);
    s.print(d);
    return (a + b + c);
  }
}
##      //bool rtn1 = fms->add("A.ulam","element A{\nInt c, d;\n Int test() {\n Int a, b;\n a = b = c = 1;\n c = a + b;\n c = c - a - b;\n a = c * b;\n b = b / b;\n d = (a + b + c);\n return (a + b + c);\n }\n }\n");

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

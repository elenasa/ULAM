## -*- mode:ulam -*-
#=t3608_test_compiler_elementinheritedquark_purevirtualfuncuser
##
## gen output: (times 3) requires quark vtable support
##assert: arg is 1
##after asserts abort: arg is 1
##
#!
Exit status: 0
Uq_Base { <NOMAIN> }
Uq_Sub1 : Base { :Base<> <NOMAIN> }
Ue_E1 : Base { :Base<> <NOMAIN> }
Ue_E2 : Sub1 { :Sub1<> ^Base<> <NOMAIN> }
Ue_Test : System { Bool brtn[4](false,true,true,true);  :System<> Int test() {  E1 e1;  self brtn . 2 [] e1 ( )vuser . 7 cast == = self ( self brtn . 2 [] )assert . E2 e2;  self brtn . 3 [] e2 ( )vuser . 9 cast == = self ( self brtn . 3 [] )assert . Sub1 s1;  self brtn . 1 [] s1 ( )vuser . 2 cast == = self ( self brtn . 1 [] )assert . 0 cast return } }
Uq_System { <NOMAIN> }
##
## informed by t3602
##
#:Base.ulam
  ulam 2;
quark Base {
  Int afunc() { return 1; } // not virtual
  virtual Int afunc(Int a); // pure, but overload of same name can be virtual
  virtual Int bfunc() { return 3; }
  Int vuser() {
    return afunc(0); // virtual function invocation: Might return 2, 7, or 9 in this example!
  }
}

#:Sub1.ulam
  ulam 2;
quark Sub1 : Base {
  Int afunc() { return 4; } // not virtual
  virtual Int afunc(Int a) { return 2; } // but overload of same name can be virtual
  virtual Int bfunc() { return 5; } // virtual override
  virtual Int cfunc() { return 6; } // new func
}

#:E1.ulam
  ulam 2;
element E1 : Base {
  virtual Int afunc(Int a) { return 7; } // virtual override
  virtual Int bfunc() { return 8; } // virtual override
}

#:E2.ulam
  ulam 2;
element E2 : Sub1 {
  virtual Int afunc(Int a) { return 9; }
  virtual Int cfunc() { return 10; }
}

#>Test.ulam
  ulam 2;
element Test : System {
  Bool brtn[4];

  Int test() {

    E1 e1;
    brtn[2] = (e1.vuser() == 7);
    assert(brtn[2]);

    E2 e2;
    brtn[3] = (e2.vuser() == 9);
    assert(brtn[3]);
    /* pure
    //       requires immediate quark vtable support
    Base b;
    brtn[0] = (b.vuser() == 2);
    assert(brtn[0]);
    */

    //       requires immediate quark vtable support
    Sub1 s1;
    brtn[1] = (s1.vuser() == 2);
    assert(brtn[1]);

    return 0;
  }
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

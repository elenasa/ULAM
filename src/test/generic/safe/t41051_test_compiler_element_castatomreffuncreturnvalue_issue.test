## -*- mode:ulam -*-
#=t41051_test_compiler_element_castatomreffuncreturnvalue_issue
##
## gen output: 2 asserts
##
## cannot eval atom ref return type that is element Foo, too
##
#!
Exit status: -11
Ue_Foo : QFoo { :QFoo<> Int test() {  System s;  Foo& fooref = self ( )func . cast;  s ( fooref Foo is )assert . QFoo& qfooref = self ( )func . cast;  s ( qfooref QFoo is )assert . Foo f;  Foo& ffooref = f ( )func . cast;  s ( ffooref Foo is )assert . 0 cast return } }
Uq_QFoo { /* empty class block */ }
Uq_System { <NOMAIN> }
##
## informed by Dave email 3/20/2017 and t41033
##
#>Foo.ulam
  ulam 3;
element Foo : QFoo
{
  Atom & func()
  {
    return self.atomof;
  }


  Int test() {
    System s;

    //case 1:
    Foo & fooref = (Foo &) func();
    s.assert(fooref is Foo);

    //case 2:
    QFoo & qfooref = (QFoo &) func();
    s.assert(qfooref is QFoo);

    //case 3: memberselect made a difference
    Foo f;
    Foo & ffooref = (Foo &) f.func();
    s.assert(ffooref is Foo);

    return 0;
  }
}

#:QFoo.ulam
  ulam 1;
quark QFoo { }

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

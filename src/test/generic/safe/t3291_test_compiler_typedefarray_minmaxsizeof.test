## -*- mode:ulam -*-
#=t3291_test_compiler_typedefarray_minmaxsizeof
##      /* gen code output: array size (8 x 4), 3 ways:
##	 Unsigned Arg: 32
##	 Unsigned Arg: 32
##	 Unsigned Arg: 32
##      */
##
#!
Exit status: 0
Ue_B { Bool(7) b(false);  System s();  typedef Unsigned(8) Index;  typedef Unsigned(8) NIdx;  typedef Unsigned(8) IndArr[4];  typedef Unsigned(8) IArray[4];  Unsigned(8) arr[4](0u,0u,0u,0u);  Int test() {  self s . ( 32u )print . self s . ( 32u )print . self s . ( 32u )print . 0 cast return } }
Uq_System { <NOMAIN> }
#>B.ulam
  ulam 1;
use System;
element B {
  System s;
  Bool(7) b;
  typedef Unsigned(8) Index;
  typedef Index NIdx;
  typedef NIdx IndArr[4];
  typedef IndArr IArray;
  IArray arr;
  Int test(){ s.print(IndArr.sizeof);
    s.print(IArray.sizeof);
    s.print(arr.sizeof);
    return 0;
  }
}

##      // with renames of typedefs, and arrays based on typedef
##
##      // test system quark with native overloaded print funcs; assert
#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

## -*- mode:ulam -*-
#=t41383_test_compiler_elementandquarkswclassargs_classidofSelf_issue
##
## gen output: (+ interleaved asserts)
##
##  Unsigned Arg: 2
##  Unsigned Arg: 1
##
#!
Exit status: 2
Ue_P { Bool b(false);  Int test() {  System s;  Q(4,2u) z;  Unsigned val = z ( )getSize .;  s ( val )print . s ( val 2u cast == )assert . Unsigned id = z ( )getClass .;  s ( id )print . s ( id z[1u] == )assert . val cast return } }
Uq_Q(Int b = 3, Unsigned(UNKNOWN) s = NONREADYCONST) { typedef Unsigned(UNKNOWN) Foo;  Unsigned(UNKNOWN) f(notready);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
## informed by Dave 1/24/2020, Self.classidof failed for template, self.classidof workaround;
## how about Self.sizeof, did that ever work in a template? Nope.
##
#>P.ulam
  ulam 1;
use Q;
element P {
  Bool b;
  Int test() {
    System s;
    Q(4, 2) z;
    Unsigned val = z.getSize();
    s.print(val);
    s.assert(val == 2u);

    Unsigned id = z.getClass();
    s.print(id);
    s.assert(id == z.classidof);

    return (Int) val;

  }
}

#:Q.ulam
  ulam 5;
quark Q(Int b = 3, Unsigned(b) s = 1u) {
  typedef Unsigned(s) Foo;
  Foo f;

  Unsigned getClass()
  {
  //  ./Q.ulam:7:12: ERROR: Trying to use typedef from another class template 'Q', but instance cannot be found.
    return Self.classidof;
  }

  Unsigned getSize()
  {
    return Self.sizeof;
  }
}


#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

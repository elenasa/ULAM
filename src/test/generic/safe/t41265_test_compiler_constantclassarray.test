## -*- mode:ulam -*-
#=t41265_test_compiler_constantclassarray
#!
Exit status: 0
Ue_KeyExprRep { KeyExprNode m_key( Unsigned(8) m_leftIndex(1u);  Unsigned(8) m_rightIndex(2u);  Unsigned(8) m_keyCode(0u);  Unsigned(8) m_op(124u);  typedef Unsigned(8) Byte; );  Int test() {  self m_key . keyexpr_x13 0 [] = 0 cast return } }
Uq_KeyExprNode { typedef Unsigned(8) Byte;  Unsigned(8) m_leftIndex(0);  Unsigned(8) m_rightIndex(0);  Unsigned(8) m_keyCode(0);  Unsigned(8) m_op(0);  <NOMAIN> }
##
## ish, informed by Dave 3/18/18 and t41261: no longer must see the Type of constant array first
##  //without use ./KeyExprNode.ulam:9:0: ERROR: Invalid size (-2) to set for primitive type: 0Holder.
##  constants and local variables must be declared before used, unlike data members.
##
#>KeyExprRep.ulam
  ulam 3;
//use KeyExprNode;
local constant KeyExprNode keyexpr_x13[] = {
   { .m_leftIndex = 1, .m_rightIndex = 2, .m_keyCode = 0, .m_op = '|' }, // [0]
   { .m_leftIndex = 3, .m_rightIndex = 4, .m_keyCode = 0, .m_op = '&' }, // [1]
   { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'c', .m_op = 0 }, // [2]
   { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'a', .m_op = 0 }, // [3]
   { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'b', .m_op = 0 }, // [4] , EXTRA COMMA at the end??? no difference
 };
element KeyExprRep {
  KeyExprNode m_key;
  Int test() {
    m_key = keyexpr_x13[0]; //displayed in eval output
    return 0;
  }
}

#:KeyExprNode.ulam
  ulam 3;
quark KeyExprNode {
  typedef Unsigned(8) Byte;
  Byte m_leftIndex;  // for [,|&~]
  Byte m_rightIndex; // for [,|&]
  Byte m_keyCode;    // [a-zA-Z.@_?] or 0
  Byte m_op;         // [,|&~] or 0
}

#.

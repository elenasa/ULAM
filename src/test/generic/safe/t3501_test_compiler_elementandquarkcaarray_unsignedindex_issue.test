## -*- mode:ulam -*-
#=t3501_test_compiler_elementandquarkcaarray_unsignedindex_issue
##
##./Foo.ulam:18:13: ERROR: Custom Array subscript requires aref/aset function call; Unsupported for eval.
#!
Exit status: 0
Ue_Foo { Bool(3) b(false);  typedef Bar Pop[2];  Int(4) m_i(0);  Bar m_bar2[2]( typedef Unsigned(6) Index;  Bool val_b[3](false,false,false);  typedef Unsigned(6) Index;  Bool val_b[3](false,false,false); );  Bar sbar( typedef Unsigned(6) Index;  Bool val_b[3](false,false,false); );  Int test() {  Atom a;  a self sbar . ( 4 cast )aref . = a self sbar . ( 2 cast )aref . = Gah g;  a self sbar . ( g )aref . = 0 cast return } }
Uq_Bar { typedef Unsigned(6) Index;  Bool val_b[3](false,false,false);  <NOMAIN> }
Uq_Gah { /* empty class block */ }
##
##      //informed by 3223
##
#>Foo.ulam
  ulam 1;
use Bar;
element Foo {
  typedef Bar Pop[2];
  Bool(3) b;
  Int(4) m_i;
  Pop m_bar2;
  Bar sbar;
  Bool check(Int v) {
    return true;
  }
  Int test() {
    Atom a;
    a = sbar[4];
    //sbar[5] = a;
    a = sbar[(Unary(2))2];
    Gah g;
    a = sbar[g];
    return 0;
  }
}
##      //./Foo.ulam:16:10: ERROR: Ambiguous matches (2) of custom array get function for argument type Int(3); Explicit casting required.

#:Bar.ulam
  ulam 1;
use Gah;
quark Bar {
  typedef Unsigned(6) Index;
  Bool val_b[3];
  Void reset(Bool b) {
    b = false;
  }
  Atom aref(Index index){
    Atom a;
    return a;
  }
  Atom aref(Unary(2) index){
    Atom a;
    return a;
  }
  Atom aref(Gah index){
    Atom a;
    return a;
  }
  //Void aset(Index index, Atom v) {
  //  return;
  //}
}
##      //./Foo.ulam:16:10: ERROR: Ambiguous matches (2) of custom array get function for argument type Int(2); Explicit casting required.
##      //./Foo.ulam:17:5: ERROR: Ambiguous matches (2) of custom array get function for argument type Int(2); Explicit casting required.
##      //bool rtn2 = fms->add("Bar.ulam"," ulam 1;\n quark Bar {\n typedef Unsigned(6) Index;\n Bool val_b[3];\n  Void reset(Bool b) {\n b = false;\n }\n Atom aref(Index index){ Atom a; return a;\n}\n Atom aref(Unary(2) index){ Atom a; return a;\n}\n Void aset(Index index, Atom v) {\n return;\n}\n }\n");
##
##
##       //try overloading aref with a quark that has no toInt for custom array subscripting
#:Gah.ulam
  ulam 1;
quark Gah {
  //no toInt on purpose
}
#.

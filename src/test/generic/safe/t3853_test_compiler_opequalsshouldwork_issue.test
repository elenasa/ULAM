## -*- mode:ulam -*-
#=t3853_test_compiler_opequalsshouldwork_issue
##
## gen output: 6 asserts
##
#!
Exit status: 1
Ue_Foo { Int a(1);  Int test() {  System s;  self a . 2 cast *= self a . 2 cast /= s ( self a . 1 cast == )assert . Int arr[4] = { 4 };  arr self a . 1 += [] 2 cast /= s ( self a . 2 cast == )assert . s ( arr 2 [] 2 cast == )assert . self a . 2 cast %= s ( self a . 0 cast == )assert . Int arr2[4] = { 4, 3, 2, 1 };  arr2 self a . 1 += [] 2 cast %= s ( self a . 1 cast == )assert . s ( arr2 1 [] 1 cast == )assert . self a . return } }
Uq_System { <NOMAIN> }
##
## dave ish 7/23/2016, '/=' is not in the grammar, either. Plus the tricky case.
##  neither was '%='
##
#>Foo.ulam
  ulam 3;
element Foo {
  Int a = 1;

  Int test() {
    System s;

    //divide equal tests:
    a *= 2;
    a /= 2; //TOK_SLASH_EQUAL
    s.assert(a == 1);

    //tricky case: lhs read once!
    Int arr[4] = { 4 };
    arr[++a] /= 2;

    s.assert(a == 2);
    s.assert(arr[2] == 2);

    //remainder equal tests:
    a %= 2; //TOK_PERCENTSIGN_EQUAL
    s.assert(a == 0);

    //tricky case: lhs read once!
    Int arr2[] = { 4, 3 , 2,  1 };
    arr2[++a] %= 2;

    s.assert(a == 1);
    s.assert(arr2[1] == 1);
    return a;
  }
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

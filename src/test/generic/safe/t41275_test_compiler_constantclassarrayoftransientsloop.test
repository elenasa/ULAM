## -*- mode:ulam -*-
#=t41275_test_compiler_constantclassarrayoftransientsloop
##
## gen output: (+ interleaved asserts)
##  String(1) Arg: "melt" (5 times)
##  String(7) Arg: "let" (5 times)
##
## Big transients unevaluable
#!
Exit status: -11
Ue_KeyExprRep { Int test() {  SystemU3 s;  { Int i = 0 cast;  i 5u cast < cond { s ( keyexpr_x13 i [] m_elfoo . estr 0 [] . )print . s ( 20u 4u cast == )assert . } _1: i 1 ++ while } constant KeyExprNode mykeyarraycopy[5] = keyexpr_x13;  { Int j = 0 cast;  j 5 cast < cond { s ( mykeyarraycopy j [] m_elfoo . estr 1 [] . )print . s ( 20u 3u cast == )assert . } _2: j 1 ++ while } 0 cast return } }
Ue_Elfoo { Bool esp( true);  String estr[2]( { "melt", "let" });  constant String c_str = "reunion";  <NOMAIN> }
Un_KeyExprNode { typedef Unsigned(8) Byte;  Unsigned(8) m_leftIndex(0);  Unsigned(8) m_rightIndex(0);  Unsigned(8) m_keyCode(0);  Unsigned(8) m_op(0);  Elfoo m_elfoo( celfoo);  <NOMAIN> }
Uq_SystemU3 : System { :System<> <NOMAIN> }
Uq_System { <NOMAIN> }
##
## informed by t41273: access each item, and then the entire array to see if the isFixed flag works in gencode
##
#>KeyExprRep.ulam
  ulam 3;
use Elfoo;
use KeyExprNode; ////without use ./KeyExprNode.ulam:9:0: ERROR: Invalid size (-2) to set for primitive type: 0Holder.
local constant KeyExprNode keyexpr_x13[] = {
  { .m_leftIndex = 1, .m_rightIndex = 2, .m_keyCode = 0, .m_op = '|' }, // [0]
  { .m_leftIndex = 3, .m_rightIndex = 4, .m_keyCode = 0, .m_op = '&' }, // [1]
  { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'c', .m_op = 0 }, // [2]
  { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'a', .m_op = 0 }, // [3]
  { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'b', .m_op = 0 }, // [4] , EXTRA COMMA at the end??? no difference
};
element KeyExprRep {
  Int test() {
    SystemU3 s;

    for(Int i = 0; i < keyexpr_x13.lengthof; i++)
    {
      s.print(keyexpr_x13[i].m_elfoo.estr[0]);
      s.assert(keyexpr_x13[i].m_elfoo.estr[0].lengthof == 4u);
    }

    constant KeyExprNode mykeyarraycopy[5] = keyexpr_x13; //step through gencode in gdb
    for(Int j = 0; j < 5; j++)
    {
      s.print(mykeyarraycopy[j].m_elfoo.estr[1]);
      s.assert(mykeyarraycopy[j].m_elfoo.estr[1].lengthof == 3u);
    }
    return 0;
  }
}

#:KeyExprNode.ulam
  ulam 3;
local constant Elfoo celfoo = { };
transient KeyExprNode {
  typedef Unsigned(8) Byte;
  Byte m_leftIndex;  // for [,|&~]
  Byte m_rightIndex; // for [,|&]
  Byte m_keyCode;    // [a-zA-Z.@_?] or 0
  Byte m_op;         // [,|&~] or 0
  Elfoo m_elfoo = celfoo;
}

#:Elfoo.ulam
  ulam 3;
element Elfoo {
  Bool esp = true;
  String estr[2] = { "melt", "let" };
  constant String c_str = "reunion";
}

#:SystemU3.ulam
  ulam 3;
quark SystemU3 : System {
  Void print(String s) native;
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

## -*- mode:ulam -*-
#=t41403_test_compiler_elementandquarks_anothersupervfunccall_ish
##   gencode output (1 assert)
#!
Exit status: 0
Uq_ReversingThreads : SpatialThreads { :SpatialThreads<> <NOMAIN> }
Uq_SpatialThreads { <NOMAIN> }
Uq_System { <NOMAIN> }
Uq_QSerious : ReversingThreads { :ReversingThreads<> ^SpatialThreads<> <NOMAIN> }
Ue_Std12 : QSerious { :QSerious< :ReversingThreads< :SpatialThreads<>> ^SpatialThreads<>> ^ReversingThreads< :SpatialThreads<>> ^SpatialThreads<> Int test() {  self ( )behave . 0 cast return } }
##
## informed by Dave ish 5/2/2020, virtuals, pure, and super;(see also t41397)
## revealed think-o in UlamRef search for non-dominating, most-specific class in call stack
##
#:ReversingThreads.ulam
  ulam 5;
quark ReversingThreads : SpatialThreads{

  Void behave()
  {
    process(); //which one?
  }

  virtual Bool process()
  {
    System s;
    s.assert(false);
    return false;
  }
}

#:SpatialThreads.ulam
  ulam 5;
quark SpatialThreads
{
  virtual Bool process(); //originating
}

#:QSerious.ulam
  ulam 5;
quark QSerious : ReversingThreads {

  Void behave() {
    super.behave(); //new code!!!
  }

  virtual Bool process()
  {
    System s;
    s.assert(true);
    return true;
  }
}


#>Std12.ulam
  ulam 5;
element Std12 : QSerious {

  Int test(){

    behave();
    return 0;
  }
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

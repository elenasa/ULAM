## -*- mode:ulam -*-
#=t41006_test_compiler_tmpvarnotdeclared_lhsfunccallgencode
##
## gen output: (1 assert)
##
#!
Exit status: 0
Ue_A : ConstantLabel("foobar") { :ConstantLabel("foobar")< constant String fstring = "foobar";  :Label< typedef Unsigned(8) StringIndex;  Unsigned(8) mStringIndex(17u); >> ^Label< typedef Unsigned(8) StringIndex;  Unsigned(8) mStringIndex(17u); > Int test() {  self ( )behave . 0 cast return } }
Uq_ConstantLabel(String fstring) : Label { :Label< typedef Unsigned(8) StringIndex;  Unsigned(8) mStringIndex( 0u); > <NOMAIN> }
Uq_Label { typedef Unsigned(8) StringIndex;  Unsigned(8) mStringIndex( 0u);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
## informed by t41005: custom array function call 'afooref' (not an aref call)
##
#>A.ulam
  ulam 3;
element A : ConstantLabel("foobar") {
  Int test()
  {
    behave();
    return 0;
  }
}

quark ConstantLabel(String fstring) : Label
{
  ASCII aref(Unsigned idx)
  {
    return fstring[idx];  // Fails ARRAY_INDEX_OUT_OF_BOUNDS if necessary
  }

  virtual Unsigned alengthof()
  {
    return fstring.lengthof;
  }
}

quark Label {
  typedef Unsigned(8) StringIndex;
  StringIndex mStringIndex = 0;  // Glyph within string

  StringIndex& afooref()
  {
    return mStringIndex;
  }

  virtual ASCII aref(Unsigned idx);
  Void behave()
  {
    System s;
    Unsigned effidx = 17;
    Atom & a = self.atomof; //you be like me
    Self & kid = (Self&) a; //refer to the us in the copy
    //kid.mStringIndex = (StringIndex) effidx; // This is your byte <--ERROR
    kid.afooref() = (StringIndex) effidx; // This is your byte <--TESTING
    s.assert(kid.afooref() == 17u);
  }
}

##      //informed by: t3237_test_compiler_funcdef_whileifnotbreak
##      // using m
##      // new decl var for the forloop
##
##      // test system quark with native overloaded print funcs; assert
#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

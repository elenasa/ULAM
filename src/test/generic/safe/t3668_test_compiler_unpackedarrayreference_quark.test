## -*- mode:ulam -*-
#=t3668_test_compiler_unpackedarrayreference_quark
##      /* gen code output:
##	 Int Arg: 0
##	 Int Arg: 1
##	 Int Arg: 2
##	 Int Arg: 3
##	 Int Arg: 4
##	 Int Arg: 5
##	 Int Arg: 6
##	 Int Arg: 7
##	 Int Arg: 8
##	 Int Arg: 9
##      */
#!
Exit status: 10
Ue_A { System s();  typedef QW BigSite[10];  typedef QW& BSRef[10];  typedef QW& BRR[10];  Int test() {  QW site[10];  QW& siteref[10] = site cast;  QW& brr[10] = siteref;  QW qw;  { Int i = 0 cast;  i 10 cast < cond { siteref i [] qw = siteref i [] ( 1 cast i )set . self s . ( brr i [] ( 1 cast )get . )print . } _1: i 1 += while } 10 cast return } }
Uq_QW { Bool bw(false);  Int(8) iwarr[3](0,0,0);  Bits(7) tw(0);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
## informed by t3666 (see t3669 for packed quark)
##
#>A.ulam
  ulam 2;
use QW;
use System;
element A {
  System s;
  typedef QW BigSite[10]; //try packed first!
  typedef BigSite & BSRef;
  typedef BSRef BRR;

  Int test(){
    BigSite site;
    BSRef siteref = site;
    BRR brr = siteref; //ref to ref
    QW qw;
    for(Int i = 0; i < 10; ++i){
      siteref[i] = qw;
      siteref[i].set(1, i);
      s.print(brr[i].get(1));
    }
    return 10;
  }
}

#:QW.ulam
  ulam 2;
quark QW {
  Bool bw;
  Int(8) iwarr[3];
  Bits(7) tw;
  Void set(Int i, Int v)
  {
    iwarr[i] = (Int(8)) v;
  }

  Int get(Int i)
  {
    return iwarr[i];
  }

}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

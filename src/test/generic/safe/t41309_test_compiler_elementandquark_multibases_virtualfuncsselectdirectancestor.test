## -*- mode:ulam -*-
#=t41309_test_compiler_elementandquark_multibases_virtualfuncsselectdirectancestor
##
## gen output: (interleaved asserts)
##   Int Arg: 212
##   Int Arg: 110
##
#!
Exit status: 0
Ue_Foo +System { Int m_c4(212);  Int m_a4(110);  +System<> Int test() {  E4 e4;  self m_c4 . e4 QBase2 . ( )vfuncc . = self ( self m_c4 . )print . self ( self m_c4 . 212 cast == )assert . self m_a4 . e4 QBase1 . ( )vfunca . = self ( self m_a4 . )print . self ( self m_a4 . 110 cast == )assert . 0 cast return } }
Uq_System { <NOMAIN> }
Ue_E4 : QBase3 +QBase2 +QBase1 { :QBase3< Bool m_b3(false); > +QBase2< Bool m_b2(false); > +QBase1< Bool m_b1(false); > <NOMAIN> }
Uq_QBase2 { Bool m_b2(false);  <NOMAIN> }
Uq_QBase1 { Bool m_b1(false);  <NOMAIN> }
Uq_QBase3 +QBase1 { Bool m_b3(false);  +QBase1< Bool m_b1(false); > <NOMAIN> }
##
##       informed by t41308; no longer requiring direct ancestor, but added +QBase1
##
#>Foo.ulam
  ulam 5;
element Foo +System {
  Int m_c4;
  Int m_a4;

  Int test()
  {
    E4 e4;

    m_c4 = e4.QBase2.vfuncc(); //212
    print(m_c4);
    assert(m_c4==212);

    m_a4 = e4.QBase1.vfunca(); //110
    print(m_a4);
    assert(m_a4==110);

    return 0;
  }
}


#:E4.ulam
  ulam 5;
element E4 : QBase3 +QBase2 +QBase1 {
  virtual Int vfuncc() { return 412; }
  virtual Int vfunca() { return 410; }
  virtual Void behave() { }
}

#:QBase1.ulam
    ulam 4;
quark QBase1 {
  Bool m_b1;
  Void funcNotVirtualSoIrrelevantHere() { }
  //virtual Int vfuncb() { return 111; }   ambiguous (see t41305)
  virtual Int vfunca() { return 110; }
}

#:QBase2.ulam
  ulam 4;
quark QBase2 {
  Bool m_b2;
  virtual ARGB getColor(Unsigned s) { return super.getColor(s); }
  //virtual Int vfunca() { return 210; }
  virtual Int vfuncc() { return 212; }
}

#:QBase3.ulam
  ulam 5;
quark QBase3 +QBase1 {
  Bool m_b3;
  virtual Int vfuncb() { return 311; }
  virtual Int vfunca() { return 310; }
}


#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

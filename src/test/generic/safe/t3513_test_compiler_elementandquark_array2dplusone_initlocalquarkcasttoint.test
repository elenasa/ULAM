## -*- mode:ulam -*-
#=t3513_test_compiler_elementandquark_array2dplusone_initlocalquarkcasttoint
## gencode output: (followed by 4 asserts)
##Int Arg: 9
##Int Arg: 4
##Int Arg: 41
##Int Arg: 1
##
#!
Exit status: 41
Ue_Foo { System s();  Unsigned(1) m_array[64](0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,1u,1u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u);  Int test() {  C2D c;  c self ( 0u cast 0 cast )func . = self m_array . 1 cast c ( )toInt . +b [] 1 cast = self m_array . c ( )toInt . [] 1 cast = self s . ( c m_width . cast )print . self s . ( c m_height . cast )print . self s . ( 1 cast c ( )toInt . +b cast )print . self s . ( self m_array . c ( )toInt . [] cast )print . self s . ( c m_width . 9 cast == )assert . self s . ( c m_height . 4 cast == )assert . self s . ( 1 cast c ( )toInt . +b 41 cast == )assert . self s . ( self m_array . c ( )toInt . [] cast 1 == )assert . 1 cast c ( )toInt . +b cast return } }
Uq_C2D { typedef Int(8) IE;  Int(8) m_width( 9);  Int(8) m_height( 4);  Int(8) m_x(0);  Int(8) m_y(0);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
## informed by t3191
##
#>Foo.ulam
  ulam 1;
use C2D;
use System;
element Foo {
  System s;
  Unsigned(1) m_array[64];
  C2D func(Int i, Int j) {
    C2D c;
    c.set(i,j);
    return c;
  }
  Int test() {
    C2D c;
    c = func(0u,0);
    m_array[1 + c] = 1; //[41] //class second to avoid operator+ overload
    m_array[c] = 1;
    s.print(c.m_width);
    s.print(c.m_height);
    s.print((Int) (1 + c)); //class second to avoid operator+ overload
    s.print( (Int) m_array[c]);
    s.assert(c.m_width == 9);
    s.assert(c.m_height == 4);
    s.assert(1 + c == 41); //class second to avoid operator+ overload
    s.assert(m_array[c] == 1);
    return (Int) (1 + c); //class second to avoid operator+ overload
  }
}

#:C2D.ulam
  ulam 1;
quark C2D {
  typedef Int(8) IE;
  IE m_width = 9, m_height = 4, m_x, m_y;
  Void set(Int a, Int b) {
    m_x = (IE) a;
    m_y = (IE) b;
  }
  Int toInt(){
    return ((m_height-m_y) * m_width + (m_height-m_x));
  }
}

##
##      // test system quark with native overloaded print funcs; assert
#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

## -*- mode:ulam -*-
#=t41323_test_compiler_elementandquark_multibases_virtualfuncscalledonsharedancestoranddatamembercopies
##
## gen output:
## Int Arg: 110 (+ 7 asserts)
## Int Arg: 110 (+ 7 asserts)
##
#!
Exit status: 0
Ue_Foo +System { Int m_c4(110);  Int m_a4(110);  +System<> Int test() {  typedef QBase2 QB2;  typedef QBase1 QB1;  Atom a = E4.instanceof cast;  { a QBase2 as cond { QBase2& a;  self m_a4 . a ( )vfunca . = self ( self m_a4 . )print . self ( self m_a4 . 110 cast == )assert . self ( a m_b1 . )assert . } if } E4& e4ref = a cast;  self ( e4ref m_b1 . )assert . self ( e4ref QB2 . m_b1 . )assert . self ( e4ref QBase3 . m_b1 . )assert . self ( e4ref QBase1 . m_b1 . )assert . self ( e4ref m_b4 . ! )assert . Atom b = E4.instanceof cast;  QBase2& qb2ref = b cast;  self m_c4 . qb2ref ( )vfunca . = self ( self m_c4 . )print . self ( self m_c4 . 110 cast == )assert . self ( qb2ref m_b1 . )assert . E4& e4bref = b cast;  self ( e4bref m_b1 . )assert . self ( e4bref QB2 . m_b1 . )assert . self ( e4bref QBase3 . m_b1 . )assert . self ( e4bref QBase1 . m_b1 . )assert . self ( e4bref m_b4 . ! )assert . 0 cast return } }
Uq_System { <NOMAIN> }
Ue_E4 : QBase3 +QBase2 +QBase1 { Bool m_b4(false);  typedef QBase2 QB2;  :QBase3< Bool m_b3(false); > +QBase2< Bool m_b2(false);  Bits(1) m_bit(0); > +QBase1< Bool m_b1(false); > <NOMAIN> }
Uq_QBase3 : QBase1 { Bool m_b3(false);  :QBase1< Bool m_b1(false); > <NOMAIN> }
Uq_QBase2 +QBase1 { Bool m_b2(false);  Bits(1) m_bit(0);  +QBase1< Bool m_b1(false); > <NOMAIN> }
Uq_QBase1 { Bool m_b1(false);  <NOMAIN> }
##
##       informed by t41318: SHARED multiple QBase1, base of e4, base of calling class;
##       calls QBase1s vfunc; modifies shared m_b1.
##
#>Foo.ulam
  ulam 5;
element Foo +System {
  Int m_c4;
  Int m_a4;

  Int test()
  {
    typedef E4.QB2 QB2;
    typedef QBase3.Super QB1;

    Atom a = E4.instanceof;

    if(a as QBase2)
    {
      m_a4 = a.vfunca(); //110
      print(m_a4);
      assert(m_a4==110);

      //multiple copies of QBase1: ALL SHARED
      assert(a.m_b1);
    }

    E4& e4ref = (E4&) a;
    assert(e4ref.m_b1); //shared, changed
    assert(e4ref.QB2.m_b1); //equiv as-dm
    assert(e4ref.QBase3.m_b1); //shared, equiv dm; touched
    assert(e4ref.QBase1.m_b1); //shared, equiv dm; touched
    assert(!e4ref.m_b4); //m_b4 not defined within as-block


    //COMPARE GEN CODE: as- with ref-
    Atom b = E4.instanceof;
    QBase2& qb2ref = (QBase2&) b;

    m_c4 = qb2ref.vfunca(); //110
    print(m_c4);
    assert(m_c4==110);
    assert(qb2ref.m_b1);

    //multiple copies of QBase1: ALL SHARED
    E4& e4bref = (E4&) b;
    assert(e4bref.m_b1); //touched
    assert(e4bref.QB2.m_b1); //shared, changed
    assert(e4bref.QBase3.m_b1); //equiv dm; touched
    assert(e4bref.QBase1.m_b1); //changed, equiv dm
    assert(!e4bref.m_b4);

    return 0;
  }
}


#:E4.ulam
  ulam 5;
element E4 : QBase3 +QBase2 +QBase1 {
  Bool m_b4;
  virtual Int vfuncc() { return 412; }
  virtual Void behave() { }
  typedef QBase2 QB2;
}

#:QBase1.ulam
    ulam 4;
quark QBase1 {
  Bool m_b1;
  Void funcNotVirtualSoIrrelevantHere() { }
  virtual Int vfunca() { m_b1 = true; return 110; }
}

#:QBase2.ulam
  ulam 5;
quark QBase2 +QBase1 {
  Bool m_b2;
  Bits(1) m_bit; //so that len of QBase2 is different than its pos in E4.
  virtual ARGB getColor(Unsigned s) { return super.getColor(s); }
  virtual Int vfuncc() { m_b2 = true; return 212; }
}

#:QBase3.ulam
  ulam 4;
quark QBase3 : QBase1 {
  Bool m_b3;
  virtual Int vfuncb() { return 311; }
}


#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

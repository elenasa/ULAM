## -*- mode:ulam -*-
#=t41458_test_compiler_atomreftoaccessdatamemberofdatamemberofbaseclass_gencode_ish
##
## gen output: (+ interleaved asserts)
##  Unsigned Arg: 9
##  Unsigned Arg: 1
##  Unsigned Arg: 9
##  Unsigned Arg: 1
##
#!
Exit status: 0
Ue_R { Int test() {  FooNG foo;  foo ( )behave . 0 cast return } }
Ue_FooNG : QGah +SP { /* empty class block */ }
Uq_QFoo { typedef Unsigned(4) FC;  Unsigned(4) mX(0);  Unsigned(4) mY(0);  <NOMAIN> }
Uq_QBar { QFoo mPos( typedef Unsigned(4) FC;  Unsigned(4) mX(0);  Unsigned(4) mY(0); );  QFoo mSize( typedef Unsigned(4) FC;  Unsigned(4) mX(0);  Unsigned(4) mY(0); );  <NOMAIN> }
Uq_QGah { QBar mThis( QFoo mPos( typedef Unsigned(4) FC;  Unsigned(4) mX(0);  Unsigned(4) mY(0); );  QFoo mSize( typedef Unsigned(4) FC;  Unsigned(4) mX(0);  Unsigned(4) mY(0); ); );  QBar mThat( QFoo mPos( typedef Unsigned(4) FC;  Unsigned(4) mX(0);  Unsigned(4) mY(0); );  QFoo mSize( typedef Unsigned(4) FC;  Unsigned(4) mX(0);  Unsigned(4) mY(0); ); );  <NOMAIN> }
Uq_SP : QGah { :QGah< QBar mThis( QFoo mPos( typedef Unsigned(4) FC;  Unsigned(4) mX(0);  Unsigned(4) mY(0); );  QFoo mSize( typedef Unsigned(4) FC;  Unsigned(4) mX(0);  Unsigned(4) mY(0); ); );  QBar mThat( QFoo mPos( typedef Unsigned(4) FC;  Unsigned(4) mX(0);  Unsigned(4) mY(0); );  QFoo mSize( typedef Unsigned(4) FC;  Unsigned(4) mX(0);  Unsigned(4) mY(0); ); ); > <NOMAIN> }
Uq_System { <NOMAIN> }
##
## informed by Dave ish 5/19/2021. Another level deeper (QGah)  than t41457.
##
#>R.ulam
  ulam 5;
element R {
  Int test()
  {
    FooNG foo;
    foo.behave();

    return 0;
  }
}

#:QFoo.ulam
  ulam 5;
quark QFoo {
  typedef Unsigned(4) FC;
  FC mX;
  FC mY;
}

#:QBar.ulam
  ulam 5;
quark QBar {
  QFoo mPos;
  QFoo mSize;
}

#:QGah.ulam
  ulam 5;
quark QGah {
  QBar mThis;
  QBar mThat;
}



#:SP.ulam
  ulam 5;
quark SP : QGah {
  Void behave() {
    System s;
    ++self.mThis.mSize.mY;
    self.mThat.mPos.mX = 9;

    s.print(self.mThat.mPos.mX); // Is 9
    s.assert(self.mThat.mPos.mX==9);
    s.print(self.mThis.mSize.mY); // Is 1
    s.assert(self.mThis.mSize.mY==1);

    Atom copy = self.atomof;
    Self & bein = (Self&) copy;
    s.print(bein.mThat.mPos.mX); // Should be 9 too
    s.assert(bein.mThat.mPos.mX==self.mThat.mPos.mX);
    s.print(bein.mThis.mSize.mY); // Should be 1 too
    s.assert(bein.mThis.mSize.mY==self.mThis.mSize.mY);
  }
}

#:FooNG.ulam
  ulam 5;
element FooNG : QGah + SP {
}


#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

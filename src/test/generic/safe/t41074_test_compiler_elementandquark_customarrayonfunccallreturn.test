## -*- mode:ulam -*-
#=t41074_test_compiler_elementandquark_customarrayonfunccallreturn
##      gen code output: 2 asserts
##          Bool(3) Arg: 0x7 (true)
##
#!
Exit status: -11
Ue_A : QW { Bool b(false);  System s();  QW m_q();  :QW<> Int test() {  self b . self ( )getCA . ( 0 cast )aref . ( )setb . = self s . ( self b . cast )print . self s . ( self b . )assert . self ( )getCA . ( 1 cast )aref . b . self b . = self ( )getCA . ( 2 cast )aref . self ( )getCA . ( 0 cast )aref . = 0 cast return } }
Uq_System { <NOMAIN> }
Uq_QW { <NOMAIN> }
Un_Tfoo { A m_a[4]( System s();  Bool b(false);  QW m_q();  :QW<>), ( System s();  Bool b(false);  QW m_q();  :QW<>), ( System s();  Bool b(false);  QW m_q();  :QW<>), ( System s();  Bool b(false);  QW m_q();  :QW<>);  <NOMAIN> }
##
## informed by t3916
##
#>A.ulam
  ulam 3;
use System;
use QW;
element A : QW {
  System s;

  Bool b;
  QW m_q;
  Tfoo getCA()
  {
    Tfoo asme; //local transient
    return asme; //copy asme, a custom array of A's
  }

  Int test(){
    //Tfoo asme; //custom array
    //carray rhs, but lhs of memberselect on a func call
    b = getCA()[0].setb();
    s.print(b);
    s.assert(b);

    //carray funccall return local copy on lhs, parse
    getCA()[1].b = b;

    //both sides
    getCA()[2] = getCA()[0];

    return 0;
  }

  Bool setb()
  {
    s.assert(self is A);
    self.b = true;
    return self.b;
  }
}

#:QW.ulam
  ulam 2;
quark QW {
  Atom func()
  {
    Atom a = self.atomof;
    return a;
  }
}

#:Tfoo.ulam
  ulam 3;
use A;
transient Tfoo {
  A m_a[4];
  A& aref(Int idx)
  {
    return m_a[idx];
  }
}


#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

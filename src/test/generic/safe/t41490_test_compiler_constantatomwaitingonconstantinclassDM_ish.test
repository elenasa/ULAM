## -*- mode:ulam -*-
#=t41490_test_compiler_constantatomwaitingonconstantinclassDM_ish
##
##  gen output: (+ 1 assert)
## String(1) Arg: "got PlateDeployer atom"
## Unsigned Arg: 1
##
#!
Exit status: 1
Ue_R { SystemU3 s( :System<>);  Int test() {  CodeDeployer cd;  Atom atm = cd ( 0u cast )deploy .;  { atm PlateDeployer is cond { PlateDeployer pd = atm cast;  self s . ( "got PlateDeployer atom" )print . self s . ( pd mDeploySN . cast )print . self s . ( pd mDeploySN . 1u cast == )assert . 1 cast return } if } { atm Empty is cond { self s . ( "failed PlateDeployer atom" )print . } if self s . ( false )assert . else } 0 cast return } }
Uq_SystemU3 : System { :System<> <NOMAIN> }
Ue_CodeDeployer { Unsigned mIndex(0);  <NOMAIN> }
Ue_PlateDeployer { typedef Unsigned(16) ElementType;  typedef Unsigned(6) SN;  Unsigned(16) mPlateType(0);  Unsigned(6) mDeploySN(0);  B2D mSize( constant Unsigned(7) cMAXVAL = 126u;  constant Unsigned(7) cMINVAL = 0u;  constant B2DT(7) cMAX = { .mX = 126u, .mY = 126u };  :B2DT(7)< constant Unsigned cCOMPILATION_ERROR_UNLESS_BITS_GE_2 = 0u;  typedef Unsigned(7) BCoord;  constant Unsigned(7) cILLEGAL = 127u;  constant Unsigned(7) cMAXVAL = 126u;  constant Unsigned(7) cMINVAL = 0u;  Unsigned(7) mX( 127u);  Unsigned(7) mY( 127u); >);  B2D mPos( constant Unsigned(7) cMAXVAL = 126u;  constant Unsigned(7) cMINVAL = 0u;  constant B2DT(7) cMAX = { .mX = 126u, .mY = 126u };  :B2DT(7)< constant Unsigned cCOMPILATION_ERROR_UNLESS_BITS_GE_2 = 0u;  typedef Unsigned(7) BCoord;  constant Unsigned(7) cILLEGAL = 127u;  constant Unsigned(7) cMAXVAL = 126u;  constant Unsigned(7) cMINVAL = 0u;  Unsigned(7) mX( 127u);  Unsigned(7) mY( 127u); >);  Unsigned(16) mDecayType(0);  <NOMAIN> }
Ue_TransportPlateV : B2DPlate { /* empty class block */ }
Uq_AtomUtils { typedef Unsigned(16) Type;  <NOMAIN> }
Uq_EventWindow { typedef Unsigned(6) SiteNum;  typedef Unsigned(3) Symmetry;  <NOMAIN> }
Uq_B2D : B2DT(7) { constant Unsigned(7) cMAXVAL = 126u;  constant Unsigned(7) cMINVAL = 0u;  constant B2DT(7) cMAX = { .mX = 126u, .mY = 126u };  :B2DT(7)< constant Unsigned cCOMPILATION_ERROR_UNLESS_BITS_GE_2 = 0u;  typedef Unsigned(7) BCoord;  constant Unsigned(7) cILLEGAL = 127u;  constant Unsigned(7) cMAXVAL = 126u;  constant Unsigned(7) cMINVAL = 0u;  Unsigned(7) mX( 127u);  Unsigned(7) mY( 127u); > <NOMAIN> }
Uq_B2DPlate : B2DTPlate(7) { /* empty class block */ }
Uq_B2DTPlate(Unary(8) cBITS_PER_COORD) : Plate { typedef B2DT(cBITS_PER_COORD) MyB2D;  typedef Unsigned(6) SN;  B2DT(cBITS_PER_COORD) mSizeOfPlate(notready);  B2DT(cBITS_PER_COORD) mPosOnPlate(notready);  :Plate<> <NOMAIN> }
Uq_Plate { <NOMAIN> }
Uq_B2DT(Unary(8) cBITS_PER_COORD) { constant Unsigned cCOMPILATION_ERROR_UNLESS_BITS_GE_2 = 1u cBITS_PER_COORD 1u -b /;  typedef Unsigned(UNKNOWN) BCoord;  constant Unsigned(UNKNOWN) cILLEGAL = unresolved maxof .;  constant Unsigned(UNKNOWN) cMAXVAL = unresolved maxof . 1u -b;  constant Unsigned(UNKNOWN) cMINVAL = unresolved minof .;  Unsigned(UNKNOWN) mX(notready);  Unsigned(UNKNOWN) mY(notready);  <NOMAIN> }
Uq_C2D { typedef Int(7) Coord;  Int(7) m_width(0);  Int(7) m_height(0);  <NOMAIN> }
Uq_PlateUtils { typedef Unsigned(2) PlateDir;  constant Unsigned(2) cPLATE_GOES_W = 0u;  constant Unsigned(2) cPLATE_GOES_N = 1u;  constant Unsigned(2) cPLATE_GOES_E = 2u;  constant Unsigned(2) cPLATE_GOES_S = 3u;  <NOMAIN> }
Uq_System { <NOMAIN> }
Uq_ClassUtils { typedef Unsigned ClassId;  constant Unsigned cILLEGAL_ID = 4294967295u;  <NOMAIN> }
##
## informed by Dave ish 6/19/21, 115340 (see t41487),
##   B2D has a new constant cMAX that takes an extra iteration to init;
##   needed for default value of mSize, mPos data members in PlateDeployer, a constant called cATOM10.
##   (does not recreate ish)
##
#>R.ulam
  ulam 5;
element R {
  SystemU3 s;
  Int test()
  {
    CodeDeployer cd;
    Atom atm = cd.deploy(0u);
    if(atm is PlateDeployer)
    {
      PlateDeployer pd = (PlateDeployer) atm;
      s.print("got PlateDeployer atom");
      s.print(pd.mDeploySN); //==1
      s.assert(pd.mDeploySN == 1u);
      return 1;
    }

    if(atm is Empty)
    {
      s.print("failed PlateDeployer atom");
    }
    else
      s.assert(false);
    return 0;
  }
}

#:CodeDeployer.ulam
  ulam 5;

local constant PlateDeployer cATOM10 = {
  .mPlateType = TransportPlateV.classidof,
  .mDeploySN = 1u,
  .mSize = { .mX = 1, .mY = 9 },
  .mPos  = { .mX = 0, .mY = 8 },
  .mDecayType = Empty.classidof
};

local constant Empty cEmpty = { };

local constant Atom cCODE [] = { cATOM10, cEmpty};

element CodeDeployer {
  Unsigned mIndex;

  Atom deploy(Unsigned idx) {

    Atom foo = cCODE[idx];
    return foo;
  }

}



#:PlateDeployer.ulam
  ulam 5;
/** Plate Deployer.  Create a plate then decay into something else.
    \symbol PD
    \color #fa5
 */
element PlateDeployer {
  typedef AtomUtils.Type ElementType;
  typedef EventWindow.SiteNum SN;
  ElementType mPlateType; //< Specific type of B2DPlate to deploy
  SN mDeploySN;           //< Where to deploy it
  B2D mSize;              //< Size of that plate
  B2D mPos;               //< Position of created plate
  ElementType mDecayType; //< Type to decay into after successful deployment
  Self(Unsigned ptype, SN deploysn, B2D siz, B2D pos, Unsigned dtype) {
    mPlateType = (ElementType) ptype;
    mDeploySN = deploysn;
    mSize = siz;
    mPos = pos;
    mDecayType = (ElementType) dtype;
  }
  Void die(String msg) {
    SystemU3 du;
    du.print(msg);
    du.assert(false);// f.fail("PlateDeployment failed");
  }

  Bool isLegalElementType(ElementType type) {
    AtomUtils au;
    if (au.getEmptyType() == type) return true;
    Atom a = au.new(type);
    return !(a is Empty);
  }

  Void behave() {
    if (mPlateType == 0u) return die("Nothing to deploy");
    EventWindow ew;
    //if (!ew.isAccessible(mDeploySN)) return die("Inaccessible");
    Bool deployOnSelf = mDeploySN == 0u;
    //if (!isLegalElementType(mPlateType)) return die("Illegal plate type");
    AtomUtils au;
    Atom a = au.new(mPlateType);
    if (a as B2DPlate) {
      a.setSizeOfPlate(mSize.toC2D());
      a.setPositionOnPlate(mPos.toC2D());
    }
    ew[mDeploySN] = a;
    if (!deployOnSelf)
      ew[0] = au.new(mDecayType);
  }
}

#:B2DPlate.ulam
  ulam 5;
quark B2DTPlate(Unary(8) cBITS_PER_COORD) : Plate {
  typedef B2DT(cBITS_PER_COORD) MyB2D;
  typedef EventWindow.SiteNum SN;
  MyB2D mSizeOfPlate;
  MyB2D mPosOnPlate;

  //// Plate API
  @Override
  virtual C2D sizeOfPlate() { return mSizeOfPlate.toC2D(); }
  @Override
  virtual C2D positionOnPlate() { return mPosOnPlate.toC2D(); }

  //// B2DPlate utilities

  Bool setSizeOfPlate(C2D size) { return mSizeOfPlate.fromC2D(size); }

  Bool setPositionOnPlate(C2D pos) { return mPosOnPlate.fromC2D(pos); }

  SN getCCWPlate() {
    PlateUtils pu;
    C2D pos = positionOnPlate();
    C2D size = sizeOfPlate();
    PlateUtils.PlateDir dir = pu.borderDir(pos,size);
    C2D incr;
    which (dir) {
      case pu.cPLATE_GOES_N: {
	if (pos.getX() > 0) incr.setX(-1); else incr.setY(+1);
      }
      case pu.cPLATE_GOES_E: {
	if (pos.getY() > 0) incr.setY(-1); else incr.setX(-1);
      }
      case pu.cPLATE_GOES_S: {
	if (pos.getX() < size.getX() - 1) incr.setX(+1); else incr.setY(-1);
      }
      case pu.cPLATE_GOES_W: {
	if (pos.getY() < size.getY() - 1) incr.setY(+1); else incr.setX(+1);
      }
    }
    return SN.maxof;
  }
}

quark B2DPlate : B2DTPlate(7) { /*unused */
}

//quark B2DPlate2 : B2DTPlate(2) { } unneeded


#:B2D.ulam
  ulam 5;
quark B2DT(Unary(8) cBITS_PER_COORD) {
  constant Unsigned cCOMPILATION_ERROR_UNLESS_BITS_GE_2 = 1u/(cBITS_PER_COORD-1u);
  typedef Unsigned(cBITS_PER_COORD) BCoord;
  constant BCoord cILLEGAL = BCoord.maxof;
  constant BCoord cMAXVAL = BCoord.maxof-1u;
  constant BCoord cMINVAL = BCoord.minof;
  BCoord mX = cILLEGAL;
  BCoord mY = cILLEGAL;

  Bool isValid() {
    return mY != cILLEGAL && mY != cILLEGAL;
  }

  Void invalidate() {
    mX = mY = cILLEGAL;
  }

  C2D toC2D() {
    if (!isValid()) {
      System f;
      f.assert(false); //f.fail("toC2D invalid B2D");
    }
    C2D ret(mX,mY);
    return ret;
  }

  Bool fromC2D(C2D c) {
    init(c.getX(),c.getY());
    return isValid();
  }

  Void init(Int x, Int y) {
    if (x < cMINVAL || x < cMINVAL ||
        y > cMAXVAL || y > cMAXVAL)
      invalidate();
    else {
      mX = (BCoord) x;
      mY = (BCoord) y;
    }
  }

  Void init(Self s) {
    init(s.mX,s.mY);
  }

  Self & operator=(Self other) {
    init(other);
    return self;
  }

  Self(Int x, Int y) {
    init(x,y);
  }
}

quark B2D : B2DT(7)
{
  constant BCoord cMAXVAL = Super.cMAXVAL;
  constant BCoord cMINVAL = Super.cMINVAL;
  constant Super cMAX = { .mX = cMAXVAL, .mY = cMAXVAL };
}

#:Plate.ulam
  ulam 5;
quark Plate {

  //// Plate API
  virtual C2D sizeOfPlate() ;                 //< Overall size of self's plate
  virtual C2D positionOnPlate() ;             //< Position of self in plate (0,0)..size-(1,1)
  virtual Bool blockSubplates() { return false; } //< Blocks all priorities in contained plates
  virtual Int priority() { return 0; }        //< Default priority within containment rules
  //// Plate Services
}

#:PlateUtils.ulam
  ulam 5;
quark PlateUtils {
  typedef Unsigned(2) PlateDir;
  constant PlateDir cPLATE_GOES_W = 0u;
  constant PlateDir cPLATE_GOES_N = 1u;
  constant PlateDir cPLATE_GOES_E = 2u;
  constant PlateDir cPLATE_GOES_S = 3u;

  PlateDir borderDir(C2D pos, C2D size) {
    if (pos.getY() == 0 && pos.getX() < size.getX() - 1)
      return cPLATE_GOES_N;
    if (pos.getX() == size.getX() - 1 && pos.getY() < size.getY() - 1)
      return cPLATE_GOES_E;
    if (pos.getY() == size.getY() - 1 && pos.getX() > 0)
      return cPLATE_GOES_S;
    /*if (pos.getX() == 0 && pos.getY() > 0)*/
    return cPLATE_GOES_W;
  }
}

#:C2D.ulam
  ulam 3;
quark C2D {
  typedef Int(7u) Coord;
  Coord m_width;
  Coord m_height;

  Int getX()
  {
    return m_width;
  }
  Int getY()
  {
    return m_height;
  }

  Void setX(Coord x)
  {
    m_width = x;
  }
  Void setY(Coord y)
  {
    m_height = y;
  }

  Void init(Int x, Int y) {
    m_width = (Coord) x;
    m_height = (Coord) y;
    return;
  }

  Self(Int ax, Int ay) {
    init(ax,ay);
  }

}

#:EventWindow.ulam
  ulam 3;
quark EventWindow {
  typedef Unsigned(6) SiteNum;
  typedef Unsigned(3) Symmetry;
  Atom& aref(Int index) native;
}

#:AtomUtils.ulam
  ulam 1;
quark AtomUtils {
  typedef Unsigned(16) Type;

  Atom new(Type newtype)
    {
      Atom a; // = newtype.atomof;
      return a;
  }

    Type getEmptyType() {
    Empty a;
    return getValidType((Atom) a);
  }

  Type getValidType(Atom a)
  {
    System f;
    Int i = getType(a);
    f.assert(i>=0);
    return (Type) i;
  }

  Int getType(Atom a)
  {
    //Int it = a.GetType();
    Int it = 0;
    return it;
  }
}

#:ClassUtils.ulam
  ulam 3;
quark ClassUtils {
  typedef Unsigned ClassId;
  constant ClassId cILLEGAL_ID = ClassId.maxof;
}

#:TransportPlateV.ulam
  ulam 5;
/** Transport Plate Vertical
   \symbol Tv
   \color #3d5
 */
element TransportPlateV : B2DPlate
{ }

#:SystemU3.ulam
  ulam 3;
quark SystemU3 : System {
  Void print(String s) native;
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}

#.

## -*- mode:ulam -*-
#=t3463_test_compiler_quarkshift
##
## gen output:
##    Int Arg: 2
##    Int Arg: 4
##    Int Arg: 8
##
#!
Exit status: 4
Ue_A { Int b(2);  Int c(4);  Int test() {  System s;  Bar a;  self b . 1 cast a ( )toInt . cast << cast = s ( self b . )print . s ( self b . 2 cast == )assert . self c . a ( )toInt . cast cast 2 cast << cast = s ( self c . )print . s ( self c . 4 cast == )assert . Bits bits = self c . cast a ( )toInt . cast <<;  s ( bits cast )print . s ( bits 8u cast == )assert . self c . return } }
Uq_System { <NOMAIN> }
Uq_Bar { <NOMAIN> }
#>A.ulam
  ulam 3;
element A {
  Int b, c;
  Int test() {
    System s;
    Bar a;
    b = (Int) (1 << (Unsigned) a);
    s.print(b);
    s.assert(b==2);

    //c = (Int) (a << 2); //quark on lhs looks for overload operator<< (ulam 3)
    c = (Int) (((Int) a) << 2); //=4 cast a to get toInt.
    s.print(c);
    s.assert(c==4);

    Bits bits = c << (Unsigned) a; //=8
    s.print((Unsigned) bits);
    //s.assert(bits == 0x8);
    s.assert(bits == 0b1000);

    return c;
  }
}

#:Bar.ulam
  ulam 1;
quark Bar {
  Int toInt() {
    return 1;
  }
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

## -*- mode:ulam -*-
#=t41016_test_compiler_controlswitch
##
## gen output: (+ assert)
##   Int Arg: 1
##
#!
Exit status: 1
Ue_A { System s();  Bool(7) b(true);  Unsigned a(1u);  Int test() {  self a . 2 cast = self b . true cast = { typedef Bool(7) _SWITCHTYPEDEF12;  Bool(7) Uh_switchcond12 = self b . !;  Uh_switchcond12 cast true == cond { self a . 1 cast ++ break } if Uh_switchcond12 cast false == cond { self a . 1 cast -- break } if { break } else else _1: } self s . ( self a . )print . self s . ( self a . 1u cast == )assert . self a . cast return } }
Uq_System { <NOMAIN> }
##
## first switch test: evaluate switch condition once only!
##
#>A.ulam
  ulam 3;
element A {
  System s;
  Bool(7) b;
  Unsigned a;
  Int test() {
    a = 2;
    b = true;
    which(!b)
    {
    case true:
      {
	a++;
	break;
      }
    case false:
      {
	a--;
	break;
      }
    otherwise:
      {
	break;
      }
    }
    s.print(a);
    s.assert(a == 1u);
    return (Int) a;
  }
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

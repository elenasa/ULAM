## -*- mode:ulam -*-
#=t41045_test_compiler_controlswitch_whichtrueconstantcondition
##
## gen output: (+ interleaved asserts)
##   Int Arg: 1
##   Int Arg: 1
##
#!
Exit status: 1
Ue_A { System s();  Int a(1);  Int b(1);  Int test() {  self a . 1 cast = self b . 0 cast = { typedef Bool _SWITCHTYPEDEF12;  Bool Uh_switchcond12 = true;  Uh_switchcond12 self a . 0 cast == == cond { self b . 2 cast = break } if Uh_switchcond12 self a . -1 cast == == cond { self b . 3 cast = break } if { self b . 1 cast = break } else else _1: } self s . ( self b . )print . self s . ( self b . 1 cast == )assert . self s . ( self a . )print . self s . ( self a . 1 cast == )assert . self a . return } }
Uq_System { <NOMAIN> }
##
## first switch test: evaluate switch condition once only!
##
#>A.ulam
  ulam 3;
element A {
  System s;
  Int a, b;
  Int test() {
    a = 1;
    b = 0;
    which(true) //<--testing constant true here
    {
    case (a == 0):
      {
	b = 2;
	break;
      }
    case (a == -1):
      {
	b = 3;
	break;
      }
    otherwise:
      {
	b = 1; //<- hits
	break;
      }
    }
    s.print(b);
    s.assert(b == 1);
    s.print(a);
    s.assert(a == 1);
    return a;
  }
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

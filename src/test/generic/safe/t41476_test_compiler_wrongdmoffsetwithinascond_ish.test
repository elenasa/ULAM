## -*- mode:ulam -*-
#=t41476_test_compiler_wrongdmoffsetwithinascond_gencode_ish
##
## gen output: + interleaved asserts)
##  Unsigned Arg: 11
##  Unsigned Arg: 12
##  Unsigned Arg: 15
##  Unsigned Arg: 4
##  Unsigned Arg: 15
##  Unsigned Arg: 4
##  Unsigned Arg: 12
##  Unsigned Arg: 14
##
#!
Exit status: 0
Ue_T { Unsigned(7) ansarr[4](12u,14u,15u,4u);  Int test() {  System s;  Tecton tec;  tec ( )behave . self ansarr . 0 [] tec mPosOnPlate . mX . = self ansarr . 1 [] tec mPosOnPlate . mY . = self ansarr . 2 [] tec mSizeOfPlate . mX . = self ansarr . 3 [] tec mSizeOfPlate . mY . = 0 cast return } }
Uq_System { <NOMAIN> }
Ue_Tecton : B2DPlate { typedef Unsigned(1) Side;  constant Unsigned(1) cNORTH_SIDE = 0u;  constant Unsigned(1) cSOUTH_SIDE = 1u;  Bool mSidesReady[2](false,false);  Bool mGrowLine( false);  :B2DPlate<> ^B2DTPlate(7)< typedef B2DT(7) MyB2D;  B2DT(7) mSizeOfPlate( constant Unsigned cCOMPILATION_ERROR_UNLESS_BITS_GE_2 = 0u;  typedef Unsigned(7) BCoord;  constant Unsigned(7) cILLEGAL = 127u;  constant Unsigned(7) cMAXVAL = 126u;  constant Unsigned(7) cMINVAL = 0u;  Unsigned(7) mX( 127u);  Unsigned(7) mY( 127u); );  B2DT(7) mPosOnPlate( constant Unsigned cCOMPILATION_ERROR_UNLESS_BITS_GE_2 = 0u;  typedef Unsigned(7) BCoord;  constant Unsigned(7) cILLEGAL = 127u;  constant Unsigned(7) cMAXVAL = 126u;  constant Unsigned(7) cMINVAL = 0u;  Unsigned(7) mX( 127u);  Unsigned(7) mY( 127u); );  Bits(2) mDeathBits(0); > ^Plate< typedef Bits(2) DeathBits;  constant Bits(2) cDIE_AND_DOWN = 1u;  constant Bits(2) cDIE_AND_UP = 2u;  constant Bits(2) cDIE_EITHER = 3u; > <NOMAIN> }
Uq_B2DPlate : B2DTPlate(7) { /* empty class block */ }
Uq_C2D { typedef Int(7) Coord;  Int(7) m_width(0);  Int(7) m_height(0);  <NOMAIN> }
Uq_B2D : B2DT(7) { /* empty class block */ }
Uq_B2DT(Unary(8) cBITS_PER_COORD) { constant Unsigned cCOMPILATION_ERROR_UNLESS_BITS_GE_2 = 1u cBITS_PER_COORD 1u -b /;  typedef Unsigned(UNKNOWN) BCoord;  constant Unsigned(UNKNOWN) cILLEGAL = unresolved maxof .;  constant Unsigned(UNKNOWN) cMAXVAL = unresolved maxof . 1u -b;  constant Unsigned(UNKNOWN) cMINVAL = unresolved minof .;  Unsigned(UNKNOWN) mX(notready);  Unsigned(UNKNOWN) mY(notready);  <NOMAIN> }
Uq_B2DTPlate(Unary(8) cBITS_PER_COORD) : Plate { typedef B2DT(cBITS_PER_COORD) MyB2D;  B2DT(cBITS_PER_COORD) mSizeOfPlate(notready);  B2DT(cBITS_PER_COORD) mPosOnPlate(notready);  Bits(UNKNOWN) mDeathBits(notready);  :Plate< typedef Bits(2) DeathBits;  constant Bits(2) cDIE_AND_DOWN = 1u;  constant Bits(2) cDIE_AND_UP = 2u;  constant Bits(2) cDIE_EITHER = 3u; > <NOMAIN> }
Uq_Plate { typedef Bits(2) DeathBits;  constant Bits(2) cDIE_AND_DOWN = 1u;  constant Bits(2) cDIE_AND_UP = 2u;  constant Bits(2) cDIE_EITHER = 3u;  <NOMAIN> }
##
##  informed by Daves ish 20210607 111724, replicates issue! YAY! (see also t41497 simplified)
##  genHiddenArgs2 for funccalls, needed the same first DM index code from t41457,8,9.
##
#>T.ulam
  ulam 5;
element T{
  Unsigned(7) ansarr[4];
  Int test(){
    System s;
    Tecton tec;
    tec.behave();
    ansarr[0] = tec.mPosOnPlate.mX; //==12u
    ansarr[1] = tec.mPosOnPlate.mY; //==14u
    ansarr[2] = tec.mSizeOfPlate.mX; //==15u
    ansarr[3] = tec.mSizeOfPlate.mY; //==4u
    return 0;
  }
}

#:Tecton.ulam
  ulam 5;
element Tecton : B2DPlate // + PlateUtils {
{
  typedef Unsigned(1) Side;
  constant Side cNORTH_SIDE = 0u;
  constant Side cSOUTH_SIDE = 1u;
  Bool mSidesReady [2];
  Bool mGrowLine = false; // Else swapline

  Void behave()
  {
    System s;
    C2D fwdoffset(1,2);
    C2D size(15,4);
    C2D pos(11,12);

    Atom & a = (Atom &) self; //changes self
    if (a as B2DPlate) // We only know how to fixup B2DPlate specifically
    {
      a.setSizeOfPlate(size);
      a.setPositionOnPlate(pos);

      //TFSDKON19 posplate
      s.print(a.mPosOnPlate.mX);
      s.assert(a.mPosOnPlate.mX == 11);
      s.print(a.mPosOnPlate.mY);
      s.assert(a.mPosOnPlate.mY == 12);

      //GNEC15 msizeplate
      s.print(a.mSizeOfPlate.mX);
      s.assert(a.mSizeOfPlate.mX == 15);
      s.print(a.mSizeOfPlate.mY);
      s.assert(a.mSizeOfPlate.mY == 4);

      a.mPosOnPlate.fromC2D(a.mPosOnPlate.toC2D() + fwdoffset.abs()); // <<--see gencode for pos

      //GNEC16 msizeplate (no change)
      s.print(a.mSizeOfPlate.mX);
      s.assert(a.mSizeOfPlate.mX == 15);
      s.print(a.mSizeOfPlate.mY);
      s.assert(a.mSizeOfPlate.mY == 4);

      //TFSDKON210 new posplate + fwdoffset
      s.print(a.mPosOnPlate.mX);
      s.assert(a.mPosOnPlate.mX == 12); // +1
      s.print(a.mPosOnPlate.mY);
      s.assert(a.mPosOnPlate.mY == 14); // +2
    }
  }
}

#:B2D.ulam
  ulam 5;
quark B2DT(Unary(8) cBITS_PER_COORD) {
  constant Unsigned cCOMPILATION_ERROR_UNLESS_BITS_GE_2 = 1u/(cBITS_PER_COORD-1u);
  typedef Unsigned(cBITS_PER_COORD) BCoord;
  constant BCoord cILLEGAL = BCoord.maxof;
  constant BCoord cMAXVAL = BCoord.maxof-1u;
  constant BCoord cMINVAL = BCoord.minof;

  BCoord mX = cILLEGAL;
  BCoord mY = cILLEGAL;

  Self min(Self other) {
    Self ret = self;
    if (other.mX < ret.mX) ret.mX = other.mX;
    if (other.mY < ret.mY) ret.mY = other.mY;
    return ret;
  }

  Self max(Self other) {
    Self ret = self;
    if (other.mX > ret.mX) ret.mX = other.mX;
    if (other.mY > ret.mY) ret.mY = other.mY;
    return ret;
  }

  Self & operator=(Self other) {
    init(other);
    return self;
  }

  Bool operator==(constant Self & other) {
    return mX == other.mX && mY == other.mY;
  }

  Self operator-(Self other) {
    Self ret = self;
    if (ret.isValid() && other.isValid()) {
      ret.mX -= other.mX;
      ret.mY -= other.mY;
    }
    return ret;
  }

  Self operator+(Self other) {
    Self ret = self;
    if (ret.isValid() && other.isValid()) {
      ret.mX += other.mX;
      ret.mY += other.mY;
    }
    return ret;
  }

  Self & operator-=(Self other) { self = self - other; return self; }

  Self & operator+=(Self other) { self = self + other; return self; }

  /* Make BCoord.maxof an illegal value.  Gives us an OoB value for signaling
  */
  Bool isValid() {
    return mY != cILLEGAL && mY != cILLEGAL;
  }

  Void invalidate() {
    mX = mY = cILLEGAL;
  }

  C2D toC2D() {
    if (!isValid()) {
      System f;
      f.assert(false); //"toC2D invalid B2D"
    }
    C2D ret(mX,mY);
    return ret;
  }

  Bool fromC2D(C2D c) {
    init(c);
    return isValid();
  }

  Self(Int x, Int y) {
    init(x,y);
  }

  Self(C2D c) {
    fromC2D(c);
  }

  Void init(Self s) {
    init(s.mX,s.mY);
  }

  Void init(C2D coord) {
    init(coord.m_width, coord.m_height);
  }

  Void init(Int x, Int y) {
    if (x < cMINVAL || x < cMINVAL ||
        y > cMAXVAL || y > cMAXVAL)
      invalidate();
    else {
      mX = (BCoord) x;
      mY = (BCoord) y;
    }
  }
}

quark B2D : B2DT(7) { }


#:B2DPlate.ulam
    ulam 5;
quark B2DTPlate(Unary(8) cBITS_PER_COORD) : Plate {
  typedef B2DT(cBITS_PER_COORD) MyB2D;
  //typedef EventWindow.SiteNum SN;
  MyB2D mSizeOfPlate;
  MyB2D mPosOnPlate;
  DeathBits mDeathBits;

  //// B2DPlate API
  virtual Atom copyOf() { //< A copy of self suitable for healing
    return self.atomof;
  }

  //// Plate API
  @Override
  virtual C2D sizeOfPlate() { return mSizeOfPlate.toC2D(); }
  @Override
  virtual C2D positionOnPlate() { return mPosOnPlate.toC2D(); }
  @Override
  virtual DeathBits getDeathBits() { return mDeathBits; }
  @Override
  virtual Void setDeathBits(DeathBits bits) { mDeathBits = bits; }

  //// B2DPlate utilities

  Bool setSizeOfPlate(C2D size) { return mSizeOfPlate.fromC2D(size); }

  Bool setPositionOnPlate(C2D pos) { return mPosOnPlate.fromC2D(pos); }
}

quark B2DPlate : B2DTPlate(7) { }


#:Plate.ulam
  ulam 5;
quark Plate {
  typedef Bits(2) DeathBits;
  constant DeathBits cDIE_AND_DOWN = 1u<<0u; //< This and its subplates die
  constant DeathBits cDIE_AND_UP =   1u<<1u; //< This and its superplates die
  constant DeathBits cDIE_EITHER = cDIE_AND_DOWN | cDIE_AND_UP; //< This and sub and super plates die

  //// Plate API
  virtual C2D sizeOfPlate() ;                 //< Overall size of self's plate
  virtual C2D positionOnPlate() ;             //< Position of self in plate (0,0)..size-(1,1)
  virtual Bool blockSubplates() { return false; } //< Blocks all priorities in contained plates
  virtual Int priority() { return 0; }        //< Default priority within containment rules
  virtual DeathBits getDeathBits() ;          //< Current DeathBits status of Plate
  virtual Void setDeathBits(DeathBits bits) ; //< Update DeathBits status of Plate

  //// Plate Services
}

#:C2D.ulam
  ulam 3;
quark C2D {
  typedef Int(7u) Coord;
  Coord m_width;
  Coord m_height;

  Void init(Int x, Int y) {
    m_width = (Coord) x;
    m_height = (Coord) y;
    return;
  }
  Int getIndex(Int a, Int b){
    return ((m_height-b) * m_width + (m_height-a));
  }
  Int getX()
  {
    return m_width;
  }
  Int getY()
  {
    return m_height;
  }

  Self(Int ax, Int ay) {
    init(ax,ay);
  }

  Self abs() {
    return abs(self);
  }

  Self abs(Self of) {
    if (of.m_width < 0) of.m_width = -of.m_width;
    if (of.m_height < 0) of.m_height = -of.m_height;
    return of;
  }

  Self & operator+=(Self other) {
    // This single statement should work..
    // return self = self + other;
    self = self + other;
    return self;
  }

  Self add(Self other) {
    return make((Coord) (m_width + other.m_width), (Coord) (m_height + other.m_height));
  }

  Self operator+(Self other) {
    return add(other);
  }

  Self make(Int x, Int y)
  {
    Self ret;
    ret.init(x,y);
    return ret;
  }
}


#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

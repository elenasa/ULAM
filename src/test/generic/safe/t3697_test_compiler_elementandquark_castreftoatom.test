## -*- mode:ulam -*-
#=t3697_test_compiler_elementandquark_castreftoatom
##      gen code output: (1 assert)
##
#!
Exit status: -11
Ue_A : QW { Bool b(false);  Bool c(false);  :QW< Bool bw(false);  :Qbase< Unary(5) m_five(3u); >> ^Qbase< Unary(5) m_five(3u); > Int test() {  System s;  Qbase& qref = self cast;  qref m_five . 3u cast = Atom a = qref cast;  A apple = a cast;  self b . apple m_five . cast 3u cast == = s ( self b . )assert . self b . cast return } }
Uq_System { <NOMAIN> }
Uq_QW : Qbase { Bool bw(false);  :Qbase< Unary(5) m_five(0); > <NOMAIN> }
Uq_Qbase { Unary(5) m_five(0);  <NOMAIN> }
##
## Dave requested a way to get default values for Self (within a quark);
## a loophole, since a quark would be an undefined atom, but as a ref, its done (t3679)
##
#>A.ulam
  ulam 2;
use System;
use QW;
element A : QW {
  Bool b, c;
  Int test(){
    System s;
    Qbase& qref = self;
    qref.m_five = 0x3;
    Atom a = (Atom) qref; //unused var (qref read) -- name of test!
    //Atom a = qref.atomof; //same result without the unused var
    A apple = (A) a;
    b = (apple.m_five == 0x3);
    s.assert(b);

    return (Int) b;
  }
}

#:QW.ulam
  ulam 2;
use Qbase;
quark QW : Qbase{
  Bool bw;
  Self func()
  {
    Atom a = self.atomof;
    Self& sra = (Self&) a; //new way!
    return sra;
  }
}

#:Qbase.ulam
  ulam 2;
quark Qbase{
  Unary(5) m_five;
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

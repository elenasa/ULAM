## -*- mode:ulam -*-
#=t41112_test_compiler_elementandtrasient_comparisonoperatoroverloads
##
## gen output: (+ interleaved asserts)
##   Bool(3) Arg: 0x0 (false)
##   Bool(3) Arg: 0x7 (true)
##   Bool(3) Arg: 0x7 (true)
##   Bool(3) Arg: 0x0 (false)
##
#!
Exit status: 0
Ue_Foo : QW { Bool first(true);  Bool second(false);  :QW< Int qint(0); > Int test() {  System s;  Foo foo;  foo qint . 2 cast = Too too;  too qint . 3 cast = self first . too ( foo cast )operator< . = s ( self first . cast )print . s ( self first . ! )assert . self second . too ( foo cast )operator< ! . = s ( self second . cast )print . s ( self second . self first . != )assert . self first . too ( foo cast )operator> . = s ( self first . cast )print . s ( self first . )assert . self second . too ( foo cast )operator> ! . = s ( self second . cast )print . s ( self second . self first . != )assert . 0 cast return } }
Uq_QW { Int qint(0);  <NOMAIN> }
Uq_System { <NOMAIN> }
Un_Too : QW { Int topint(0);  :QW< Int qint(0); > <NOMAIN> }
##
## informed by t41109; test of overloaded compare operator< and operator> with class ref as arg
## and negations for its inverse operators >= and <=.
##
#>Foo.ulam
  ulam 3;
element Foo : QW {
  Bool first, second;
  Int test() {
    System s;
    Foo foo;
    foo.qint = 2;
    Too too;
    too.qint = 3;

    //overloaded operator<, two classes as arguments
    first = (too < foo);
    s.print(first);
    s.assert(!first);

    second = (too >= foo);
    s.print(second);
    s.assert(second != first); //should be opposite of <

    //overloaded operator>, two classes as arguments
    first = (too > foo);
    s.print(first);
    s.assert(first);

    second = (too <= foo);
    s.print(second);
    s.assert(second != first); //should be opposite of >

    return 0;
  }
}

#:Too.ulam
  ulam 3;
transient Too : QW
{
  Int topint;
  Bool operator<(Foo& farg)
  {
    return qint < farg.qint;
  }

  Bool operator>(Foo& farg)
  {
    return qint > farg.qint;
  }

}

#:QW.ulam
  ulam 2;
quark QW {
  Int qint;
}


#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

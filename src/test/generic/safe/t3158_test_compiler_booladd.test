## -*- mode:ulam -*-
#=t3158_test_compiler_booladd
##      /* gencode output:
##	 Bool(3) Arg: 0x7 (true)
##	 Unary(3) Arg: 0x1
##      */
#!
Exit status: 1
Ue_A { Bool(3) b(false);  System s();  Bool(3) a(true);  Bool(3) c(true);  Unary(3) d(1u);  Int test() {  self a . true cast = self b . false cast = self c . self a . cast cast self b . cast cast +b 0u cast > cast = self s . ( self c . )print . self d . self c . cast = self s . ( self d . )print . self c . cast return } }
Uq_System { <NOMAIN> }
#>A.ulam
  ulam 1;
use System;
element A {
  System s;
  Bool(3) a, b, c;
  Unary(3) d;
  Int test() {
    a = true;
    b = false;
    c = (((Unsigned(3)) a + (Unsigned(3)) b) > 0u);
    s.print(c);
    d = (Unary(3)) c;
    s.print(d);
    return (Int) c;
  }
}

##      //./A.ulam:9:4: ERROR: Attempting to implicitly cast a non-Bool type, RHS: Unsigned(3), to a Bool type: Bool(3) for binary operator= without casting.
##      //./A.ulam:10:8: ERROR: Incompatible Bool type for binary operator+. Suggest casting to a numeric type first.
##      //here's what happens when we try to add bools and save in a bool;
##      // note1: cast as a unary the sum is true
##      // note2: cast as an Int, the exit status is 1
##      //bool rtn1 = fms->add("A.ulam","use System;\nelement A {\nSystem s;\nBool sp;\n Bool(3) a, b, c;\n Unary(3) d;\n use test;\na = true;\nb = false;\n c = a + b;\ns.print(c);\n d = c;\ns.print(d);\n return c;\n }\n }\n");
##
##      //./A.ulam:9:42: ERROR: Use explicit cast to convert Unsigned(4) and Int(2) to Int(4) for binary operator>.
#:System.ulam
  ulam 1;
quark System {Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

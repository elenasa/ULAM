## -*- mode:ulam -*-
#=t3812_test_compiler_transientarraywithatomarraydm_funccallrefarg
##      gen code output: (2 asserts)
##
#!
Exit status: -11
Ue_R { Bool b(false);  Bool c(false);  Int test() {  System s;  QW qw;  Foo foo;  A ar[3];  ar 1 [] mAtoo 2 [] . foo cast = self ( ar 1 [] mAtoo 2 [] . cast 1u cast )setATre . self b . qw ( ar 1 [] mAtoo 2 [] . cast )aunc . = s ( self b . )assert . ar 2 [] mAtoo 1 [] . foo cast = Atom& arref = ar 2 [] mAtoo 1 [] . cast;  arref foo cast = self ( arref 2u cast )setATre . self c . qw ( arref )aunc . = s ( self c . )assert . 0 cast return } }
Uq_System { <NOMAIN> }
Un_A : QW { Bool(7) sp(false);  Atom mAtoo[3](Atom,Atom,Atom);  :QW<> <NOMAIN> }
Uq_QW { <NOMAIN> }
Ue_Foo { Unary(3) mTre(0);  <NOMAIN> }
##
## similar to 3811, except an array of atoms as data member
##
#>R.ulam
  ulam 2;
use System;
use A;
element R {
  Bool b, c;

  Int test(){
    System s;
    QW qw;
    Foo foo;
    A ar[3];
    ar[1].mAtoo[2] = foo;
    setATre(ar[1].mAtoo[2], 1u);
    b = qw.aunc(ar[1].mAtoo[2]);
    s.assert(b);

    ar[2].mAtoo[1] = foo; //avoid stale atom ref
    Atom& arref = ar[2].mAtoo[1]; //mFoo[3] should have been caught~!!!
    arref = foo; //speriment, was (STALE_ATOM_REF)
    setATre(arref, 2u);
    c = qw.aunc(arref);
    s.assert(c);
    return 0;
  }

  Void setATre(Atom& atom, Unary(3) varg)
  {
    if(atom as Foo)
    {
      atom.setTre(varg);
    }
  }
}

#:A.ulam
  ulam 2;
use QW;
transient A : QW {
  Bool(7) sp;
  Atom mAtoo[3];
  Void setsp()
  {
    sp = true;
  }
}

#:QW.ulam
  ulam 2;
quark QW {
  Bool func(A& aarg)
  {
    return aarg.sp;
  }

  Bool eunc(Foo& aarg)
  {
    return (aarg.mTre > Unary(3).minof && aarg.mTre < Unary(3).maxof);
  }

  Bool aunc(Atom& aarg)
  {
    if(aarg as Foo)
      return (aarg.mTre > Unary(3).minof && aarg.mTre < Unary(3).maxof);
    return false;
  }
}

#:Foo.ulam
  ulam 2;
element Foo {
  Unary(3) mTre;
  Void setTre(Unary(3) uarg)
  {
    mTre = uarg;
  }
}


#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

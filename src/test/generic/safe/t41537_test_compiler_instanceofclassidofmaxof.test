## -*- mode:ulam -*-
#=t41537_test_compiler_instanceofclassidofmaxof
##
##  gen output: (+ asserts)
##    Unsigned Arg: 2
##    Unsigned Arg: 1000
##    Unsigned Arg: 10
##
#!
Exit status: 0
Ue_R { Unsigned cidsz(10u);  Unsigned maxcid(1000u);  Int test() {  System s;  Unsigned mycid = .instanceof[2u];  s ( mycid )print . s ( mycid 2u cast == )assert . self maxcid . 1000u = s ( self maxcid . )print . s ( self maxcid . 1000u cast == )assert . self cidsz . 10u = s ( self cidsz . )print . s ( self cidsz . 10u cast == )assert . 0 cast return } }
Uq_System { <NOMAIN> }
Ue_A(Unsigned cid) { constant Unsigned c_cid = cid;  <NOMAIN> }
Ue_Ele2 { /* empty class block */ }
##
## informed by talk 8/8/21 and 8/23/21 with Dave, series of of-Operators; see also t41549.
##    Special case feature: maxof classidof; sizeof classidof == log2 bits for maxof + 1
##
#>R.ulam
  ulam 5;
element R
{
  Unsigned cidsz = 0;
  Unsigned maxcid = 0;

  Int test() {
    System s;
    Unsigned mycid = A(Ele2.classidof).instanceof.classidof;
    s.print(mycid);
    s.assert(mycid == 2u);

    maxcid = A(Ele2.classidof).instanceof.classidof.maxof;
    s.print(maxcid);
    s.assert(maxcid == 1000u); //was Unsigned.maxof

    cidsz = A(Ele2.classidof).instanceof.classidof.sizeof; //sizeof==10bits
    s.print(cidsz);
    s.assert(cidsz == 10u);
    return 0;
  }
}

#:A.ulam
  ulam 5;
element A(Unsigned cid)
{
  constant Unsigned c_cid = cid;
  Unsigned getClassid()  { return c_cid; }
}

#:Ele2.ulam
  ulam 5;
element Ele2 {
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

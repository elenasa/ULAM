## -*- mode:ulam -*-
#=t3585_test_compiler_elementquarkinheritance_returnatomasquarkSelf
##
## gencode output (interleaved asserts):
##   Unsigned Arg: 1
#!
Exit status: 1
Ue_Foo : Soo { Bool first(false);  Unsigned(3) cus(1u);  :Soo< Unsigned(3) sus(4u);  :Coo< Unsigned(3) us(2u);  Bool(3) cb(true); >> ^Coo< Unsigned(3) us(2u);  Bool(3) cb(true); > Int test() {  System s;  Coo c = self ( )func .;  self cus . c us . = s ( c us . cast )print . s ( c us . cast 1 cast == )assert . c us . cast return } }
Uq_Soo : Coo { Unsigned(3) sus( 4u);  :Coo< Unsigned(3) us( 2u);  Bool(3) cb( true); > <NOMAIN> }
Uq_System { <NOMAIN> }
Uq_Coo { Unsigned(3) us( 2u);  Bool(3) cb( true);  <NOMAIN> }
##
## element-quark inheritance, regular (non-template) with casting
## informed by t3564, t3560, t3536, t3559
##
#>Foo.ulam
  ulam 2;
use Soo;
use System;
element Foo : Soo {
  Bool first;
  Unsigned(3) cus = 6u;
  //Unsigned(3) dus = 6u;
  Int test() {
    System s;

    Coo c = func();
    cus = c.us;
    s.print(c.us); //1
    s.assert(c.us == 1); //1

    /*
    FAILED: ILLEGAL_ARGUMENT
    Coo d = c.func(); //what happens when atom is not an Atom, immediate UNDEFINED_TYPE
    dus = d.us;
    s.print(d.us); //3
    s.assert(d.us == 3); //3

    s.print(c.us + d.us); //6
    s.assert(c.us + d.us == 6); //6

    s.print(cus + dus); //4
    s.assert(cus + dus == 4); //4

    return (c.us + d.us);
    */
    return c.us;
  }
}

#:Soo.ulam
  ulam 2;
use Coo;
quark Soo : Coo {
  Unsigned(3) sus = 4u;
}

#:Coo.ulam
  ulam 2;
quark Coo {
  Unsigned(3) us = 2u;
  Bool(3) cb = true;
  Self func()
  {
    Atom f = self.atomof; //was atom, was self
    ////Foo f = (Foo) self;
    //if(f as Foo) //for eval
    {
      if(f as Coo)
      {
	f.us = 1u;
	return (Coo) f; //cast should be sure, right?
      }
    }
    us = 3u;
    return self;
  }
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

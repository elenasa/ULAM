## -*- mode:ulam -*-
#=t3323_test_compiler_namedconstant_scope
##      /* gen code output: + interleaved asserts
##	 Int Arg: 4
##	 Int Arg: 7
##	 Int Arg: 8
##	 Int Arg: 7
##       */
##      //fewer casts since Constants have explicit types
##      // constant fold: j 1 3 +b =, and j 2 4 *
##
#!
Exit status: 7
Ue_A { System s();  Int j(7);  Int i(7);  Int test() {  constant Int cOW = 3;  self j . 4 = self s . ( self j . )print . self s . ( self j . 4 cast == )assert . { self j . self j . 3 +b = self s . ( self j . )print . self s . ( self j . 7 cast == )assert . Int j;  constant Int cOW = 4;  j 8 = self s . ( j )print . self s . ( j 8 cast == )assert . } self i . self j . = self s . ( self i . )print . self s . ( self j . 7 cast == )assert . self j . return } }
Uq_System { <NOMAIN> }
##      //requires new grammar: tests scope
##
##      // includes statements after embedded block; use of variable
##      // inside block defined outside then redefined inside;
##
#>A.ulam
  ulam 1;
use System;
element A{
  System s;
  Int j;
  Int test () {
    constant Int cOW = 3;
    j = 1 + cOW;
    s.print(j);
    s.assert(j==4);
    {
      j = j + cOW;
      s.print(j);
      s.assert(j==7);
      Int j;
      constant Int cOW = 4;
      j = 2 * cOW;
      s.print(j);
      s.assert(j==8);
    }
    i = j;
    s.print(i);
    s.assert(j==7);
    return j;
  }
  Int i;
}
##      //basic:
##      //bool rtn1 = fms->add("A.ulam","use System;\nelement A{\nSystem s;\nInt j;\nInt test () {\nconstant Int cOW = 3;\n j = 1 + cOW;\ns.print(j);\n return j;\n}\n}\n");
##
##      // fails "ERROR: Invalid constant-def of Type: <Int> and Name: <cOW> (problem with [])."
##      // further breakdown of failure: due to lval parsing returning a constant node since cOW was a found symbol.
##      //bool rtn1 = fms->add("A.ulam","element A{\nInt j;\n Int test () {\nconstant Int cOW = 3;\n  {\nconstant Int cOW = 4;\n}\n return cOW;\n}\n}\n");
##
#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

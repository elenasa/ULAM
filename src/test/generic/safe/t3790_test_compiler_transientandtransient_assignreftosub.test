## -*- mode:ulam -*-
#=t3790_test_compiler_transientandtransient_assignreftosub
##
## gen output: (+ 4 asserts)
##   Unsigned : 5
#!
Exit status: -11
Ue_R { Int test() {  System s;  TW tw;  tw m_five . 5 cast = s ( tw m_five . cast )print . s ( tw m_five . cast 5 == )assert . Base& ref = tw cast;  s ( ref m_five . cast 5 == )assert . TW& tapple = ref cast;  s ( tapple m_five . cast 5 == )assert . TW tapple2;  tapple2 ref cast = s ( tapple2 m_five . cast 5 == )assert . 0 cast return } }
Uq_System { <NOMAIN> }
Un_TW : W { Bool b(false);  Bool c(false);  :W< Bool bw(false); > ^Base< Unary(5) m_five(0); > <NOMAIN> }
Uq_Base { Unary(5) m_five(0);  <NOMAIN> }
Un_W : Base { Bool bw(false);  :Base< Unary(5) m_five(0); > <NOMAIN> }
##
## informed by t3756
##
#>R.ulam
  ulam 2;
element R {
  Int test(){
    System s;
    TW tw;
    tw.m_five = 5;
    s.print((Unsigned) tw.m_five);
    s.assert(tw.m_five == 5);

    //case 1: CastDecendentTransient
    Base& ref = tw;
    s.assert(ref.m_five == 5);

    //case 2:  (init) CastAncestorQuarkAsSubTransient
    TW& tapple = (TW&) ref; //unused var (qref read)
    s.assert(tapple.m_five == 5);

    //case 3: (assignment) CastAncestorQuarkAsSubTransient
    TW tapple2;
    tapple2 = (TW) ref; //unused var (ref read)
    s.assert(tapple2.m_five == 5);

    return 0;
  }
}

#:TW.ulam
  ulam 2;
transient TW : W {
  Bool b, c;
}

#:W.ulam
  ulam 2;
transient W : Base{
  Bool bw;
  Self func()
  {
    Self me;
    return me;
  }
}

#:Base.ulam
  ulam 2;
quark Base{
  Unary(5) m_five;
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

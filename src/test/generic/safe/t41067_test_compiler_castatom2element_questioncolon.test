## -*- mode:ulam -*-
#=t41067_test_compiler_castatom2element_questioncolon
##   gen code output: (+ interleaved asserts)
##	 Int Arg: 2
##	 Int Arg: 1
##	 Int Arg: 1
##
#!
Exit status: 1
Ue_Tu { System s();  Int me(1);  Int test() {  Atom a = self.atomof cast;  Tu t = a Tu is ?  a cast :  self cast;  t me . 2 cast = self s . ( t me . )print . self s . ( t me . 2 cast == )assert . self s . ( self me . )print . self s . ( self me . 1 cast == )assert . Tu& tref = a Tu is ?  a cast :  t cast;  self s . ( tref me . )print . self s . ( tref me . 1 cast == )assert . self me . return } }
Uq_System { <NOMAIN> }
##
## informed by t3277
##
#>Tu.ulam
  ulam 3;
element Tu {
  System s;
  Int me = 1;
  Int test(){
    Atom a = self.atomof;

    Tu t = (a is Tu) ? (Tu) a : (Tu) self;
    t.me = 2;
    s.print(t.me);
    s.assert(t.me == 2);
    s.print(me);
    s.assert(me == 1);

    Tu & tref = (a is Tu) ? (Tu &) a : (Tu &) t;
    s.print(tref.me);
    s.assert(tref.me == 1);
    return me; //==1
  }
}

##      // FAILS BAD_CAST (of course it is! we protect against this sort of thing..)
##      //bool rtn1 = fms->add("Tu.ulam", "ulam 1;\n element Tu {\nInt test(){\n Tu t;\nAtom a;\n t = (Tu) a;\n return 0;\n}\n}\n");
##
##      // OK..using 'is' or 'as'
##
##      // test system quark with native overloaded print funcs; assert
#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

## -*- mode:ulam -*-
#=t3840_test_compiler_zerolengtharrayreference_atom
##      gen code output: (2 + 3 * 10) 32 asserts, plus 1
##        Unsigned Arg: 960
##
#!
Exit status: 10
Ue_A { System s();  typedef Atom BigSite[10];  typedef Atom& BSRef[10];  typedef Atom& BRR[10];  typedef Atom NoSite[0];  typedef Atom& NoRef[0];  typedef Atom& NRR[0];  Int test() {  Atom nosite[0];  Atom& nositeref[0] = nosite cast;  Atom& nrr[0] = nositeref;  self s . ( true )assert . self s . ( true )assert . Atom site[10];  Atom& siteref[10] = site cast;  Atom& brr[10] = siteref;  Atom a = self.atomof cast;  Atom ab;  { Int i = 0 cast;  i 10 cast < cond { siteref i [] a = self s . ( brr i [] A is )assert . ab siteref i [] = self s . ( ab A is )assert . Atom ac = siteref i [];  self s . ( ac A is )assert . } _1: i 1 += while } self s . ( 960u )print . self s . ( true )assert . 10 cast return } }
Uq_System { <NOMAIN> }
##
## informed by t3671
##
#>A.ulam
  ulam 2;
use System;
element A {
  System s;
  typedef Atom BigSite[10];
  typedef BigSite & BSRef;
  typedef BSRef BRR;

  typedef Atom NoSite[0];
  typedef NoSite & NoRef;
  typedef NoRef NRR;

  Int test(){
    NoSite nosite;
    NoRef nositeref = nosite;
    NRR nrr = nositeref; //ref to ref
    //Atom an = nosite[0]; ////ARRAY_INDEX_OUT_OF_BOUNDS (t3843)

    s.assert(NoSite.sizeof == 0);
    s.assert(nosite.sizeof == 0);

    //the rest of this should still gcc compile without ambiguity.
    BigSite site;
    BSRef siteref = site;
    BRR brr = siteref; //ref to ref
    Atom a = self.atomof;
    Atom ab;
    for(Int i = 0; i < 10; ++i){
      siteref[i] = a; //self.atomof, self also work
      s.assert(brr[i] is Self);
      ab = siteref[i]; //assign from
      s.assert(ab is Self);
      Atom ac = siteref[i]; //init from
      s.assert(ac is Self);
    }
    s.print(brr.sizeof);
    s.assert(brr.sizeof == 960u);
    return 10;
  }
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

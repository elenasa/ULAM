## -*- mode:ulam -*-
#=t3338_test_compiler_elementandquarkwargs_caarray_isparse
##
## gen output:
## Int Arg: -2
## assert: arg is 1
## after asserts abort: arg is 1
##
##       //Constants have explicit types; a cast changed
#!
Exit status: -11
Ue_EventWindowTest { constant Int v = -2;  EventWindow(-2) ew( constant Int w = -2; );  Int test() {  System s;  Int rtn = -1 cast;  EventWindowTest ewt;  self ew . ( 0 cast )aref . ewt cast = Atom a = self ew . ( 0 cast )aref . cast;  Atom aw = ewt cast;  { aw EventWindowTest is cond rtn -2 = if rtn 1 cast = else } s ( rtn )print . s ( rtn -2 == )assert . rtn return } }
Uq_EventWindow(Int w) { <NOMAIN> }
Uq_System { <NOMAIN> }
##      //informed by t3248
##      // added named constant v; tests -2 (also used as "NONREADYCONST") as arg value.
##      // 'a has System' doesn't appy to eval because atoms have no class declarations; but testable for gencode
##
#>EventWindowTest.ulam
  ulam 1;
use EventWindow;
use System;
element EventWindowTest {
  constant Int v = -2;
  EventWindow(v) ew;
  Int test() {
    System s;
    Int rtn = -1;
    EventWindowTest ewt;
    //parsing test only here
    ew[0] = ewt;
    Atom a = ew[0];  // This is me!

    Atom aw = ewt;
    if (aw is EventWindowTest)
      rtn = v;
    else
      rtn = 1;
    s.print(rtn);
    s.assert(rtn == v);
    return rtn;
 }
}

#:EventWindow.ulam
  ulam 3;
quark EventWindow(Int w) {
  Atom& aref(Int index) native;
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

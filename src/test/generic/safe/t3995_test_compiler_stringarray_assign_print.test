## -*- mode:ulam -*-
#=t3995_test_compiler_stringarray_assign_print
##
## gen output: (+ assert)
##  String(11) Arg: "three"
##  Int Arg: 16
##
#!
Exit status: 16
Ue_A { constant String cStrArr[4] = { "one", "two", "three", "three" };  Int m_total(16);  Int test() {  SystemU3 su3;  su3 ( cStrArr 3 [] )print . { Int i = 0 cast;  i 4u cast < cond { self m_total . 5u cast += } _1: i 1 ++ while } su3 ( self m_total . )print . su3 ( self m_total . 16 cast == )assert . self m_total . return } }
Uq_SystemU3 : System { :System<> <NOMAIN> }
Uq_System { <NOMAIN> }
##
## Tests propagtion of initialized string array
##
#>A.ulam
  ulam 3;
element A {
  constant String cStrArr[4] = { "one", "two", "three"}; //propagates

  Int m_total;
  Int test() {
    SystemU3 su3;
    su3.print(cStrArr[3]);

    for(Int i = 0; i < cStrArr.lengthof; i++)
    {
      m_total += cStrArr[i].lengthof;
    }

    su3.print(m_total);
    su3.assert(m_total == 16);

    return m_total;
 }
}

#:SystemU3.ulam
  ulam 3;
quark SystemU3 : System {
  Void print(String s) native;
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

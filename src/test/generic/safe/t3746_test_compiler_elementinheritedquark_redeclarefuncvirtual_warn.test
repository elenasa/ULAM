## -*- mode:ulam -*-
#=t3746_test_compiler_elementinheritedquark_redeclarefuncvirtual_warn
##
## gen output: (times 2) requires quark vtable support
## assert: arg is 1
## after asserts abort: arg is 1
##
#!
./Base.ulam:3:7: Warning: Virtual overloaded function 'dfunc' has a NON-VIRTUAL ancestor in class: Base while compiling Sub1.
./Base.ulam:3:7: Warning: Virtual overloaded function 'dfunc' has a NON-VIRTUAL ancestor in class: Base while compiling E2.
./E2.ulam:3:9: Warning: Virtual overloaded function 'dfunc' Originating class is: Sub1 while compiling E2.
Exit status: 0
Uq_Base { <NOMAIN> }
Uq_Sub1 : Base { :Base<> <NOMAIN> }
Ue_E2 : Sub1 { :Sub1<> ^Base<> <NOMAIN> }
Ue_Test : System { Bool brtn[2](true,true);  :System<> Int test() {  E2 e2;  Sub1& s1ref = e2 cast;  Base& bref = e2 cast;  self brtn . 0 [] s1ref ( )dfunc . 12 cast == = self ( self brtn . 0 [] )assert . self brtn . 1 [] bref ( )dfunc . 10 cast == = self ( self brtn . 0 [] )assert . 0 cast return } }
Uq_System { <NOMAIN> }
##
## informed by t3602, vtable-example 11/19/15
##
#:Base.ulam
  ulam 2;
quark Base {
  Int dfunc() { return 10; } // not virtual
  Int afunc() { return 1; } // not virtual
  virtual Int afunc(Int a) { return 2; } // but overload of same name can be virtual
  virtual Int bfunc() { return 3; }
  Int vuser() {
    return afunc(0); // virtual function invocation: Might return 2, 7, or 9 in this example!
  }
}

#:Sub1.ulam
  ulam 2;
use Base;
quark Sub1 : Base {
  virtual Int dfunc() { return 11; }
  Int afunc() { return 4; } // not virtual
  virtual Int bfunc() { return super.bfunc() + 10; } // virtual override (was 5)
  virtual Int cfunc() { return 6; } // new func, originating here!
}

#:E2.ulam
  ulam 2;
use Sub1;
element E2 : Sub1 {
  virtual Int dfunc() { return 12; }
  virtual Int afunc(Int a) { return 9; }
  virtual Int cfunc() { return 10; }
}

#>Test.ulam
  ulam 2;
use Base;
use Sub1;
use E2;
use System;
element Test : System {
  Bool brtn[2];

  Int test() {

    E2 e2;

    Sub1& s1ref = e2;
    Base& bref = e2;

    brtn[0] = (s1ref.dfunc() == 12);
    assert(brtn[0]);

    brtn[1] = (bref.dfunc() == 10);
    assert(brtn[0]);

    return 0;
  }
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

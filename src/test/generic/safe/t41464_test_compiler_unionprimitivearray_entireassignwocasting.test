## -*- mode:ulam -*-
#=t41464_test_compiler_unionprimitivearray_entireassignwocasting
##
## gen output: (+ 5 asserts)
##   Unsigned Arg: 291
##   Unsigned Arg: 261
##   Unsigned Arg: 1
##   Unsigned Arg: 0
##   Unsigned Arg: 5
##
#!
Exit status: 0
Ue_A { Int test() {  System s;  QA qa2 = { .sarr2 = { 1 cast, 2 cast, 3 cast } };  s ( qa2 sa . cast )print . QA qa1 = { .sarr1 = { 4 cast, 5 cast } };  s ( qa1 sa . cast )print . qa2 sarr1 . qa1 sarr1 . = s ( qa2 sarr2 0 [] . cast )print . s ( qa2 sarr2 1 [] . cast )print . s ( qa2 sarr2 2 [] . cast )print . s ( qa2 sarr1 0 [] . qa1 sarr1 0 [] . == )assert . s ( qa2 sarr1 1 [] . qa1 sarr1 1 [] . == )assert . QA qa3 = { .sa = 291u };  s ( qa3 sarr2 0 [] . cast 1 cast == )assert . s ( qa3 sarr2 1 [] . cast 2 cast == )assert . s ( qa3 sarr2 2 [] . cast 3 cast == )assert . 0 cast return } }
Uq_System { <NOMAIN> }
Uq_QA { Unsigned(6) sarr1[2](0,0);  Unsigned(4) sarr2[3](0,0,0);  Unsigned(12) sa(0);  <NOMAIN> }
##
## informed by t41165 and Dave's union trick to get around casting arrays of different types;
##                       also initialized unions at declaration wo forloop. (see also t41466)
##
#>A.ulam
  ulam 4;
//use QA; //not required
element A {
 Int test() {
   System s;
   QA qa2 = { .sarr2 = {1, 2, 3} }; //unions initializable
   s.print(qa2.sa); //==291

   QA qa1 = { .sarr1 = { 4, 5} }; //unions initializable
   s.print(qa1.sa); //==261

   qa2.sarr1 = qa1.sarr1;  //the same size
   s.print(qa2.sarr2[0]);
   s.print(qa2.sarr2[1]);
   s.print(qa2.sarr2[2]);
   s.assert(qa2.sarr1[0] == qa1.sarr1[0]);
   s.assert(qa2.sarr1[1] == qa1.sarr1[1]);

   QA qa3 = { .sa = 291 };
   s.assert(qa3.sarr2[0] == 1);
   s.assert(qa3.sarr2[1] == 2);
   s.assert(qa3.sarr2[2] == 3);
   return 0;
 }
}

#:QA.ulam
  ulam 5;
union QA
{
  Unsigned(6) sarr1[2];
  Unsigned(4) sarr2[3];
  Unsigned(12) sa; //not necessary
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

## -*- mode:ulam -*-
#=t3336_test_compiler_elementwithclassparameters_conditionalas
##   gen code output (with assert):
##     Int Arg: 1
##
##  //Constants have explicit types
##
#!
Exit status: 1
Ue_Foo : Counter4(3) { System s();  Int e(1);  constant Int v = 3;  :Counter4(3)< constant Int x = 3;  Int(3) d(0); > Int test() {  Atom a;  Foo f;  a f cast = { a Counter4(3) as cond { Counter4(3)& a;  a ( )incr . self e . a ( )get . = self s . ( self e . )print . } if self e . 7 cast = else } self s . ( self e . 1 cast == )assert . self e . return } }
Uq_Counter4(Int x) { Int(UNKNOWN) d(notready);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
##      //informed by t3249_test_compiler_elementandquark_conditionalas
##      // enhanced test with Counter4 as a template instance, and a 'named constant', v;
##
#>Foo.ulam
  ulam 1;
use Counter4;
use System;
//element Foo : Counter4(Foo.v) {
//element Foo : Counter4(v) {
element Foo : Counter4(2+1) {
  System s;
  Int e;
  constant Int v = 3;
  Int test(){
    Atom a;
    Foo f;
    a = f;
    if(a as Counter4(v))
    {
      a.incr();
      e = a.get();
      s.print(e);
    }
    else
      e=7;
    s.assert(e==1);
    return e;
  }
}

#:Counter4.ulam
  ulam 1;
quark Counter4(Int x) {
  Int(x) d;
  Void incr(){
    d+=1;
  }
  Int get(){
    return d;
  }
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

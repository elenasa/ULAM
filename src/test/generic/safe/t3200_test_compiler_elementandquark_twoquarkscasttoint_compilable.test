## -*- mode:ulam -*-
#=t3200_test_compiler_elementandquark_twoquarkscasttoint_compilable
##      // changed to <<2 instead of *4u and got a different last answer (4 instead of 7)
##      //developed by Dave (10092014) in c++ and then converted to Ulam.
##      //Int(4) maxes out at 7, not 12.
##      //added prints
##      /* gen code output: (asserts interleaved)
##	 Unsigned Arg: 1
##	 Unsigned Arg: 2
##	 Unsigned Arg: 3
##	 Unsigned Arg: 0
##	 Int(4) Arg: 0x6
##	 Int(4) Arg: 0x7
##      */
##
##      //constant fold minus
#!
Exit status: 0
Ue_Foo { System s();  Bar bar1( Unsigned(3) x(1u);  Unsigned(3) y(2u);  Bool b(false); );  Bar bar2( Unsigned(3) x(3u);  Unsigned(3) y(0u);  Bool b(false); );  Int(4) i(6);  Int(4) j(7);  Int test() {  Int(2) d;  d 1 = self bar1 . x . d cast = self bar1 . y . 2u cast = self bar2 . x . 3u cast = self bar2 . y . 0u cast = self i . self bar1 . ( )toInt . cast = self j . self bar2 . ( )toInt . cast = self s . ( self bar1 . x . cast )print . self s . ( self bar1 . x . cast 1 cast == )assert . self s . ( self bar1 . y . cast )print . self s . ( self bar1 . y . cast 2 cast == )assert . self s . ( self bar2 . x . cast )print . self s . ( self bar2 . x . cast 3 cast == )assert . self s . ( self bar2 . y . cast )print . self s . ( self bar2 . y . cast 0 cast == )assert . self s . ( self bar1 . ( )toInt . )print . self s . ( 6 cast self bar1 . ( )toInt . == )assert . self s . ( self i . )print . self s . ( self i . 6 == )assert . self s . ( self bar2 . ( )toInt . )print . self s . ( 12 cast self bar2 . ( )toInt . == )assert . self s . ( self j . )print . self s . ( self j . 7 == )assert . 0 cast return } }
Uq_System { <NOMAIN> }
Uq_Bar { Bool b(false);  Unsigned(3) x(0);  Unsigned(3) y(0);  <NOMAIN> }
#>Foo.ulam
  ulam 1;
use System;
use Bar;
element Foo {
  System s;
  Bar bar1;
  Bar bar2;
  Int(4) i, j;
  Int test(){
    Int(2) d;
    d = 1;
    bar1.x = (Unsigned(3)) d;
    bar1.y = 2u;
    bar2.x = 3u;
    bar2.y = 0u;
    i = (Int(4)) bar1;
    j = (Int(4)) bar2;
    s.print(bar1.x); //1
    s.assert(bar1.x == 1);
    s.print(bar1.y); //2
    s.assert(bar1.y == 2);
    s.print(bar2.x); //3
    s.assert(bar2.x == 3);
    s.print(bar2.y); //0
    s.assert(bar2.y == 0);

    s.print(bar1);
    s.assert(6 == bar1); //class second to avoid operator== overload
    s.print(i); //6
    s.assert(i == 6);
    s.print(bar2);
    s.assert(12 == bar2);  //class second to avoid operator== overload
    s.print(j); //7
    s.assert(j == 7);
    return 0;
  }
}

##      // fixed a bug that didn't address different int bit sizes automatically during casting
##      // now that we believe toInt works, let's simplify Foo (remove the Int data member) for code gen testing
##
##      // use a variable for rhs of bar1; added system prints
##
##      //note: don't have <<2, so substituted *4; got it now! changes the answer too..
##      //note: don't have <<2, so substituted *4; use 3 bits so not to cross word boundary
##
#:Bar.ulam
  ulam 1;
quark Bar {
  Bool b;
  Unsigned(3) x, y;
  Int toInt(){
    return (Int) (x << 2) + y;
  }
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

## -*- mode:ulam -*-
#=t41319_test_compiler_multiinheritance_semanticsisas
##
## gen output (asserts if failed only)
## Int(3) Arg: 0x0
## Int(4) Arg: 0xc
## assert: arg is 1
## after assert's abort: arg is 1
## Int(3) Arg: 0x0
## Int(3) Arg: 0x0
## Int(3) Arg: 0x1
## Int(3) Arg: 0x1
## Int(3) Arg: 0x1
## assert: arg is 1
## after assert's abort: arg is 1
## Int(4) Arg: 0x4
## assert: arg is 1
## after assert's abort: arg is 1
## Int(3) Arg: 0x0
## Int(3) Arg: 0x0
## Int(3) Arg: 0x2
## Int(3) Arg: 0x2
## Int(3) Arg: 0x2
## assert: arg is 1
## after assert's abort: arg is 1
##
#!
Exit status: 0
Ue_R { Int test() {  System s;  Foo f;  f ( )behave . 0 cast return } }
Uq_System { <NOMAIN> }
Ue_Foo : Secondary +Intermediate { Bool(7) sp(false);  System s();  :Secondary< Bool m_b2(false); > +Intermediate< Int(4) m_i4(0);  Int(4) m_a4(0); > ^Base< Int(3) m_i3( 0); > <NOMAIN> }
Uq_Secondary : Base { Bool m_b2(false);  :Base< Int(3) m_i3( 0); > <NOMAIN> }
Uq_Intermediate : Base { Int(4) m_i4(0);  Int(4) m_a4(0);  :Base< Int(3) m_i3( 0); > <NOMAIN> }
Uq_Base { Int(3) m_i3( 0);  <NOMAIN> }
##
## informed by t41319, with multiple bases, and atomref copy (see t41457,8,9)
##
#>R.ulam
  ulam 3;
element R {
  Int test() {
    System s;
    Foo f;
    f.behave();
    return 0;
  }
}

#:Foo.ulam
  ulam 5;
element Foo : Secondary +Intermediate {
  Bool(7) sp;
  System s;
  Void behave()
  {
    Atom copy = self.atomof;
    Self & other = (Self&) copy;
    s.print(self.Intermediate.m_i3);

    if(!checkis(other)) //should absolute be true, right?
      s.assert(false);
    s.print(m_i4);
    s.assert(m_i4 == -4);
    s.print(self.Secondary.m_i3);
    s.print(self.Intermediate.m_i3);
    s.print(other.Secondary.m_i3); //changed!
    s.print(other.Intermediate.m_i3);
    s.print(other.m_i3); //default in Secondary
    s.assert(other.m_i3 == 1);

    if(!checkas(other)) //should absolute be true, right?
      s.assert(false);
    s.print(m_a4);
    s.assert(m_a4 == 4);
    s.print(self.Secondary.m_i3);
    s.print(self.Intermediate.m_i3);
    s.print(other.Secondary.m_i3);
    s.print(other.Intermediate.m_i3); //changed!!
    s.print(other.m_i3);
    s.assert(other.Intermediate.m_i3 == 2);
  }
}

#:Intermediate.ulam
  ulam 3;
quark Intermediate : Base
{
  Int(4) m_i4;
  Int(4) m_a4;
  virtual Bool checkis(Base& base) {
    if (base is Self) {
      m_i4 = -4;
      base.m_i3 = 1;
      return true;
    }
    return false;
  }

  virtual Bool checkas(Base& base) {
    if (base as Self) {
      m_a4 = 4;
      base.m_i3 = 2;
      return true;
    }
    return false;
  }
}

#:Secondary.ulam
  ulam 4;
quark Secondary : Base
{
  Bool m_b2;
}

#:Base.ulam
  ulam 3;
quark Base
{
  Int(3) m_i3 = 0;
  virtual Bool checkis(Base& base) { return false; }
  virtual Bool checkas(Base& base) { return false; }
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

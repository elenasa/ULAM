## -*- mode:ulam -*-
#=t41228_test_compiler_elementtemplatewithinheritedclassparameterquarktemplateandancestor
##
##  gen output: (+ interleaved asserts)
##   Int(4) : 2
##   Int(4) : 2
##   true
##
#!
Exit status: 2
Ue_T { Int(4) cpi(2);  Int(4) dmi(2);  Int test() {  System sys;  E(true) et;  self cpi . et 2 . = sys ( self cpi . )print . sys ( self cpi . 2 cast == )assert . self dmi . et i . = sys ( self dmi . )print . sys ( self dmi . 2 cast == )assert . sys ( et v . b . cast )print . sys ( et v . b . )assert . sys ( et b . )assert . et 2 . cast return } }
Uq_System { <NOMAIN> }
Ue_E(Bool p) : S(0x90,true) { /* empty class block */ }
Uq_S(Q(flag) v, Bool bp) : Q(flag) { constant Int(4) csi = v i .;  :Q11< Bool b(notready);  Int(4) i( 2); > <NOMAIN> }
Uq_Q(Bool flag) { Bool b(notready);  Int(4) i( 2);  <NOMAIN> }
##
##    //informed by t41226, except S has two class params, AND inheritance!
##
#>T.ulam
 ulam 3;
//use S; //NOT RELEVENT
element T{
  Int(4) cpi, dmi;

  Int test(){
    System sys;

    E(true) et;

    cpi = et.csi; //class parameter constant csi
    sys.print(cpi);
    sys.assert(cpi == 2);

    dmi = et.i; //data member i
    sys.print(dmi);
    sys.assert(dmi == 2); //default dm

    sys.print(et.v.b);
    sys.assert(et.v.b); //true
    sys.assert(et.b); //also true dm

    return et.csi; //7
  }
}

#:S.ulam
  ulam 3;
quark S(Q(bp) v, Bool bp) : Q(bp) {
  constant Int(4) csi = v.i;
}

#:Q.ulam
  ulam 1;
quark Q(Bool flag){
  Bool b = flag;
  Int(4) i = 2;
}


#:E.ulam
  ulam 3;
local constant Q(true) cqt = { };
element E(Bool p) : S(cqt, true) { }


#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

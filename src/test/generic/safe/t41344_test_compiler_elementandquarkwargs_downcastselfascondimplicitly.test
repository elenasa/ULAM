## -*- mode:ulam -*-
#=t41344_test_compiler_elementandquarkwargs_downcastselfascondimplicitly
##   gencode output (3 interleaved asserts):
##       assert: arg is 1
##       after asserts abort: arg is 1
##	 Unsigned Arg: 3
##       Unsigned Arg: 3
##       Unsigned Arg: 3
##
#!
Exit status: 7
Uq_Typo(Int a) : Bar { Bool typool(false);  :Bar< Unsigned(3) bu( 7u); > <NOMAIN> }
Ue_Eltypo : Typo(1) { System s();  Typo(1) t( constant Int a = 1;  Bool typool(false);  :Bar< Unsigned(3) bu(3u); >);  Unsigned(3) first(3u);  Unsigned(3) second(7u);  :Typo(1)< constant Int a = 1;  Bool typool(true);  :Bar< Unsigned(3) bu(7u); >> ^Bar< Unsigned(3) bu(7u); > Int test() {  self ( )functest . self s . ( self t . bu . cast )print . self s . ( self t . bu . cast 3 cast == )assert . self s . ( self first . cast )print . self s . ( self first . cast 3 cast == )assert . self second . self bu . = self second . cast return } }
Uq_Bar { Unsigned(3) bu( 7u);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
## "conditional downcast"
## informed by 3831, except implicit 'self' in as-block
##
#:Typo.ulam
  ulam 2;
use Eltypo;
quark Typo(Int a) : Bar{
  Bool typool;
  Void functest()
  {
    System s;
    if(self as Eltypo){
      super.typool = true; //super optional, found in Eltypo ancestor
      s.assert(typool);
      //requires self. o.w. t not defined!
      t.func(3u); //modifies ElTypo datamember 'bu' in Bar
      s.print(t.bu);
      s.assert(t.bu == 3);
      first = t.bu; //3u, from 7u
    }
    else
      s.assert(false);
  }
}

#:Bar.ulam
  ulam 2;
quark Bar
{
  Unsigned(3) bu = 7u;
  Void func(Unsigned u)
  {
    bu = (Unsigned(3)) u;
  }
}

#>Eltypo.ulam
  ulam 2;
use Typo;
use System;
element Eltypo : Typo(1) {
  System s;
  Unsigned(3) first;
  Unsigned(3) second;
  Typo(1) t;
  Int test(){
    functest();
    s.print(t.bu);
    s.assert(t.bu == 3);
    s.print(first);
    s.assert(first == 3);
    second = self.bu; //still 7
    return second;
  }
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

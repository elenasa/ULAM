## -*- mode:ulam -*-
#=t41143_test_compiler_elementandquark_castatomtoquark_issue
#!
Exit status: -11
Ue_A : QW { Bool c(false);  :QW< Int(3) m_i(3); > Int test() {  System s;  EventWindow ew;  Int rtn = 0 cast;  ew ( 1 cast )aref . self.atomof = { ew ( 1 cast )aref . QW is cond { QW q = ew ( 1 cast )aref . cast;  rtn q m_i . cast = } if } s ( rtn 3 cast == )assert . rtn return } }
Uq_QW { Int(3) m_i( 3);  <NOMAIN> }
Uq_System { <NOMAIN> }
Uq_EventWindow { <NOMAIN> }
##
## informed by t3733;
## Dave thinks quark ref requirement is unreasonable. Sun Oct 15 20:07:56 2017
## ulam changed to allow explicit casts to non-ref quark from atom/ref.
##
#>A.ulam
  ulam 3;
element A : QW {
  Bool c;
  Int test(){
    System s;
    EventWindow ew;
    Int rtn = 0;
    ew[1] = self.atomof;
    if(ew[1] is QW)
    {
      //note: it wouldn't have failed before if either: ew[1] was in a variable, or the cast was a quark ref.
      QW q = (QW) ew[1]; //WHY DOES THIS FAIL?
      rtn = q.m_i;
    }
    s.assert(rtn == 3);
    return rtn;
  }

  Atom& funcme(Atom& a)
  {
    return a;
  }

}

#:QW.ulam
  ulam 2;
quark QW{
  Int(3) m_i = 3;
}

#:EventWindow.ulam
  ulam 3;
quark EventWindow{
  Atom& aref(Int index) native;
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

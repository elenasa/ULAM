## -*- mode:ulam -*-
#=t3190_test_compiler_elementandquark_array2d_quarkcasttoint
##
## gen output: assert
#!
Exit status: 1
Ue_Foo { Unsigned(1) m_array[71](0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,1u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u);  Int test() {  System s;  C2D c;  c self ( 0 cast 0 cast )func . = self m_array . c ( )toInt . [] 1 cast = s ( self m_array . 40 [] cast )assert . self m_array . c ( )toInt . [] cast return } }
Uq_C2D { typedef Int(8) IE;  Int(8) m_width(0);  Int(8) m_height(0);  Int(8) m_x(0);  Int(8) m_y(0);  <NOMAIN> }
Uq_System { <NOMAIN> }
##./Foo.ulam:4:2: ERROR: Data member <m_array> of type: Unsigned(1)[71], total size: 71 MUST fit into 64 bits; Local variables do not have this restriction.
##./Foo.ulam:3:10: ERROR: 1 Nodes with erroneous types detected after type labeling class: Foo.
##Unrecoverable Program Type Label FAILURE.
##
##      // BitStorage eliminates limitation Wed May 11 10:53:51 2016
##      // data members must fit within 32- or 64-bits (BitField limit)
##
#>Foo.ulam
  ulam 1;
use C2D;
use System;
element Foo {
  Unsigned(1) m_array[71];
  C2D func(Int i, Int j) {
    C2D c;
    c.init();
    c.set(i,j);
    return c;
  }
  Int test() {
    System s;
    C2D c;
    c = func(0,0);
    m_array[c] = 1; //true
    s.assert(m_array[40]);
    return m_array[c];
  }
}

#:C2D.ulam
  ulam 1;
quark C2D {
  typedef Int(8) IE;
  IE m_width, m_height, m_x, m_y;
  Void init(Int x, Int y) {
    m_width = (IE) x;
    m_height = (IE) y;
  }
  Void init() {
    m_width = 9;
    m_height = 4;
    /* event window overload */ }
  Void set(Int a, Int b) {
    m_x = (IE) a;
    m_y = (IE) b;
  }
  Int toInt(){
    return ((m_height-m_y) * m_width + (m_height-m_x));
  }
}
##
##      // alternative: use as a local data member instead
##      //bool rtn1 = fms->add("Foo.ulam","ulam 1;\n use C2D;\n element Foo {\nC2D func(Int i, Int j) {\n C2D c;\n c.init();\n c.set(i,j);\n return c;\n }\n Int test() {\n Int(1) m_array[71];\n C2D c;\n c = func(0,0);\n m_array[c] = true;\n return m_array[c];\n }\n }\n");
##

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}

#.

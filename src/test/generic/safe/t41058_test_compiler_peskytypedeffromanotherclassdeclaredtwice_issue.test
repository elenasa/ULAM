## -*- mode:ulam -*-
#=t41058_test_compiler_peskytypedeffromanotherclassdeclaredtwice_issue
#!
Exit status: 7
Ue_R { Int test() {  typedef Unsigned(3) Dir;  Content content;  content ( 1u cast 3u cast 7u cast )setDir . content m_cmdPrio . mVal . cast return } }
Uq_TestEventWindow { typedef Unsigned(3) Dir;  <NOMAIN> }
Ue_Content : QContent { constant Unsigned cCMD_BITS = 7u;  typedef UMod(7u) CommandSpinner;  typedef Unsigned(3) Dir;  Unsigned(3) m_moveDir(0);  typedef Unsigned(3) Velocity;  Unsigned(3) m_moveVelocity(0);  UMod(7u) m_cmdPrio( typedef Unsigned(3) Dir;  typedef Unsigned(7) Value;  constant Unsigned(7) cVALUE_MIDPOINT = 63u;  Unsigned(7) mVal(0); );  typedef Unsigned(3) Dir;  :QContent<> <NOMAIN> }
Uq_QContent { /* empty class block */ }
Uq_UMod(Unsigned bits) { typedef holder Dir;  typedef Unsigned(UNKNOWN) Value;  constant Unsigned(UNKNOWN) cVALUE_MIDPOINT = unresolved maxof . unresolved minof . -b 2 / cast;  Unsigned(UNKNOWN) mVal(notready);  <NOMAIN> }
##
## informed by Dave ish 03262017: pesky 'type already seen as undefined class' type problems, t41056 and t41009
##   COMBINATION OF CIRCUMSTANCES: the use of Dir.maxof while Dir is a plain holder type (in R.ulam), causes it to become a holder class.
##   then the second typedef in Content triggered the bug in NodeIdent::installSymbolTypedef:
##   since m_token id is in current scope, an unseen class holder, makeUlamTypeFromHolder alone is insufficient to "fix" it
##   because it does not make the SymbolClassName that goes along with its replacement (also another holder class). So,
##   when TEventWindow wants to correct the class holder into Unsigned type, and remove the class holder, its SymbolClassName is no where to be found.
##
## culamtest: CompilerState.cpp:277: MFM::u16 MFM::CompilerState::makeUlamTypeFromHolder(MFM::UlamKeyTypeSignature, MFM::UlamKeyTypeSignature, MFM::ULAMTYPE, MFM::u16, MFM::ULAMCLASSTYPE): Assertion "isGone" failed.
##
##
#>R.ulam
  ulam 3;
element R {
  Int test(){
  typedef TestEventWindow.Dir Dir;
    Content content;
    //    content.setDir(1u, 3u, 7u);
    content.setDir(1u, 3u, Dir.maxof); //now it thinks Dir is a class! The DOT did it ".")
    return (Int) content.m_cmdPrio.mVal;
  }
}


#:Content.ulam
  ulam 3;
element Content : QContent
{
  constant Unsigned cCMD_BITS = 7u;     // Allow ~64 cmds in flight before ambiguity
  typedef UMod(cCMD_BITS) CommandSpinner;

  typedef TestEventWindow.Dir Dir;
  Dir m_moveDir;               // Direction to prefer if m_moveTimer active

  typedef Unsigned(3) Velocity;
  Velocity m_moveVelocity;     // How hard to prefer moveDir if moveTimer active

  CommandSpinner m_cmdPrio;

  typedef TestEventWindow.Dir Dir; //PLUS the 2nd Time!!
  Void setDir(Dir dir, Velocity vel, CommandSpinner.Value prio) {
    m_moveDir = dir;
    m_moveVelocity = vel;
    m_cmdPrio.set(prio);
    //m_moveTimer.reset();
  }
}

#:QContent.ulam
  ulam 1;
quark QContent {
}

#:UMod.ulam
  ulam 2;
quark UMod(Unsigned bits) {
  typedef TestEventWindow.Dir Dir;

  typedef Unsigned(bits) Value;
  constant Value cVALUE_MIDPOINT = (Value) ((Value.maxof - Value.minof) / 2);
  Value mVal;

  Void set(Value val)
  {
    mVal = val;
  }
}

#:TestEventWindow.ulam
  ulam 2;
quark TestEventWindow {
  typedef Unsigned(3) Dir;
}

#.

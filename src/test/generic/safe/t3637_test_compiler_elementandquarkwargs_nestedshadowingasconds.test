## -*- mode:ulam -*-
#=t3637_test_compiler_elementandquarkwargs_nestedshadowingasconds
##
##   gencode output (+asserts):
##	 Unsigned Arg: 3
##       Unsigned Arg: 3
##       Unsigned Arg: 3
##
##        unevaluable without assuming atoms as elements
##        second fails eval
##
#!
Exit status: 3
Uq_Typo(Int a) : Bar { /* empty class block */ }
Uq_Bar { Unsigned(3) bu( 7u);  <NOMAIN> }
Ue_Eltypo : Typo(1) { System s();  Unsigned(3) first(3u);  Unsigned(3) second(3u);  Typo(1) t( constant Int a = 1;  :Bar< Unsigned(3) bu(7u); >);  :Typo(1)< constant Int a = 1;  :Bar< Unsigned(3) bu(7u); >> ^Bar< Unsigned(3) bu(7u); > Int test() {  Eltypo elf;  Atom a = elf cast;  { a Eltypo as cond { Eltypo& a;  { a Bar as cond { Bar& a;  a ( 3u cast )func . self s . ( a bu . cast )print . self s . ( a bu . cast 3 cast == )assert . self first . a bu . = } if self s . ( false )assert . else } self s . ( a bu . cast )print . self s . ( a bu . cast 3 cast == )assert . self s . ( self first . cast )print . self s . ( self first . cast 3 cast == )assert . self second . a bu . = } if } self second . cast return } }
Uq_System { <NOMAIN> }
##
## informed by 3589, 3636
##
#:Typo.ulam
  ulam 1;
use Bar;
quark Typo(Int a) : Bar{
}

#:Bar.ulam
  ulam 1;
quark Bar
{
  Unsigned(3) bu = 7u;
  Void func(Unsigned u)
  {
    bu = (Unsigned(3)) u;
  }
}

#>Eltypo.ulam
  ulam 1;
use Typo;
use System;
element Eltypo : Typo(1) {
  System s;
  Unsigned(3) first;
  Unsigned(3) second;
  Typo(1) t;
  Int test(){
    Eltypo elf;
    Atom a = elf;
    if(a as Eltypo)
    {
      if(a as Bar){
	a.func(3u);
	s.print(a.bu);
	s.assert(a.bu == 3);
	first = a.bu; //3u, from 7u
      }
      else
	s.assert(false);

      s.print(a.bu);
      s.assert(a.bu == 3);
      s.print(first);
      s.assert(first == 3);
      second = a.bu; //3u, from 7u, fails eval!
    }
    return second;
  }
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

## -*- mode:ulam -*-
#=t3249_test_compiler_elementandquark_conditionalas
##
## unevaluable without assuming atoms as elements
#!
Exit status: 1
Ue_Foo : Counter4 { Bool(3) bi(true);  Bool(3) bh(true);  Int e(1);  :Counter4< Int d(0); > Int test() {  Foo f;  Atom a = f cast;  { a Foo as cond { Foo& a;  a bi . true cast = self bi . true cast = } if } { f Counter4 as cond { Counter4& f;  self bh . true cast = f ( )incr . self e . f ( )get . = } if } self e . return } }
Uq_Counter4 { Int d(0);  <NOMAIN> }
#>Foo.ulam
  ulam 2;
use Counter4;
element Foo : Counter4 {
  Bool(3) bi, bh;
  Int e;
  Int test(){
    Foo f;
    Atom a = f; //easy
    if(a as Foo)
    {
      a.bi = true;
      bi = true;
    }

    if(f as Counter4){
      bh = true;
      f.incr();
      e=f.get();
    }
    return e;
  }
}

##    //no else case:
##      //bool rtn1 = fms->add("Foo.ulam","use Counter4;\nelement Foo {\nBool sp;\n Bool(3) bi, bh;\n Counter4 m_c4;\n Int e;\n Int test(){\n Atom a;\n Foo f;\n Bool b;\n a = f; //easy\n if(a as Counter4){\n bi = true;\n a.incr();\n e=a.get();\n }\nreturn e;\n}\n }\n");
##
##      //single statement case:
##      //bool rtn1 = fms->add("Foo.ulam","use Counter4;\nelement Foo {\nBool sp;\n Bool(3) bi, bh;\n Counter4 m_c4;\n Int e;\n Int test(){\n Atom a;\n Foo f;\n Bool b;\n a = f; //easy\n if(a as Counter4)\na.incr();\nreturn e;\n}\n }\n");
##
#:Counter4.ulam
  ulam 2;
quark Counter4 {
  Int d;
  Void incr(){
    d+=1;
  }
  Int get(){
    return d;
  }
}
#.

## -*- mode:ulam -*-
#=t3877_test_compiler_shiftequals_unaryarrayindex
##
##     gen code output: (interleaved asserts)
##	 Unsigned Arg: 2
##       Int Arg: 4
##	 Unsigned Arg: 4
##       Int Arg: 2
##	 Unsigned Arg: 8
##       Int Arg: 1
##	 Unsigned Arg: 16
##       Int Arg: 0
##
#!
Exit status: 16
Ue_A { Bool(7) b(true);  System s();  Unsigned d(16u);  Int test() {  typedef Bits BA[4];  Int a = 8 cast;  { a 0 cast != cond { Bits dits[4];  Unary(3) i = 0 cast;  dits 1 [] self d . cast = dits i 1 cast += cast [] 1 cast <<= self d . dits i cast [] cast = self s . ( self d . )print . self s . ( i cast 1 cast == )assert . dits 2 [] a cast = dits i 1 cast += cast [] 1 cast >>= a dits i cast [] cast = self s . ( a )print . self s . ( i cast 2 == )assert . } _1: while } self b . 1 cast self d . << cast a > cast = self d . cast return } }
Uq_System { <NOMAIN> }
##
## informed by t3246, except with shift equals. Exposed issue with unary index greater than 2 (see t3591)
##
#>A.ulam
  ulam 3;
use System;
element A {
  System s;
  Bool(7) b;
  Unsigned d = 1;
  Int test(){
    typedef Bits BA[4];
    Int a = 8;
    while(a!=0)
    {
      BA dits;
      Unary(3) i = 0;
      dits[1] = d;
      dits[++i] <<= 1; //evaluation lhs only once
      d = (Unsigned) dits[i];
      s.print(d);
      s.assert(i==1);

      dits[2] = a;
      dits[++i] >>= 1; //evaluation lhs only once
      a = (Int) dits[i];
      s.print(a);
      s.assert(i == 2);
    }

    b = (Int) (1 << d) > a;
    return (Int) d;
  }
 }

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

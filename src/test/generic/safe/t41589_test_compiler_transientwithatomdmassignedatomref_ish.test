## -*- mode:ulam -*-
#=t41589_test_compiler_transientwithatomdmassignedatomref_ish
##      gen code output: (2 asserts)
##
#!
Exit status: -11
Ue_R { Bool b(false);  Bool c(false);  Int test() {  System s;  Too too;  too ( )initToo . Atom a1 = too mAtoo .;  self b . a1 Foo is = s ( self b . )assert . self c . too mAtoo2 . Foo is = s ( self c . )assert . 0 cast return } }
Uq_System { <NOMAIN> }
Un_Too { Atom mAtoo(Atom);  Atom mAtoo2(Atom);  <NOMAIN> }
Ue_Foo { Bool(7) sp( true);  <NOMAIN> }
Uq_EventWindow { <NOMAIN> }
##
## informed by Spencer Harmon ish 1/19/2022 and t3833, gencode fails when atom dm assigned ew[0],
##   but not when assigned an atomref (or atom);
##
#>R.ulam
  ulam 2;
use System;
element R {
  Bool b, c;

  Int test(){
    System s;
    Too too;
    too.initToo();
    Atom a1 = too.mAtoo;
    b = a1 is Foo;
    s.assert(b);
    c = too.mAtoo2 is Foo;
    s.assert(c);
    return 0;
  }
}

#:Too.ulam
  ulam 2;
transient Too {
  Atom mAtoo;
  Atom mAtoo2;
  Void initToo()
  {
    EventWindow ew;
    ew[0] = Foo.instanceof;
    Atom & aref = ew[0];
    mAtoo = aref; //okay
    mAtoo2 = ew[0]; //FAILED
  }
}

#:Foo.ulam
  ulam 2;
element Foo {
  Bool(7) sp = true;
}

#:EventWindow.ulam
  ulam 3;
quark EventWindow{
  Atom& aref(Int index) native;
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

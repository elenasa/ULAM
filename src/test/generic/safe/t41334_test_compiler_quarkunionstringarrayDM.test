## -*- mode:ulam -*-
#=t41334_test_compiler_quarkunionstringarrayDM
##
## gen output: (+ 1 assert)
##   String(1) Arg: "once upon a time"
##   Unsigned Arg: 16
##
#!
Exit status: 16
Ue_Test { Unsigned m_len(16u);  Int test() {  SystemU3 s;  QU qus;  qus m_array 0 [] . "once upon a time" = s ( qus m_array 0 [] . )print . self m_len . 16u = s ( self m_len . )print . s ( self m_len . 16u cast == )assert . self m_len . cast return } }
Uq_SystemU3 : System { :System<> <NOMAIN> }
Uq_QU +System { Bool n(false);  Int(3) i(0);  Bits(5) t(0);  String m_array[1](UNINITIALIZED_STRING);  +System<> <NOMAIN> }
Uq_System { <NOMAIN> }
##
## Quark-unions can now have String data members, and t.f. a String array (see t41093).
##
#>Test.ulam
  ulam 4;
element Test {
  Unsigned m_len = 0;
  Int test(){
    SystemU3 s;
    QU qus; //as local var
    qus.m_array[0] = "once upon a time";
    s.print(qus.m_array[0]);
    m_len = qus.m_array[0].lengthof;
    s.print(m_len);
    s.assert(m_len==16u);
    return (Int) m_len;
  }
}

#:QU.ulam
  ulam 5;
use System; //avoids more errors about missing System class after error.
union QU + System {
  Bool n;
  Int(3) i;
  Bits(5) t;
  String m_array[1];
}

#:SystemU3.ulam
  ulam 3;
quark SystemU3 : System {
  Void print(String s) native;
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

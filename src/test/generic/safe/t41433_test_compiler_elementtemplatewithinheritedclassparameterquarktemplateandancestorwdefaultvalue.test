## -*- mode:ulam -*-
#=t41433_test_compiler_elementtemplatewithinheritedclassparameterquarktemplateandancestorwdefaultvalue
##
## gen output:
##  Unsigned Arg: 3 (+ 3 asserts)
##  Unsigned Arg: 4 (+ 1 assert)
##  Unsigned Arg: 2 (+ 1 assert)
##  Unsigned Arg: 4 (+ 1 assert)
##  Unsigned Arg: 5 (+ 1 assert)
##
#!
Exit status: 0
Ue_R { constant Unsigned cTip = 1u;  Int test() {  System s;  Pop(0xfeed,7u,3,1u) pop;  Unsigned ans = pop ( )behaving .;  s ( ans )print . s ( ans 3u cast == )assert . s ( pop ( )samely . )assert . s ( pop ( )badly . ! )assert . Crackle(0xf00d,2u) crackle;  Unsigned ans2 = crackle ( )behaving .;  s ( ans2 )print . s ( ans2 4u cast == )assert . s ( 2u )print . s ( true )assert . Crackle(0xbead,5u) snap;  Unsigned ans3 = snap ( )behaving .;  s ( ans3 )print . s ( ans3 4u cast == )assert . s ( 5u )print . s ( true )assert . 0 cast return } }
Uq_System { <NOMAIN> }
Uq_Pop(Bits speciesID, Unsigned(5) mytag, Unary(5) myProgress, Unsigned triggerlevel) { typedef Foo(x,y,false) MyFoo;  Foo(x,y,false) mFoo(notready);  <NOMAIN> }
Un_Crackle(Bits specId, Unsigned trig = NONREADYCONST) : Pop(speciesID,3u,4,triggerlevel) { constant Unsigned cTrigger = trig;  Bits mId(notready);  typedef Unary(UNKNOWN) Zary;  Unary(UNKNOWN) mzary(notready);  :Pop14< typedef Foo(x,y,false) MyFoo;  Foo(x,y,false) mFoo(notready); > <NOMAIN> }
Uq_Zar(Unary(5) x, Unsigned(4) y, Bool z) { typedef Unary(UNKNOWN) Zary;  <NOMAIN> }
Uq_Foo(Unary(5) x, Unsigned(4) y, Bool z) : Zar(x,y,z) { Zar(x,y,true) mZar(notready);  :Zar13< typedef Unary(UNKNOWN) Zary; > <NOMAIN> }
##
## see t41431,2 cannot use constant as default that is set to a local constant, why?? BUG. Fixed.
##       Except when its template params are not dependent (e.g. R's use of cTip).
##    But what about a typedef that never resolves??? Not here. (see t41446 for simplified version)
##
#>R.ulam
  ulam 5;
local constant Unsigned clip = 1;
element R {
  constant Unsigned cTip = clip;

  Int test()
  {
    System s;

    Pop(0xfeed, 7, 3, clip) pop;

    Unsigned ans = pop.behaving();
    s.print(ans);
    s.assert(ans==3u);
    s.assert(pop.samely());
    s.assert(!pop.badly());

    Crackle(0xf00d) crackle;
    Unsigned ans2 = crackle.behaving();
    s.print(ans2);
    s.assert(ans2==4u);
    s.print(crackle.mzary.sizeof);
    s.assert(crackle.mzary.sizeof == 2u);

    //override default value of class arg
    Crackle(0xbead,4+cTip) snap;
    Unsigned ans3 = snap.behaving();
    s.print(ans3);
    s.assert(ans3==4u);

    s.print(snap.mzary.sizeof);
    s.assert(snap.mzary.sizeof == 5u);

    return 0;
  }
}

#:Crackle.ulam
  ulam 5;
//use Zar; //works when SEEN ahead..
local constant Unsigned(5) cTag = 3;
local constant Unary(5) cProg = 4;
local constant Unsigned cLevel = 2;
transient Crackle(Bits specId, Unsigned trig = cLevel) : Pop(specId,cTag,cProg,trig)
{
  constant Unsigned cTrigger = trig; //can't use as default value!!
  Bits mId = specId;
  typedef Zar(cProg,trig,specId==0x0).Zary Zary;
  Zary mzary;
}

#:Pop.ulam
  ulam 5;
quark Pop(Bits speciesID, Unsigned(5) mytag, Unary(5) myProgress, Unsigned triggerlevel) {
  typedef Foo(myProgress,mytag,false) MyFoo; //typedef
  MyFoo mFoo; //dm

  Unsigned behaving() {
    return mFoo.func();
  }

  Bool samely() {
    Foo(myProgress,mytag,false) foo; //local
    return mFoo.func() == foo.func();
  }

  Bool badly() {
    MyFoo foo;
    return foo.z == mFoo.mZar.z;
  }

}

#:Foo.ulam
  ulam 5;
local constant Bool cTrue = true;
quark Foo(Unary(5) x, Unsigned(4) y, Bool z) : Zar(x, y, z) {
  Zar(x,y,cTrue) mZar;
}

#:Zar.ulam
  ulam 5;
quark Zar(Unary(5) x, Unsigned(4) y, Bool z) { //same param names not the problem!
  Unsigned func() { return x; }
  typedef Unary(y) Zary;

}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

## -*- mode:ulam -*-
#=t41262_test_compiler_constantclassarray_noinit
##
## gen output: 2 asserts
##
#!
Exit status: 3
Ue_KeyExprRep { KeyExprNode m_key( Unsigned(8) m_rightIndex(4u);  Unsigned(8) m_leftIndex(3u);  typedef Unsigned(8) Byte;  Unsigned(8) m_keyCode(0u);  Unsigned(8) m_op(38u); );  Int test() {  System s;  self m_key . keyexpr_x13 1 [] = s ( self m_key . m_rightIndex . 4u cast == )assert . s ( keyexpr_x13 1 [] m_rightIndex . 4u cast == )assert . self m_key . m_leftIndex . cast return } }
Uq_KeyExprNode { typedef Unsigned(8) Byte;  Unsigned(8) m_leftIndex( 3u);  Unsigned(8) m_rightIndex( 4u);  Unsigned(8) m_keyCode(0);  Unsigned(8) m_op( 38u);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
## informed by Dave 3/18/18 ish and t41261: except constant class array is not initialized beyond default value.
##
#>KeyExprRep.ulam
  ulam 3;
//use KeyExprNode; work with and wo use
local constant KeyExprNode keyexpr_x13[5] = { };
element KeyExprRep {
  KeyExprNode m_key;
  Int test() {
    System s;
    m_key = keyexpr_x13[1]; //displayed in eval output
    s.assert(m_key.m_rightIndex==4u);

    s.assert(keyexpr_x13[1].m_rightIndex==4u); //reads constant class array item
    return m_key.m_leftIndex; //3u
  }
}

#:KeyExprNode.ulam
  ulam 3;
quark KeyExprNode {
  typedef Unsigned(8) Byte;
  Byte m_leftIndex = 3u;  // for [,|&~]
  Byte m_rightIndex = 4u; // for [,|&]
  Byte m_keyCode;    // [a-zA-Z.@_?] or 0
  Byte m_op = '&';         // [,|&~] or 0
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

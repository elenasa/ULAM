## -*- mode:ulam -*-
#=t3188_test_compiler_elementandquark_memberselectedfunc
##      //note: 148 decimal == 0x94 hex
##      /* gen code output:
##	 Int Arg: 40
##       */
#!
Exit status: 40
Ue_Foo { System s();  Bool(7) m_b(false);  Int m_idx(40);  C2D m_coord( Int(6) m_width(9);  Int(6) m_height(4); );  Int test() {  self m_coord . self ( 9 cast 4 cast )func . = self m_idx . self m_coord . ( 0 cast 0 cast )getIndex . = self s . ( self m_idx . )print . self m_idx . return } }
Uq_System { <NOMAIN> }
Uq_C2D { Int(6) m_width(0);  Int(6) m_height(0);  <NOMAIN> }
#>Foo.ulam
  ulam 1;
use System;
use C2D;
element Foo {
  System s;
  Bool(7) m_b;
  Int m_idx;
  C2D m_coord;
  C2D func(Int i, Int j) {
    C2D c;
    c.init(i,j);
    return c;
  }
  Int test() {
    m_coord = func(9,4);
    m_idx = m_coord.getIndex(0,0);
    s.print(m_idx);
    return m_idx;
  }
}
##
##      // increase bitsize of width and height to accomodate 9.
#:C2D.ulam
  ulam 1;
quark C2D {
  Int(6) m_width;
  Int(6) m_height;
  Void init(Int x, Int y) {
    m_width = (Int(6)) x;
    m_height = (Int(6)) y;
    return;
  }
  Void init() {
    m_width = 9;
    m_height = 4;
    return;
    /* event window overload */ }
  Int getIndex(Int a, Int b){
    return ((m_height-b) * m_width + (m_height-a));
  }
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

## -*- mode:ulam -*-
#=t3948_test_compiler_caarrayofregulararrayofstrings3D
##
## gen output: (2 asserts);
## Unsigned Arg: 120
##
## custom arrays are unevaluable
#!
Exit status: -11
Ue_Eltypo { typedef String IArr[3];  Unsigned(8) m_i(0u);  Unsigned(8) m_j(0u);  Int test() {  System s;  TEventWindows tvt;  String& ia[3] = tvt ( 2 cast )aref .;  String i = ia 1 [];  self m_i . i 2 [] = self m_j . tvt ( 2 cast )aref . 1 [] 2 [] = s ( self m_i . cast )print . s ( self m_j . 120u == )assert . s ( self m_j . self m_i . == )assert . 0 cast return } }
Uq_System { <NOMAIN> }
Un_TEventWindows { TWindow m_TW( typedef String IArr[3];  String m_arr0[3]( { "zero", "zero", "zero" });  String m_arr1[3]( { "one", "two", "three" });  String m_arr2[3]( { "two", "four", "six" });  String m_arr3[3]( { "three", "six", "nine" }); );  typedef String IArr[3];  <NOMAIN> }
Un_TWindow { typedef String IArr[3];  String m_arr0[3]( { "zero", "zero", "zero" });  String m_arr1[3]( { "one", "two", "three" });  String m_arr2[3]( { "two", "four", "six" });  String m_arr3[3]( { "three", "six", "nine" });  <NOMAIN> }
##
## To answer question posed by Dave 11/22/2016, 2d-custom array of regular array of String?
##
#>Eltypo.ulam
  ulam 3;
element Eltypo {
  typedef String IArr[3];
  ASCII m_i, m_j;
  Int test(){
    System s;
    TEventWindows tvt;
    IArr& ia = tvt[2]; //three six nine
    String i = ia[1]; //six
    m_i = i[2]; //x
    m_j = tvt[2][1][2]; //x
    s.print((Unsigned)m_i);
    s.assert(m_j == 'x'); //120 ascii
    s.assert(m_j == m_i);
    return 0;
  }
}

#:TEventWindows.ulam
  ulam 3;
transient TEventWindows {
  TWindow m_TW;
  typedef String IArr[3];
  IArr& aref(Int index) {
    return m_TW[index];
  }
}

#:TWindow.ulam
  ulam 3;
transient TWindow {
  typedef String IArr[3];
  IArr m_arr0 = { "zero", "zero", "zero" };
  IArr m_arr1 = { "one", "two", "three" };
  IArr m_arr2 = { "two", "four", "six" };
  IArr m_arr3 = { "three", "six", "nine" };
  IArr& aref(Int index) {
    if(index == 0)
      return m_arr1;
    else if(index == 1)
      return m_arr2;
    else if(index == 2)
      return m_arr3;
    return m_arr0;
  }
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

## -*- mode:ulam -*-
#=t3208_test_compiler_elementandquark_accessaquarkinsideaquark
##      //changed *'s to << and Int(3) to Int(4) to get rid of warningsl last output changed from 4 to 8 (now j = 6!).
##      /* generated code output:
##	 Int(4) Arg: 0x2
##	 Int Arg: -2
##	 Int(4) Arg: 0x6
##      */
##      //constant fold minus
#!
Exit status: 0
Ue_Foo { Bool b(false);  System m_s();  Int(4) i(0);  Int(4) j(6);  Bar m_bar( Bool b(false);  System m_s();  Unsigned(4) x(0u);  Unsigned(4) y(0u);  Gah m_gah( Bool b(false);  System m_s();  Int(4) a(2);  Int(4) d(-2); ); );  Int test() {  self m_bar . m_gah . ( 2 cast -2 cast )set . self j . self m_bar . m_gah . ( )toInt . cast = self m_s . ( self j . )print . 0 cast return } }
Uq_Bar { System m_s();  Bool b(false);  Unsigned(4) x(0);  Unsigned(4) y(0);  Gah m_gah( System m_s();  Bool b(false);  Int(4) a(0);  Int(4) d(0); );  <NOMAIN> }
Uq_System { <NOMAIN> }
Uq_Gah { System m_s();  Bool b(false);  Int(4) a(0);  Int(4) d(0);  <NOMAIN> }
#>Foo.ulam
  ulam 1;
use Bar;
use Gah;
use System;
element Foo {
  System m_s;
  Bool b;
  Int(4) i, j;
  Bar m_bar;
  Int test(){
    m_bar.m_gah.set(2,-2);
    j = (Int(4)) m_bar.m_gah;
    m_s.print(j);
    return 0;
  }
}

##      //explicit casting required with shift.
#:Bar.ulam
  ulam 1;
use System;
use Gah;
quark Bar{
  System m_s;
  Bool b;
  Unsigned(4) x, y;
  Gah m_gah;
  Int toInt(){
    if(b)
      return (Int) (x << 2) / y;
    return 0;
  }

  Void set(Int xarg, Int yarg){
    x=(Unsigned(4)) xarg;
    y=(Unsigned(4)) yarg;
    m_s.print(x);
    m_s.print(y);

    if(yarg!=0)
      b=true;
    else
      b=false;
  }
}
##      //explicit casting required with shift, and bitwise |.
##      //doens't catch shifting in negative direction when variable (d) is used. cast rhs of shift to Unsigned (-2 becomes 0) so no shift, returns 6; (also, poor design; better to use Unsigned for d -- see below)
#:Gah.ulam
  ulam 1;
use System;
quark Gah{
  System m_s;
  Bool b;
  Int(4) a, d;
  Int toInt(){
    if((a | 1) !=0)
      return (Int) ((a + 4) << (Unsigned) d);
    return a;
  }
  Void set(Int xarg, Int yarg){
    a= (Int(4)) xarg;
    d= (Int(4)) yarg;
    m_s.print(a);
    m_s.print((Int) d);
  }
}

##     // test system quark with native overloaded print funcs; assert
#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

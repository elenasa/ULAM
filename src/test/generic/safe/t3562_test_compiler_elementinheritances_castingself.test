## -*- mode:ulam -*-
#=t3562_test_compiler_elementinheritances_castingself
## gencode output (asserts interleaved):
##Unsigned Arg: 3
##Unsigned Arg: 3
##Unsigned Arg: 7
##
#!
Exit status: 10
Ue_Foo : Soo { Bool(7) sp(false);  Int a(73);  :Soo< Unsigned(3) sus(4u);  :Coo< Unsigned(3) us(3u);  Bool(3) cb(true); >> ^Coo< Unsigned(3) us(3u);  Bool(3) cb(true); > Int test() {  System s;  self ( 3u cast )setus . Coo cc = self cast;  s ( cc us . cast )print . s ( cc us . cast 3 cast == )assert . cc ( 7u )setus . { cc cb . cond { s ( self us . cast )print . s ( self us . cast 3 cast == )assert . s ( cc us . cast )print . s ( cc us . cast 7 == )assert . self us . cast cc us . cast +b cast return } if } 0 cast return } }
Uq_System { <NOMAIN> }
Uq_Soo : Coo { Unsigned(3) sus( 4u);  :Coo< Unsigned(3) us( 2u);  Bool(3) cb( true); > <NOMAIN> }
Uq_Coo { Unsigned(3) us( 2u);  Bool(3) cb( true);  <NOMAIN> }
##
## chained class inheritance, regular (non-template), with casting self
## informed by t3559, t3229; safe cast function matching (see t41302 for exact match version)
##
#>Foo.ulam
  ulam 2;
use System;
use Soo;
element Foo : Soo {
  Bool(7) sp;
  Int a = 73;
  Void setus(Unsigned(3) x)
  {
    us = x;
  }

  Int test() {
    System s;
    setus(3u);
    Coo cc = (Coo) self; //also works
    s.print(cc.us); //not default 2u
    s.assert(cc.us == 3);

    cc.setus(7u);
    if(cc.cb)
      {
	s.print(us); //3u
	s.assert(us == 3);
	s.print(cc.us); //7u
	s.assert(cc.us == 7);
	return us + cc.us; //exit status 10
      }
    return 0;
  }
}

#:Soo.ulam
  ulam 2;
use Coo;
quark Soo : Coo {
  Unsigned(3) sus = 4u;
  Void setus(Unsigned(3) x)
  {
    sus = x;
  }
}

#:Coo.ulam
  ulam 2;
quark Coo {
  Unsigned(3) us = 2u;
  Bool(3) cb = true;
  Void setus(Unsigned(3) x)
  {
    us = x;
  }
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

## -*- mode:ulam -*-
#=t41581_test_compiler_controlswitchwithreturns_funcwargrefmissingreturn_gencode_ish
##
##  gen output: (+ interleaved asserts)
##    Int Arg: 1
##    Int Arg: 1
##
#!
Exit status: 1
Ue_A { System s();  Int a(1);  Int b(1);  Int test() {  self a . 2 cast = self b . 0 cast = self b . self ( self a . cast )func . = self s . ( self b . )print . self s . ( self b . 1 cast == )assert . self s . ( self a . )print . self s . ( self a . 1 cast == )assert . self a . return } }
Uq_System { <NOMAIN> }
##
## informed by ish 20210906 - should ulam know 'otherwise' is last statement in func?
##  gcc knows with switches, and if/elses, but not with ulam switch gencode.
## gcc: include/Ue_102641A10.tcc:150:3: warning: control reaches end of non-void function
##
## Now, without the last label, and the last if(true) for default case, ulam gencode passes gcc muster.
##  same as t41580 except here, func takes a ref arg, (see also t41472, and t41022)
##
#>A.ulam
  ulam 3;
element A {
  System s;
  Int a, b;
  Int test() {
    a = 2;
    b = 0;
    b = func(a);
    s.print(b);
    s.assert(b == 1);
    s.print(a);
    s.assert(a == 1); //func take arg ref
    return a;
  }

  Int func(Int& arg)
  {
    which((--arg))
    {
      case -1:
	{
	  return 3;
	}
      case 0:
	{
	  return 2;
	}
      otherwise:
	{
	  return 1;
	}
    }
    //missing return that ulam doesn't catch
  } //end of func

}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

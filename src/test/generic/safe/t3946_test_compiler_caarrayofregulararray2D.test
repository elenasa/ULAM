## -*- mode:ulam -*-
#=t3946_test_compiler_caarrayofregulararray2D
##
## gen output: (2 asserts);
## Int Arg: 6
##
#!
Exit status: 0
Ue_R { typedef Int(5) IArr[3];  Int(5) m_i(6);  Int(5) m_j(6);  Int test() {  System s;  TWindows tvt;  Int(5) ia[3] = tvt ( 2 cast )aref . cast;  self m_i . ia 1 [] = self m_j . tvt ( 2 cast )aref . 1 [] = s ( self m_i . cast )print . s ( self m_j . 6 cast == )assert . s ( self m_j . self m_i . == )assert . 0 cast return } }
Uq_System { <NOMAIN> }
Un_TWindows { typedef Int(5) IArr[3];  Int(5) m_arr0[3]( { 0, 0, 0 });  Int(5) m_arr1[3]( { 1, 2, 3 });  Int(5) m_arr2[3]( { 2, 4, 6 });  Int(5) m_arr3[3]( { 3, 6, 9 });  <NOMAIN> }
##
## To answer question posed by Dave 11/22/2016, 2d-custom array of regular arrays?
##
#>R.ulam
  ulam 3;
element R {
  typedef Int(5) IArr[3];
  Int(5) m_i, m_j;
  Int test(){
    System s;
    TWindows tvt;
    IArr ia = tvt[2];
    m_i = ia[1];
    m_j = tvt[2][1];
    s.print((Int) m_i);
    s.assert(m_j == 6);
    s.assert(m_j == m_i);
    return 0;
  }
}

#:TWindows.ulam
  ulam 3;
transient TWindows {
  typedef Int(5) IArr[3];
  IArr m_arr0 = { 0, 0, 0 };
  IArr m_arr1 = { 1, 2, 3 };
  IArr m_arr2 = { 2, 4, 6 };
  IArr m_arr3 = { 3, 6, 9 };
  IArr& aref(Int index) {
    if(index == 0)
      return m_arr1;
    else if(index == 1)
      return m_arr2;
    else if(index == 2)
      return m_arr3;
    return m_arr0;
  }
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

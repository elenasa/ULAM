## -*- mode:ulam -*-
#=t41056_test_compiler_classinstancetypedefasfuncparamtype_issue
#!
Exit status: 7
Ue_R { Int test() {  Content content;  content ( 1u cast 3u cast 7u cast )setDir . content m_cmdPrio . mVal . cast return } }
Ue_Content : QContent { constant Unsigned cCMD_BITS = 7u;  typedef UMod(7u) CommandSpinner;  typedef Unsigned(3) Dir;  Unsigned(3) m_moveDir(0);  typedef Unsigned(3) Velocity;  Unsigned(3) m_moveVelocity(0);  UMod(7u) m_cmdPrio( typedef Unsigned(7) Value;  constant Unsigned(7) cVALUE_MIDPOINT = 63u;  Unsigned(7) mVal(0); );  :QContent<> <NOMAIN> }
Uq_QContent { /* empty class block */ }
Uq_UMod(Unsigned bits) { typedef Unsigned(UNKNOWN) Value;  constant Unsigned(UNKNOWN) cVALUE_MIDPOINT = unresolved maxof . unresolved minof . -b 2 / cast;  Unsigned(UNKNOWN) mVal(notready);  <NOMAIN> }
##
## informed by Dave ish 03242017, turned out to be a non-issue
## ./.splatgen/Content.ulam:288:36: ERROR: Trying to use typedef from another class template 'UMod', but instance cannot be found.
##
#>R.ulam
  ulam 3;
element R {
  Int test(){
    Content content;
    content.setDir(1u, 3u, 7u);
    return (Int) content.m_cmdPrio.mVal;
  }
}


#:Content.ulam
  ulam 3;
element Content : QContent
{
  constant Unsigned cCMD_BITS = 7u;     // Allow ~64 cmds in flight before ambiguity
  typedef UMod(cCMD_BITS) CommandSpinner;

  //typedef EventWindow.Dir Dir;
  typedef Unsigned(3) Dir;
  Dir m_moveDir;               // Direction to prefer if m_moveTimer active
  typedef Unsigned(3) Velocity;
  Velocity m_moveVelocity;     // How hard to prefer moveDir if moveTimer active

  CommandSpinner m_cmdPrio;

  Void setDir(Dir dir, Velocity vel, CommandSpinner.Value prio) { //<--Line with ERROR
    m_moveDir = dir;
    m_moveVelocity = vel;
    m_cmdPrio.set(prio);
    //m_moveTimer.reset();
  }
}

#:QContent.ulam
  ulam 1;
quark QContent {
}

#:UMod.ulam
  ulam 2;
quark UMod(Unsigned bits) {
  typedef Unsigned(bits) Value;
  constant Value cVALUE_MIDPOINT = (Value) ((Value.maxof - Value.minof) / 2);
  Value mVal;

  Void set(Value val)
  {
    mVal = val;
  }
}

#.

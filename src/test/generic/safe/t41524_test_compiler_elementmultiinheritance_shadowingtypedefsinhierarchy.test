## -*- mode:ulam -*-
#=t41524_test_compiler_elementmultiinheritance_shodowingtypedefsinhierarchy
##
## gen output: (+ interleaved asserts)
##  Unsigned Arg: 3
##  Unsigned Arg: 1
##
#!
Exit status: 1
Ue_R { Bool(3) sp(true);  Unsigned a(3u);  typedef Bar Mine;  Int test() {  System s;  Bar f;  self a . f ( )func . cast = self sp . self a . 3u cast == cast = s ( self a . )print . s ( self sp . cast )assert . f m_bus . 1u cast = s ( f m_bus . cast )print . s ( f m_bus . 1u cast == )assert . f m_bus . cast return } }
Ue_Foo : Bar +Moo { Bool(7) sp(false);  typedef Bar Moo;  :Bar< Unsigned(3) m_bus( 3u); > +Moo< typedef Int Mine;  Unsigned(3) m_us( 4u); > ^Deep< typedef Bar Mine;  Unsigned(3) m_deep( 2u); > <NOMAIN> }
Uq_System { <NOMAIN> }
Uq_Moo { typedef Int Mine;  Unsigned(3) m_us( 4u);  <NOMAIN> }
Uq_Bar : Deep { Unsigned(3) m_bus( 3u);  :Deep< typedef Bar Mine;  Unsigned(3) m_deep( 2u); > <NOMAIN> }
Uq_Deep { typedef Bar Mine;  Unsigned(3) m_deep( 2u);  <NOMAIN> }
##
## shadow typedefs across bases ok; depth-first order search; see also t41525;
## not sure about the copies of same base, shared, but gen COMPONENTS in .h was fooled.
##
#>R.ulam
  ulam 5;
element R {
  Bool(3) sp;
  Unsigned a;
  typedef Foo.Mine Mine; //depth-first
  Int test() {
    System s;
    Mine f;
    a = f.func();
    sp = (a == 3u);
    s.print(a);
    s.assert(sp);
    f.m_bus = 1u;
    s.print(f.m_bus);
    s.assert(f.m_bus==1u);
    return (Int) f.m_bus;
  }
}

#:Moo.ulam
 ulam 3;
quark Moo {
  typedef Int Mine;
  Unsigned(3) m_us = 4u;
  Unsigned(3) func()
  {
    return m_us;
  }
}

#:Foo.ulam
  ulam 5;
element Foo : Moo + local.Moo {
  Bool(7) sp;
  typedef Bar Moo; //wait for it..
}

#:Bar.ulam
  ulam 3;
quark Bar : Deep {
  Unsigned(3) m_bus = 3u;
  Unsigned(3) func()
  {
    return m_bus;
  }
}

#:Deep.ulam
  ulam 3;
quark Deep {
  typedef Bar Mine;
  Unsigned(3) m_deep = 2u;
  Unsigned(3) func()
  {
    return m_deep;
  }
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

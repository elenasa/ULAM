## -*- mode:ulam -*-
#=t3701_test_compiler_elementandquark_castclassreftoatomref
##
##  gen output: 2 asserts
##
#!
Exit status: 1
Ue_A : QW { Bool c(true);  Bool d(true);  :QW< Bool bw(false);  :Qbase< Unary(5) m_five(4u); >> ^Qbase< Unary(5) m_five(4u); > Int test() {  System s;  Qbase& qref = self cast;  qref m_five . 3u cast = Atom& aref = qref cast;  qref m_five . 5u cast = A apple = aref cast;  self c . apple m_five . cast 5u == = s ( self c . )assert . Atom& aref2 = qref.atomof;  qref m_five . 4u cast = A apple2 = aref2 cast;  self d . apple2 m_five . cast 4u == = s ( self d . )assert . self c . cast return } }
Uq_System { <NOMAIN> }
Uq_QW : Qbase { Bool bw(false);  :Qbase< Unary(5) m_five(0); > <NOMAIN> }
Uq_Qbase { Unary(5) m_five(0);  <NOMAIN> }
##
## informed by t3697
##
#>A.ulam
  ulam 2;
use System;
use QW;
element A : QW {
  Bool c,d;
  Int test(){
    System s;
    Qbase& qref = self;
    qref.m_five = 0x3;

    //Atom & aref = self; //ERROR for NOW.
    Atom & aref = (Atom&) qref; //atom ref assignment
    qref.m_five = 0x5;
    A apple = (A) aref;
    c = (apple.m_five == 0x5);
    s.assert(c);

    //Second way to go from qref to atomref, gencode different
    Atom & aref2 = qref.atomof; //atomof ref assignment
    qref.m_five = 0x4;
    A apple2 = (A) aref2;
    d = (apple2.m_five == 0x4);
    s.assert(d);

    return (Int) c;
  }
}

#:QW.ulam
  ulam 2;
use Qbase;
quark QW : Qbase{
  Bool bw;
  Self func()
  {
    Atom a = self.atomof;
    Self& sra = (Self&) a; //new way!
    return sra;
  }
}

#:Qbase.ulam
  ulam 2;
quark Qbase{
  Unary(5) m_five;
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

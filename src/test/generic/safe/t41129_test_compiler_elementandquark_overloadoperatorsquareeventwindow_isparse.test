## -*- mode:ulam -*-
#=t41129_test_compiler_elementandquark_overloadoperatorsquareeventwindow_isparse
##
## gen output:
## Int Arg: 0
## assert: arg is 1
## after asserts abort: arg is 1
##
#!
Exit status: -11
Ue_EventWindowTest { EventWindow ew( Bool sp(false); );  Int test() {  System s;  Int rtn = -1 cast;  EventWindowTest ewt;  self ew . ( 0 cast )operator[] . ewt cast = Atom aw = self ew . ( 0 cast )operator[] . cast;  Atom a = ewt cast;  { a EventWindowTest is cond rtn 0 cast = if rtn 1 cast = else } s ( rtn )print . s ( rtn 0 cast == )assert . rtn return } }
Uq_EventWindow { Bool sp(false);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
## uses operator overload for [] instead of custom array; informed by t3248
## // 'a has System' doesn't appy to eval because atoms have no class declarations; but testable for gencode
##
#>EventWindowTest.ulam
  ulam 1;
element EventWindowTest {
  EventWindow ew;
  Int test() {
    System s;
    Int rtn = -1;
    EventWindowTest ewt;

    // unsure of this EventWindow spike; testing parsing only here
    ew[0] = ewt;
    Atom aw = ew[0];  // This is me!

    Atom a = ewt;
    if (a is EventWindowTest)
      rtn = 0;
    else
      rtn = 1;
    s.print(rtn);
    s.assert(rtn == 0);
    return rtn;
  }
}

#:EventWindow.ulam
  ulam 3;
quark EventWindow {
  Bool sp; //different quark size for overload rather than custom array
  Atom& operator[](Int index) native;

  //5b5d
  Atom& operator[](Atom& a)
  {
    return a;
  }

  Atom aref(Int index)
  {
    Atom a; //superceded by overload operator[]
    return a;
  }

}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}

#.

## -*- mode:ulam -*-
#=t3826_test_compiler_transientandquarkwargs_nestedshadowingasconds
##   gencode output (4 asserts):
##	 Unsigned Arg: 5  (1 assert)
##	 Unsigned Arg: 3  (1 assert)
##       Unsigned Arg: 3  (2 asserts)
##
##    eval fails to return correct exit status (=5)
##
#!
Exit status: 5
Ue_R { Bool first(true);  Bool second(true);  Int test() {  System s;  Eltypo elf;  elf t . ( 5u cast )func . s ( elf t . bu . cast )print . s ( elf t . bu . 5u == )assert . s ( elf t . Bar . bu . 5u == )assert . { elf Typo(1) as cond { Typo(1)& elf;  { elf Bar as cond { Bar& elf;  elf ( 3u cast )func . s ( elf bu . cast )print . self first . elf bu . cast 3 cast == = s ( self first . )assert . } if s ( false )assert . else } s ( elf bu . cast )print . self second . elf bu . cast 3 cast == = s ( self second . )assert . s ( self first . )assert . } if } elf t . bu . cast return } }
Uq_System { <NOMAIN> }
Un_Eltypo : Typo(1) { Typo(1) t( :Bar< Unsigned(3) bu( 7u); >);  :Typo(1)<> ^Bar< Unsigned(3) bu( 7u); > <NOMAIN> }
Uq_Bar { Unsigned(3) bu( 7u);  <NOMAIN> }
Un_Typo(Int a) : Bar { /* empty class block */ }
##
## informed by 3637
##
#:R.ulam
  ulam 2;
element R {
  Bool first, second;
  Int test(){
    System s;

    Eltypo elf; //transient
    elf.t.func(5u); //dm set
    s.print(elf.t.bu); //==5u
    s.assert(elf.t.bu==5u);
    s.assert(elf.t.Bar.bu==5u); //Dave challenge!

    if(elf as Typo(1))
    {
      if(elf as Bar){
	elf.func(3u);
	s.print(elf.bu);
	first = (elf.bu == 3); //3u, from 7u
	s.assert(first);
      }
      else
	s.assert(false);

      s.print(elf.bu);
      second = (elf.bu == 3); //3u, from 7u
      s.assert(second);
      s.assert(first);
    }
    return elf.t.bu; //5u
  }
}

#:Typo.ulam
  ulam 2;
use Bar;
transient Typo(Int a) : Bar{
}

#:Bar.ulam
  ulam 1;
quark Bar
{
  Unsigned(3) bu = 7u;
  Void func(Unsigned u)
  {
    bu = (Unsigned(3)) u;
  }
}

#:Eltypo.ulam
  ulam 2;
transient Eltypo : Typo(1) {
  Typo(1) t;
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

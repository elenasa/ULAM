## -*- mode:ulam -*-
#=t41548_test_compiler_returnwithassignment_operatoroverload_ish
#!
Exit status: 0
Ue_T { typedef Int(7) Coord;  Int test() {  System s;  C2D incr = incr ( 1 cast 2 cast )Self .;  C2D inat = inat ( 2 cast 4 cast )Self .;  inat ( incr )operator+= . 0 cast return } }
Uq_C2D { typedef Int(7) Coord;  Int(7) m_width(0);  Int(7) m_height(0);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
##  informed by Dave's C2D share, should work. see also t3177.
##
#>T.ulam
  ulam 5;
element T{
  typedef C2D.Coord Coord;

  Int test(){
    System s;
    C2D incr(1,2);
    C2D inat(2,4);
    inat += incr;

    return 0;
  }
}

#:C2D.ulam
  ulam 3;
quark C2D {
  typedef Int(7u) Coord;
  Coord m_width;
  Coord m_height;

  Void init(Int x, Int y) {
    m_width = (Coord) x;
    m_height = (Coord) y;
    return;
  }
  Int getIndex(Int a, Int b){
    return ((m_height-b) * m_width + (m_height-a));
  }
  Int getX()
  {
    return m_width;
  }
  Int getY()
  {
    return m_height;
  }

  Self(Int ax, Int ay) {
    init(ax,ay);
  }

  Self operator*(Self other) {
    return make((Coord) (m_width * other.m_width), (Coord) (m_height * other.m_height));
  }

  Self operator*(Coord scalar) {
    return make((Coord) (m_width * scalar), (Coord) (m_height * scalar));
  }

  Self add(Self other) {
    return make((Coord) (m_width + other.m_width), (Coord) (m_height + other.m_height));
  }

  Self operator+(Self other) {
    return add(other);
  }

  Self operator+(Coord scalar) {
    return make((Coord) (m_width + scalar), (Coord) (m_height + scalar));
  }

  Self subtract(Self other) {
    return make((Coord) (m_width - other.m_width), (Coord) (m_height - other.m_height));
  }

  Self operator-(Self other) {
    return subtract(other);
  }

  Self operator-(Coord scalar) {
    return make((Coord) (m_width - scalar), (Coord) (m_height - scalar));
  }

  Self negate() {
    return make((Coord) -(Int) m_width, (Coord) -(Int) m_height);
  }

  Self operator-() {
    return negate();
  }

  Self operator+() {
    return self;
  }

  Self make(Int x, Int y)
  {
    Self ret;
    ret.init(x,y);
    return ret;
  }

  Self & operator+=(Self other) {
    // This single statement should work..
    return self = self + other;
    // self = self + other;
    // return self;
  }
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

## -*- mode:ulam -*-
#=t3276_test_compiler_unpackedarray
##      /* gen code output:
##	 Int Arg: 0
##	 Int Arg: 1
##	 Int Arg: 2
##	 Int Arg: 3
##	 Int Arg: 4
##	 Int Arg: 5
##	 Int Arg: 6
##	 Int Arg: 7
##	 Int Arg: 8
##	 Int Arg: 9
##      */
#!
Exit status: 10
Ue_A { System s();  typedef Int BigSite[10];  Int test() {  Int site[10];  { Int i = 0 cast;  i 10 cast < cond { site i [] i = self s . ( site i [] )print . } _1: i 1 += while } 10 cast return } }
Uq_System { <NOMAIN> }
#>A.ulam
  ulam 1;
use System;
element A {
  System s;
  typedef Int BigSite[10];
  Int test(){
    BigSite site;
    for(Int i = 0; i < 10; ++i){
      site[i] = i;
      s.print(site[i]);
    }
    return 10;
  }
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
##      // simplify for debug
##      //bool rtn1 = fms->add("A.ulam","element A {\ntypedef Int BigSite[10];\nInt test(){ BigSite site;  for(Int i = 0; i < 5; ++i){\n  /* site[i] = i;\n */ site[1] = 4;\n  }\n   return 10;\n }\n }\n");
##
##      //site[3] = 1 ok, site[4] as lhs fails
##      //bool rtn1 = fms->add("A.ulam","element A {\ntypedef Int BigSite[10];\nInt test(){ BigSite site;  site[4] = 1;\n  return 0;\n }\n }\n");
##
##      //return site[0] only ok.
##      //bool rtn1 = fms->add("A.ulam","element A {\ntypedef Int BigSite[10];\nInt test(){ BigSite site;  /* site[4] = 4;\n*/  return site[1];\n }\n }\n");
#.

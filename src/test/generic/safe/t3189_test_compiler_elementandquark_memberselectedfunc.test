## -*- mode:ulam -*-
#=t3189_test_compiler_elementandquark_memberselectedfunc
##
## gen output: (+ assert)
## Int 40;
##
#!
Exit status: 40
Ue_Foo { Int m_idx(40);  Int test() {  System s;  self m_idx . self ( 9 cast 4 cast )func . ( 0 cast 0 cast )getIndex . = s ( self m_idx . )print . s ( self m_idx . 40 cast == )assert . self m_idx . return } }
Uq_C2D { typedef Int(6) IF;  Int(6) m_width(0);  Int(6) m_height(0);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
##      //member selection with a function call must be first saved to a
##      //variable since we results are returned-by-value (see t3188)
##
#>Foo.ulam
  ulam 1;
use C2D;
element Foo {
  Int m_idx;
  C2D func(Int i, Int j) {
    C2D c;
    c.init(i,j);
    return c;
  }
  Int test() {
    System s;
    m_idx = func(9,4).getIndex(0,0);
    s.print(m_idx);
    s.assert(m_idx == 40);
    return m_idx;
  }
}

#:C2D.ulam
  ulam 1;
quark C2D {
  typedef Int(6) IF;
  IF m_width, m_height;
  Void init(Int x, Int y) {
    m_width = (IF) x;
    m_height = (IF) y;
    return;
  }
  Void init() {
    m_width = IF.maxof;
    m_height = 4;
    return;
    /* event window overload */ }
  Int getIndex(Int a, Int b){
    return ((m_height-b) * m_width + (m_height-a));
  }
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

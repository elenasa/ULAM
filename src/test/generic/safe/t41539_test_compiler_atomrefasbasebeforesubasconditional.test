## -*- mode:ulam -*-
#=t41539_test_compiler_atomrefasbasebeforesubasconditional
## gen output: assert iff fails.
#!
Exit status: 0
Ue_A { Int test() {  Q q;  q ( )behave . 0 cast return } }
Ue_Q : Subplate { :Subplate<> ^Plate<> <NOMAIN> }
Uq_Subplate : Plate { /* empty class block */ }
Uq_System { <NOMAIN> }
Uq_Plate { /* empty class block */ }
##
## informed by ish 20210815, and t41538; second as-cond gencode should also treat 'a' like a ref.
##
#>A.ulam
  ulam 3;
element A {
  Int test(){
    Q q;
    q.behave();
    return 0;
  }
}

#:Q.ulam
  ulam 5;
element Q : Subplate {
  Void behave() {
    System f;
    //Atom & a = ew[0];
    Atom & a = self.atomof;
    if (a as Plate) {
      if (a as Subplate) return; // This should return
      f.assert(false); //fail("Shouldn't get here");
    }
    else
      f.assert(false); //nor here
  }
}

#:Plate.ulam
  ulam 5;
quark Plate { }
quark Subplate : Plate { }

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

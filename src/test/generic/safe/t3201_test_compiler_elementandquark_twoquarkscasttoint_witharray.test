## -*- mode:ulam -*-
#=t3201_test_compiler_elementandquark_twoquarkscasttoint_witharray
##      // changed to <<2 instead of *4u and got a different last answer (4 instead of 7)
##      //developed by Dave (10092014) in c++ and then converted to Ulam.
##      // 7 is max that Int(4) can be positively, so 12 becomes 7.
##      /* gen code output: (asserts interleaved)
##	 Unsigned Arg: 1
##	 Unsigned Arg: 2
##	 Unsigned Arg: 3
##	 Unsigned Arg: 0
##	 Int(4) Arg: 0x6
##	 Int(4) Arg: 0x7
##      */
##
##      // constant fold minus
#!
Exit status: 7
Ue_Foo { System s();  Bar bar1( Unsigned(3) x(1u);  Unsigned(3) y(2u);  Bool b(false); );  Bar bar2( Unsigned(3) x(3u);  Unsigned(3) y(0u);  Bool b(false); );  Int(4) i[2](6,7);  Int test() {  Int(2) d;  d 1 = self bar1 . x . d cast = self bar1 . y . 2 cast = self bar2 . x . 3 cast = self bar2 . y . 0 cast = self i . 0 [] self bar1 . ( )toInt . cast = self i . 1 [] self bar2 . ( )toInt . cast = self s . ( self bar1 . x . cast )print . self s . ( self bar1 . x . cast 1 cast == )assert . self s . ( self bar1 . y . cast )print . self s . ( self bar1 . y . cast 2 cast == )assert . self s . ( self bar2 . x . cast )print . self s . ( self bar2 . x . cast 3 cast == )assert . self s . ( self bar2 . y . cast )print . self s . ( self bar2 . y . cast 0 cast == )assert . self s . ( self i . 0 [] )print . self s . ( self i . 0 [] 6 == )assert . self s . ( self i . 1 [] )print . self s . ( self i . 1 [] 7 == )assert . self i . 1 [] cast return } }
Uq_System { <NOMAIN> }
Uq_Bar { Bool b(false);  Unsigned(3) x(0);  Unsigned(3) y(0);  <NOMAIN> }
#>Foo.ulam
  ulam 1;
use System;
use Bar;
element Foo {
  System s;
  Bar bar1;
  Bar bar2;
  Int(4) i[2];
  Int test(){
    Int(2) d;
    d = 1;
    bar1.x = (Unsigned(3)) d;
    bar1.y = 2;
    bar2.x = 3;
    bar2.y = 0;
    i[0] = (Int(4)) bar1;
    i[1] = (Int(4)) bar2;
    s.print(bar1.x);
    s.assert(bar1.x == 1);
    s.print(bar1.y);
    s.assert(bar1.y == 2);
    s.print(bar2.x);
    s.assert(bar2.x == 3);
    s.print(bar2.y);
    s.assert(bar2.y == 0);

    s.print(i[0]);
    s.assert(i[0] == 6);
    s.print(i[1]);
    s.assert(i[1] == 7);

    return i[1];}
}

##      //note: don't have printf's yet so comments for now
##      // printf(\"%d\n\", (Int) bar1);\nprintf(\"%d\n\", (Int) bar2);\n STARS AND SLASHES OH MY!!!
##
##      // fixed a bug that didn't address different int bit sizes automatically during casting
##
##      // test with array data member (lhs), and return array item[1]. [currently not supported by simulator]
##
##      //note: don't have <<2, so substituted *4; got it now! changes the answer too..
##
#:Bar.ulam
  ulam 1;
quark Bar {
  Bool b;
  Unsigned(3) x, y;
  Int toInt(){
    return (Int) (x << 2) + y;
  }
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

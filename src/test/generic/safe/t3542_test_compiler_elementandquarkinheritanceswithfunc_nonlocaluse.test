## -*- mode:ulam -*-
#=t3542_test_compiler_elementandquarkinheritanceswithfunc_nonlocaluse
## gencode output (asserts interleaved):
##Bool(3) Arg: 0x7 (true)
##Bool(3) Arg: 0x7 (true)
##Bool(3) Arg: 0x7 (true)
##Int Arg: -1
##Int Arg: 1
##Unsigned Arg: 96
##
#!
Exit status: 96
Ue_Foo : Basel { System s();  Bool first(true);  :Basel< Bool ba(false);  :Casel< Soo su( Unsigned(3) us(4u);  :Coo< Bool(3) cb(true);  :Loo< Int(5) lu(1); >> ^Loo< Int(5) lu(1); >); >> ^Casel< Soo su( Unsigned(3) us(4u);  :Coo< Bool(3) cb(true);  :Loo< Int(5) lu(1); >> ^Loo< Int(5) lu(1); >); > Int test() {  self s . ( self su . cb . )print . self s . ( self su . cb . cast )assert . self first . self su . cb . cast = self s . ( self first . cast )print . self s . ( self first . )assert . self first . self su . ( )check . = self s . ( self first . cast )print . self s . ( self first . )assert . { self su . ( )check . cond { self s . ( self su . lu . cast )print . self s . ( self su . lu . -1 cast == )assert . self su . lu . 1u cast = self s . ( self su . lu . cast )print . self s . ( self su . lu . 1 cast == )assert . self s . ( 96u )print . self s . ( true )assert . 96u cast return } if } -1 cast return } }
Uq_Basel : Casel { Bool ba(false);  :Casel< Soo su( Unsigned(3) us( 4u);  :Coo< Bool(3) cb( true); > ^Loo< Int(5) lu( -1); >); > <NOMAIN> }
Uq_Casel { Soo su( Unsigned(3) us( 4u);  :Coo< Bool(3) cb( true); > ^Loo< Int(5) lu( -1); >);  <NOMAIN> }
Uq_Soo : Coo { Unsigned(3) us( 4u);  :Coo< Bool(3) cb( true); > ^Loo< Int(5) lu( -1); > <NOMAIN> }
Uq_Coo : Loo { Bool(3) cb( true);  :Loo< Int(5) lu( -1); > <NOMAIN> }
Uq_Loo { Int(5) lu( -1);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
## element and quark inheritances, regular (non-template), with func
## informed by t3541
##
#>Foo.ulam
  ulam 2;
use Basel;
use System;
element Foo : Basel {
  System s;
  Bool first;
  Int test() {
    s.print(su.cb);
    s.assert(su.cb);
    first = su.cb; //DM
    s.print(first);
    s.assert(first);
    first = su.check();
    s.print(first);
    s.assert(first);

    if(su.check())
    {
      s.print(su.lu);
      s.assert(su.lu == -1);
      su.lu = 1u;
      s.print(su.lu);
      s.assert(su.lu == 1);
      s.print(Foo.sizeof);
      s.assert(Foo.sizeof == 96);
      return Foo.sizeof;
    }
    return -1;
  }
}

#:Basel.ulam
  ulam 2;
use Casel;
quark Basel : Casel {
  Bool ba;
}

#:Casel.ulam
  ulam 2;
use Soo;
quark Casel {
  Soo su;
}

#:Soo.ulam
  ulam 2;
use Coo;
quark Soo : Coo {
  Unsigned(3) us = 4u;
}

#:Coo.ulam
  ulam 2;
use Loo;
quark Coo : Loo {
  Bool(3) cb = true;
  Bool check()
  {
    return cb;
  }
}

#:Loo.ulam
  ulam 2;
quark Loo {
  Int(5) lu = -1;
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

## -*- mode:ulam -*-
#=t41018_test_compiler_controlswitchnested_continue
##
## gen output: (+ 2 asserts)
## Int Arg: 3
## Int Arg: -1
## Int Arg: 1
## Int Arg: -2
## Int Arg: 1
## Int Arg: -2
##
#!
Exit status: 1
Ue_A { System s();  Int a(-2);  Int b(1);  Int test() {  self a . 1 cast = self b . 0 cast = { true cond { { typedef Int _SWITCHTYPEDEF13;  Int Uh_switchcond13 = self a . 1 -=;  Uh_switchcond13 0 cast == cond { self b . 2 cast = goto } if Uh_switchcond13 -1 cast == cond { self b . 3 cast = break } if { self b . 1 cast = break } else else _2: } self s . ( self b . )print . self s . ( self a . )print . { self b . 1 cast == cond break if } } _1: while } self s . ( self b . )print . self s . ( self b . 1 cast == )assert . self s . ( self a . )print . self s . ( self a . -2 cast == )assert . self b . return } }
Uq_System { <NOMAIN> }
##
## informed by t41017
##
#>A.ulam
  ulam 3;
element A {
  System s;
  Int a, b;
  Int test() {
    a = 1;
    b = 0;
    while(true)
    {
      which((--a))
      {
      case 0:
	{
	  b = 2;
	  continue; //to end of while <--the test.
	}
      case -1:
	{
	  b = 3;
	  break; //to end of switch <--the test.
	}
      otherwise:
	{
	  b = 1;
	  break; //falls through..not needed.
	}
      }
      s.print(b);
      s.print(a);
      if (b == 1)
	break; //out of while
    } //end while

    s.print(b);
    s.assert(b == 1);
    s.print(a);
    s.assert(a == -2);
    return b;
  }
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

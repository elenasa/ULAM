## -*- mode:ulam -*-
#=t41579_test_compiler_multiinheritancewsharedbigbase_semanticsisas
##
## gen output
## Int Long Arg: -1
## assert: arg is 1
## after asserts abort: arg is 1
## assert: arg is 1
## after asserts abort: arg is 1
## Int(4) Arg: 0x2
## assert: arg is 1
## after asserts abort: arg is 1
## Int(4) Arg: 0xc
## assert: arg is 1
## after asserts abort: arg is 1
## Int Long Arg: 1
## assert: arg is 1
## after asserts abort: arg is 1
## Int Long Arg: -1
## Int Long Arg: -1
## Int Long Arg: 1
## Int Long Arg: 1
## Int(4) Arg: 0x4
## assert: arg is 1
## after asserts abort: arg is 1
## Int Long Arg: 2
## assert: arg is 1
## after asserts abort: arg is 1
## Int Long Arg: 2
## Int Long Arg: 2
## Int Long Arg: -1
## Int Long Arg: -1
##
#!
Exit status: 0
Ue_R { Int test() {  Foo f;  f ( )behave . 0 cast return } }
Ue_Foo : Secondary +Intermediate { Bool(7) sp(false);  SystemU5 s( :System<>);  :Secondary< Bool m_b2(false); > +Intermediate< Int(4) m_i4( 2);  Int(4) m_a4( 3); > ^Base< Bool bsp( true);  Int(43) m_i3( HexU64(0xffffffff, 0xffffffff)); > <NOMAIN> }
Uq_Secondary +Base { Bool m_b2(false);  +Base< Bool bsp( true);  Int(43) m_i3( HexU64(0xffffffff, 0xffffffff)); > <NOMAIN> }
Uq_Intermediate +Base { Int(4) m_i4( 2);  Int(4) m_a4( 3);  +Base< Bool bsp( true);  Int(43) m_i3( HexU64(0xffffffff, 0xffffffff)); > <NOMAIN> }
Uq_SystemU5 : System { :System<> <NOMAIN> }
Uq_Base { Bool bsp( true);  Int(43) m_i3( HexU64(0xffffffff, 0xffffffff));  <NOMAIN> }
Uq_System { <NOMAIN> }
##
## informed by t41325
##
#>R.ulam
  ulam 3;
element R {
  Int test() {
    Foo f;
    f.behave();
    return 0;
  }
}

#:Foo.ulam
  ulam 5;
element Foo : Secondary +Intermediate {
  Bool(7) sp;
  SystemU5 s;
  Void behave()
  {
    Foo other;

    s.print(self.Intermediate.m_i3); //shared ==-1 (0x7)
    s.assert(self.Intermediate.m_i3==-1); //shared ==-1 (0x7)
    s.assert(m_i3==-1); //shared ==-1 (0x7)

    s.print(m_i4); //Intermediate ==2, default
    s.assert(m_i4 == 2);

    if(!checkis(other)) //should absolute be true, right?
      s.assert(false);

    s.print(m_i4); //Intermediate ==-4 (0xc)unchanged
    s.assert(m_i4 == -4);

    s.print(other.m_i3); //shared changed == 1
    s.assert(other.m_i3 == 1);

    s.print(self.Secondary.m_i3); //in shared Base, unchanged == -1 (0x7)
    s.print(self.Intermediate.m_i3); //in shared Base, unchanged == -1 (0x7)
    s.print(other.Secondary.m_i3); //shared changed == 1
    s.print(other.Intermediate.m_i3); //shared changed == 1


    if(!checkas(other)) //should absolute be true, right?
      s.assert(false);
    s.print(m_a4);
    s.assert(m_a4 == 4);

    s.print(other.m_i3); //shared changed == 2
    s.assert(other.Intermediate.m_i3 == 2);

    s.print(other.Secondary.m_i3); //shared changed ==2
    s.print(other.Intermediate.m_i3); //shared changed == 2
    s.print(self.Secondary.m_i3); //in shared Base, unchanged == -1 (0x7)
    s.print(self.Intermediate.m_i3); //in shared Base, unchanged == -1 (0x7)
  }
}

#:Intermediate.ulam
  ulam 5;
quark Intermediate +Base
{
  Int(4) m_i4 = 2;
  Int(4) m_a4 = 3;
  virtual Bool checkis(Base& base) {
    if (base is Self) {
      m_i4 = -4;
      base.m_i3 = 1;
      return true;
    }
    return false;
  }

  virtual Bool checkas(Base& base) {
    if (base as Self) {
      m_a4 = 4;
      base.m_i3 = 2;
      return true;
    }
    return false;
  }
}

#:Secondary.ulam
  ulam 5;
quark Secondary +Base
{
  Bool m_b2;
}

#:Base.ulam
  ulam 3;
quark Base
{
  Bool bsp = true;
  Int(43) m_i3 = -1;
  virtual Bool checkis(Base& base) { return false; }
  virtual Bool checkas(Base& base) { return false; }
}

#:SystemU5.ulam
  ulam 5;
quark SystemU5 : System {
  Void print(Unsigned(64) arg) native;
  Void print(Int(64) arg) native;
  Void print(String arg) native;
  Void print(Bits(64) arg) {
    print((Unsigned(64)) arg);
  }
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

## -*- mode:ulam -*-
#=t3804_test_compiler_quarks_virtualfuncsandrefargs
##      gen code output (if fail, assert):
##  Unsigned Arg: 1
##  Unsigned Arg: 1
##  Unsigned Arg: 2
##  Unsigned Arg: 2
##  Bool(3) Arg: 0x7 (true)
##  Bool(3) Arg: 0x7 (true)
##  Bool(3) Arg: 0x7 (true)
##  Bool(3) Arg: 0x7 (true)
##  Bool(3) Arg: 0x7 (true)
##  Bool(3) Arg: 0x7 (true)
##  Bool(3) Arg: 0x0 (false)
##  Bool(3) Arg: 0x0 (false)
##  Unsigned Arg: 1
##  Unsigned Arg: 1
##  Unsigned Arg: 2
##  Unsigned Arg: 2
##  Unsigned Arg: 1
##  Unsigned Arg: 1
##  Unsigned Arg: 1
##  Unsigned Arg: 1
##  Unsigned Arg: 2
##  Unsigned Arg: 2
##  Int Arg: -11
##
#!
Exit status: 0
Ue_RefTest { System f();  Int mChecks(-11);  Int test() {  self ( )runTests . 0 cast return } }
Uq_System { <NOMAIN> }
Uq_QBrt { Bool mQBool( true);  <NOMAIN> }
Uq_QDat : QBrt { Unary(3) mUnDat(0);  QBrt mBaseDat( Bool mQBool( true); );  :QBrt< Bool mQBool( true); > <NOMAIN> }
Uq_QSubDat { QDat mQdat( Unary(3) mUnDat(0);  QBrt mBaseDat( Bool mQBool( true); );  :QBrt< Bool mQBool( true); >);  <NOMAIN> }
##
## informed by Dave!
##
#>RefTest.ulam
  ulam 2;
element RefTest {
  System f;
  Int mChecks;
  Bool die() { f.print(mChecks); f.assert(false); /* NOT REACHED */ return true; }
  Void check(Unsigned expr, Unsigned val) { --mChecks; f.print(expr); f.print(val); expr == val || die(); }
  Void check(Int expr, Int val) { --mChecks; f.print(expr); f.print(val); expr == val || die(); }
  Void check(Bool expr, Bool val) { --mChecks; f.print(expr); f.print(val); expr == val || die(); }

  Int test() {
    runTests();
    return 0;
  }

  Void runTests() {
    QBrt qbrt;
    check(qbrt.retn(), 1u);

    QDat qdat;
    check(qdat.retn(), 2u);
    check(qdat.getb(), true);
    check(qdat.setb(false), true);
    check(qdat.mBaseDat.getb(), true);
    check(qdat.getb(), false);

    QBrt& rt1 = qbrt;
    QBrt& rt2 = qdat;
    QBrt& rt3 = qdat.mBaseDat;
    QDat& rt4 = qdat;

    check(rt1.retn(), 1u);
    check(rt2.retn(), 2u);
    check(rt3.retn(), 1u);
    check(rt4.mBaseDat.retn(), 1u); // -10

    check(qdat.mBaseDat.retn(), 1u); //added by me
    f.print(mChecks);
  }
}

#:QDat.ulam
  ulam 2;
quark QDat : QBrt {
  Unary(3) mUnDat;
  QBrt mBaseDat;
  virtual Unsigned retn() { return 2; }
}

#:QBrt.ulam
  ulam 2;
quark QBrt {
  Bool mQBool = true;
  virtual Unsigned retn() {  return 1; }
  Bool getb() { return mQBool; }
  Bool setb(Bool b) { Bool ret = getb(); mQBool = b; return ret; }
}

#:QSubDat.ulam
  ulam 2;
quark QSubDat {
  QDat mQdat;
}


#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

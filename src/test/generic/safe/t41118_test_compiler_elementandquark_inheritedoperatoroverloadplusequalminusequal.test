## -*- mode:ulam -*-
#=t41118_test_compiler_elementandquark_inheritedoperatoroverloadplusequalminusequal
##
##  gen code output: (+ interleaved asserts)
##	 Int Arg: 6
##	 Int Arg: 3
##
#!
Exit status: 3
Ue_Foo : QW { Bool first(false);  Int fint(0);  Int opfint(0);  :QW< Int(4) m_i(0); > Int test() {  System s;  Foo f;  f m_i . 4 = s ( f ( 2 cast )operator+= . )print . s ( f m_i . 6 == )assert . s ( f ( 3 cast )operator-= . )print . s ( f m_i . 3 cast == )assert . f m_i . cast return } }
Uq_QW { Int(4) m_i(0);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
## first test to parse inherited plus equal, minus equal overload operators for an element and quark
## informed by t41117,6
##
#>Foo.ulam
  ulam 3;
element Foo : QW {
  Bool first;
  Int fint, opfint;
  Int test() {
    System s;
    Foo f;
    f.m_i = 4;

    s.print(f+=2); //prints 6 (like preincr)
    s.assert(f.m_i == 6);

    s.print(f-=3); //3 (like predecr)
    s.assert(f.m_i == 3);
    return f.m_i;
  }

}

#:QW.ulam
  ulam 3;
quark QW {
  Int(4) m_i;
  Int operator+=(Int(4) iarg)
  {
    return m_i+=iarg; //implicit cast from Int(4) to Int, found eval bug in PostIncr
  }

  Int operator-=(Int(4) iarg)
  {
    return m_i-=iarg; //implicit cast from Int(4) to Int, found eval bug in PostDecr
  }
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

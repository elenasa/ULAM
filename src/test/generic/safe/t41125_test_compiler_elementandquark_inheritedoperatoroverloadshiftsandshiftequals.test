## -*- mode:ulam -*-
#=t41125_test_compiler_elementand quark_inheritedoperatoroverloadshiftsandshiftequals
##
##  gen code output: (interleaved asserts + 1)
##	 Unsigned Arg: 32
##	 Unsigned Arg: 8
##	 Unsigned Arg: 16
##	 Unsigned Arg: 1
##
#!
Exit status: 8
Ue_Foo : QW { Bool first(false);  Int(4) m_i(0);  :QW< Bits m_it(0); > Int test() {  System s;  Foo f;  f m_it . 1u cast = f ( 5u cast )operator<<= . s ( f m_it . cast )print . s ( f m_it . 32u cast == )assert . f ( 2u cast )operator>>= . s ( f m_it . cast )print . s ( f m_it . 8u cast == )assert . Unsigned usl = f ( 1u cast )operator<< .;  s ( usl )print . s ( usl 16u cast == )assert . Unsigned usr = f ( 3u cast )operator>> .;  s ( usr )print . s ( usr 1u cast == )assert . s ( f m_it . 8u cast == )assert . f m_it . cast return } }
Uq_QW { Bits m_it(0);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
## test inherited shifts, and shift equals overload operators for an element and quark
## informed by t41124,23.
##
#>Foo.ulam
  ulam 3;
element Foo : QW {
  Bool first;
  Int(4) m_i;
  Int test() {
    System s;
    Foo f;
    f.m_it = 1u;

    f <<= 5u;
    s.print((Unsigned) f.m_it); //prints 32
    s.assert(f.m_it == 32u);

    f >>= 2u;
    s.print((Unsigned) f.m_it); //prints 8
    s.assert(f.m_it == 8u);

    Unsigned usl = f << 1u;
    s.print(usl); //prints 16
    s.assert(usl == 16u);

    Unsigned usr = f >> 3u;
    s.print(usr); //prints 1
    s.assert(usr == 1u);

    s.assert(f.m_it == 8u); //no change
    return (Int) f.m_it; //still 8
  }
}

#:QW.ulam
  ulam 3;
quark QW {
  Bits m_it;
  Void operator<<=(Unsigned arg)
  {
    m_it <<= arg;
  }

  Void operator>>=(Unsigned arg)
  {
    m_it >>= arg;
  }

  Unsigned operator<<(Unsigned arg)
  {
    return (Unsigned) (m_it << arg);
  }

  Unsigned operator>>(Unsigned arg)
  {
    return (Unsigned) (m_it >> arg);
  }
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

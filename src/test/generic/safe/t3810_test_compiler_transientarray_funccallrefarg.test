## -*- mode:ulam -*-
#=t3810_test_compiler_transientarray_funccallrefarg
##      gen code output: (4 asserts)
##
#!
Exit status: 0
Ue_R { Bool b(true);  Bool c(true);  Bool d(true);  Bool e(true);  Int test() {  System s;  QW qw;  A asingle;  asingle ( )setsp . self b . qw ( asingle cast )func . = s ( self b . )assert . A& singleref = asingle cast;  self c . qw ( singleref )func . = s ( self c . )assert . A ar[3];  ar 1 [] ( )setsp . self d . qw ( ar 1 [] cast )func . = s ( self d . )assert . A& r = ar 2 [] cast;  r ( )setsp . self e . qw ( r )func . = s ( self e . )assert . 0 cast return } }
Uq_System { <NOMAIN> }
Un_A : QW { Bool(7) sp(false);  :QW<> <NOMAIN> }
Uq_QW { <NOMAIN> }
##
## Dave requested a way to get default values for Self (within a quark);
## a loophole, since a quark would be an undefined atom, but as a ref, its done (t3679)
## As of ulam-3, loophole no longer needed; now it is a runtime check, rather than compile time restriction.
##
## similar to 3685, except a transient
##
## revealed bug in eval,NodeIdent makeUlamValuePtr when m_currentObject was PtrAbs, new ptr should be too!
## also, bug in NodeCast set 'singleref' notreferenceable, since not tobe a ref; now takes its child node's instead.
#>R.ulam
  ulam 2;
use System;
use A;
element R {
  Bool b, c, d, e;

  Int test(){
    System s;
    QW qw;
    A asingle;
    //case 0: not an array, just a ref arg
    asingle.setsp(); //sp = true;
    //b = asingle.getsp(); //WORKS
    b = qw.func(asingle); //assert CallStack:106

    //b = asingle.sp; WORKS!
    s.assert(b);

    A& singleref = asingle;
    //c = singleref.getsp(); //WORKS
    c = qw.func(singleref); //assert CallStack:106
    s.assert(c);

    A ar[3];
    //case 1:
    ar[1].setsp(); //sp = true;
    d = qw.func(ar[1]);
    //d = ar[1].sp;
    s.assert(d);

    //case 2:
    A& r = ar[2];
    r.setsp(); //sp = true;
    e = qw.func(r);
    //e = r.sp;
    s.assert(e);

    return 0;
  }
}

#:A.ulam
  ulam 2;
use QW;
transient A : QW {
  Bool(7) sp;
  Void setsp()
  {
    sp = true;
  }

  Bool(7) getsp()
  {
    return sp;
  }
}

#:QW.ulam
  ulam 2;
quark QW {
  Bool func(A& aarg)
  {
    return aarg.sp;
  }
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

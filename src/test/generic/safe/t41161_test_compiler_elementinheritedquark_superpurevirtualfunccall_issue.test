## -*- mode:ulam -*-
#=t41161_test_compiler_elementinheritedquark_superpurevirtualfunccall_issue
##
## gen output: (3 asserts)
##  Int Arg: 2
##
#!
Exit status: 0
Uq_Sup : SuperDuper { :SuperDuper<> <NOMAIN> }
Uq_SuperDuper { <NOMAIN> }
Uq_Sub1 : Sup { Int m_fun(0);  :Sup<> ^SuperDuper<> <NOMAIN> }
Uq_System { <NOMAIN> }
Ue_E : Sub1 { :Sub1< Int m_fun(2);  :Sup< :SuperDuper<>> ^SuperDuper<>> ^Sup< :SuperDuper<>> ^SuperDuper<> Int test() {  System s;  self ( )behave . s ( self m_fun . )print . s ( self m_fun . 2 cast == )assert . 0 cast return } }
##
## informed by t41160
##
#>Sup.ulam
 ulam 3;
quark Sup : SuperDuper
{
  virtual Int func() { return 2; } //ok
  //virtual Int func(); //pure middle?
}

#:SuperDuper.ulam
  ulam 3;
quark SuperDuper
{
  virtual Int func(); //pure
  //virtual Int func() { return 2; } //ok
}

#:Sub1.ulam
  ulam 2;
quark Sub1 : Sup {
  Int m_fun;
  Void behave()
  {
    System s;
    m_fun = self.func();  // should be fine
    s.assert(m_fun == 1);
    m_fun = super.func(); // should also be fine since SuperDuper isn't pure
    s.assert(m_fun == 2);
  }
  @Override
    virtual Int func() { return 1; /* defined in self but not super */ }
}

#:E.ulam
  ulam 3;
element E : Sub1
{
  Int test()
  {
    System s;
    behave();
    s.print(m_fun);
    s.assert(m_fun == 2);
    return 0;
  }
}


#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

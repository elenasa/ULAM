## -*- mode:ulam -*-
#=t3651_test_compiler_elementandquark_localarrayref
##
## gen output: 2 asserts
#!
Exit status: 7
Ue_Foo : Bar { :Bar< typedef Int(7) Tar;  constant Int cx = 7;  Int(7) m_tar(1); > Int test() {  System s;  Int(7) tar[4];  Int i = 3 cast;  Int(7)& tref = tar i [] cast;  tref 7 cast = s ( tref cast 7 cast == )assert . s ( tar i [] 7 cast == )assert . tref cast return } }
Uq_System { <NOMAIN> }
Uq_Bar { constant Int cx = 7;  typedef Int(7) Tar;  Int(7) m_tar( 1);  <NOMAIN> }
##
## informed by t3650, except non-class array (order matters)
## using typedef, constant defined in ancestor, Bar.
##
#>Foo.ulam
  ulam 2;
use System;
element Foo : Bar {
  Int test() {
    System s;
    Tar tar[4];
    Int i = 3;
    Tar & tref = tar[i]; //note!! [] value doesn't have to be a constant here
    tref = cx;
    s.assert(tref == 7);
    s.assert(tar[i] == 7);
    return tref;
  }
}
use Bar;

#:Bar.ulam
  ulam 2;
quark Bar {
  constant Int cx = 7;
  typedef Int(cx + 0) Tar;

  Tar(cx) m_tar = 1;
  Int toInt()
  {
    return m_tar;
  }
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

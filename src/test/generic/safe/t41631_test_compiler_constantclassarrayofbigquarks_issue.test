## -*- mode:ulam -*-
#=t41631_test_compiler_constantclassarrayofbigquarks_issue
##
## gen output: 5 asserts
##     Unsigned Arg: 99
##     Unsigned Arg: 6
#!
Exit status: 0
Ue_KeyExprRep { KeyExprNode m_key( Unsigned(10) m_leftIndex(1u);  Unsigned(10) m_rightIndex(2u);  Unsigned(10) m_keyCode(0u);  Unsigned(10) m_op(124u);  typedef Unsigned(10) Byte; );  Int test() {  System s;  self m_key . keyexpr_x13 0 [] = s ( self m_key . m_rightIndex . 2u cast == )assert . s ( keyexpr_x13 1 [] m_rightIndex . 4u cast == )assert . KeyExprNode mykeyexpr_x13[5] = keyexpr_x13;  s ( mykeyexpr_x13 2 [] m_keyCode . cast )print . s ( mykeyexpr_x13 2 [] m_keyCode . keyexpr_x13 2 [] m_keyCode . == )assert . s ( mykeyexpr_x13 3 [] m_rightIndex . cast )print . s ( mykeyexpr_x13 3 [] m_rightIndex . 6u cast == )assert . s ( mykeyexpr_x13 3 [] m_rightIndex . keyexpr_x13 3 [] m_rightIndex . == )assert . 0 cast return } }
Uq_KeyExprNode { typedef Unsigned(10) Byte;  Unsigned(10) m_leftIndex( 5u);  Unsigned(10) m_rightIndex( 6u);  Unsigned(10) m_keyCode(0);  Unsigned(10) m_op(0);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
## Dave ish 11/26/22 (blew an assertion in BitVector.h) during big quark constant value eval;
##   same as t41261, except for Byte typedef bitsize in KeyExprNode; non-constant is workaround.
##
#>KeyExprRep.ulam
  ulam 3;
use KeyExprNode;
local constant KeyExprNode keyexpr_x13[] = {
   { .m_leftIndex = 1, .m_rightIndex = 2, .m_keyCode = 0, .m_op = '|' }, // [0]
   { .m_leftIndex = 3, .m_rightIndex = 4, .m_keyCode = 0, .m_op = '&' }, // [1]
   { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'c', .m_op = 0 }, // [2]
   //{ .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'a', .m_op = 0 }, // [3]
   { },
   { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'b', .m_op = 0 }, // [4] , EXTRA COMMA at the ens, no difference like c++
 };
element KeyExprRep {
  KeyExprNode m_key;
  Int test() {
    System s;
    m_key = keyexpr_x13[0]; //displayed in eval output
    s.assert(m_key.m_rightIndex==2u);

    s.assert(keyexpr_x13[1].m_rightIndex==4u); //reads constant class array item

    //read entire constant class array
    KeyExprNode mykeyexpr_x13[5] = local.keyexpr_x13; // see t41552 for error without dot
    s.print(mykeyexpr_x13[2].m_keyCode);
    s.assert(mykeyexpr_x13[2].m_keyCode==keyexpr_x13[2].m_keyCode); //reads constant class array item

    //case: default values
    s.print(mykeyexpr_x13[3].m_rightIndex); //6
    s.assert(mykeyexpr_x13[3].m_rightIndex == 6u);
    s.assert(mykeyexpr_x13[3].m_rightIndex == keyexpr_x13[3].m_rightIndex);

    return 0;
  }
}

#:KeyExprNode.ulam
  ulam 3;
quark KeyExprNode {
  typedef Unsigned(10) Byte; //for BIG quark!
  Byte m_leftIndex = 5u;  // for [,|&~]
  Byte m_rightIndex = 6u; // for [,|&]
  Byte m_keyCode;    // [a-zA-Z.@_?] or 0
  Byte m_op;         // [,|&~] or 0
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

## -*- mode:ulam -*-
#=t3598_test_compiler_elementandquarkinheritancetemplatemix_wfunccall_issue
#!
Exit status: 1
Ue_Tu : Foo(1,true) { :Foo(1,true)< Unary(2) phase(0u);  constant Int a = 1;  constant Bool b = true;  typedef Unary(2) Phase;  constant Unary(2) cBLUE = 0u;  constant Unary(2) cRED = 1u;  constant Unary(2) cGREEN = 3u; > Int test() {  { self ( self phase . )prev . cond 1 cast return if } 2 cast return } }
Uq_Foo(Int a, Bool b) { typedef Unary(2) Phase;  Unary(2) phase(0);  constant Unary(2) cBLUE = 0u;  constant Unary(2) cRED = 1u;  constant Unary(2) cGREEN = 3u;  <NOMAIN> }
##
##       //classes can inherit from a template instance, and vis versa
##       informed by t3576 and t3597, trying to make CLife issue happen from working test
##
#>Tu.ulam
  ulam 2;
//use Foo;
element Tu : Foo(1, true) {
  Int test(){
    if(prev(phase))
      return 1;
    return 2;//func();
  }
}

#:Foo.ulam
  ulam 2;
quark Foo(Int a, Bool b) {
  //constant, dm all work!!
  typedef Unary(2) Phase;
  Phase phase;

  constant Phase cBLUE = 0u;
  constant Phase cRED = 1u;
  constant Phase cGREEN = 2u;

  Int func()
  {
    return a;
  }

  //  Phase prev(Phase cur)
  Bool prev(Phase cur)
  {
    Phase p = (Phase) (cur - 1); //FAILS
    //Phase p = cur; //ok

    //Bool b = (cBLUE == cGREEN); //ok
    //    Bool b = (p == cBLUE); //fails
    //if(b) return cGREEN;
    //    if(p == cBLUE) return cGREEN;
    //Bool b = (cur == cBLUE); //fails
    //return cur; //(Phase) (cur - 1);
    return (p == cBLUE);
  }
}
#.

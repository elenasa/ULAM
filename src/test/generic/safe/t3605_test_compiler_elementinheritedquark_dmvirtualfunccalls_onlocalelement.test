## -*- mode:ulam -*-
#=t3605_test_compiler_elementinheritedquark_dmvirtualfunccalls_onlocalelement
##
## gen output: (times 4) requires quark vtable support
##assert: arg is 1
##after asserts abort: arg is 1
##
#!
Exit status: 0
Uq_QMemBase { Int(3) bmem(0);  <NOMAIN> }
Uq_QSubBase1 : QMemBase { /* empty class block */ }
Uq_QSubBase2 : QMemBase { :QMemBase< Int(3) bmem(0); > <NOMAIN> }
Ue_Foo { QSubBase1 m1( :QMemBase< Int(3) bmem(0); >);  QSubBase2 m2( :QMemBase< Int(3) bmem(0); >);  <NOMAIN> }
Ue_Test : System { Bool brtn[4](true,true,true,true);  :System<> Int test() {  Foo f;  self brtn . 0 [] f m1 . ( )func . 3 cast == = self ( self brtn . 0 [] )assert . self brtn . 1 [] f m2 . ( )func . 4 cast == = self ( self brtn . 1 [] )assert . self brtn . 2 [] f m1 . bmem . 1 cast == = self ( self brtn . 2 [] )assert . self brtn . 3 [] f m2 . bmem . 2 == = self ( self brtn . 3 [] )assert . 0 cast return } }
Uq_System { <NOMAIN> }
##
## informed by vtable-example 11/25/15, t3604; uses local var f, instead of implicit self
##
#:QMemBase.ulam
  ulam 2;
quark QMemBase {
  Int(3) bmem;
  Int func() {
    return vfunc();
  }
  virtual Int vfunc() {
    bmem = 1;
    return 3;
  }
}

#:QSubBase1.ulam
  ulam 2;
use QMemBase;
quark QSubBase1 : QMemBase { }

#:QSubBase2.ulam
  ulam 2;
use QMemBase;
quark QSubBase2 : QMemBase {
  virtual Int vfunc() {
    bmem = 2;
    return 4;
  }
}

#:Foo.ulam
  ulam 2;
use QSubBase1;
use QSubBase2;
element Foo {
  QSubBase1 m1;
  QSubBase2 m2;
}

#>Test.ulam
  ulam 2;
use Foo;
use System;
element Test : System {
  Bool brtn[4];
  Int test() {
    Foo f; //the local element
    brtn[0] = (f.m1.func() == 3);
    assert(brtn[0]);
    brtn[1] = (f.m2.func() == 4);
    assert(brtn[1]);
    brtn[2] = (f.m1.bmem == 1);
    assert(brtn[2]);
    brtn[3] = (f.m2.bmem == 2);
    assert(brtn[3]);
    return 0;
  }
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

## -*- mode:ulam -*-
#=t41483_test_compiler_constantatom
##
## gen output: (+ interleaved asserts)
##  Unsigned Arg: 2
##
#!
Exit status: 0
Ue_KeyExprRep { Int test() {  System s;  KeyExprNode key = ckey;  Int i = 2 cast;  Atom a = cAtom;  { a KeyExprNode is cond { KeyExprNode m_key = a cast;  s ( m_key m_rightIndex . cast )print . s ( m_key m_rightIndex . 2u cast == )assert . } if { s ( false )assert . } else } 0 cast return } }
Ue_KeyExprNode { typedef Unsigned(8) Byte;  Unsigned(8) m_leftIndex(0);  Unsigned(8) m_rightIndex(0);  Unsigned(8) m_keyCode(0);  Unsigned(8) m_op(0);  <NOMAIN> }
Ue_DReg { /* empty class block */ }
Uq_System { <NOMAIN> }
##
## informed by Dave request 4/16/21 for constant atom array, started w t41263. see t41484 for array.
##
##
#>KeyExprRep.ulam
  ulam 5;
use KeyExprNode;
local constant DReg cDReg = { };
local constant KeyExprNode keyexpr_x13[] = {
  { .m_leftIndex = 1, .m_rightIndex = 2, .m_keyCode = 0, .m_op = '|' }, // [0]
  { .m_leftIndex = 3, .m_rightIndex = 4, .m_keyCode = 0, .m_op = '&' }, // [1]
  { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'c', .m_op = 0 }, // [2]
  { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'a', .m_op = 0 }, // [3]
  { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'b', .m_op = 0 }, // [4] , EXTRA COMMA at the end??? no difference
};

local constant Atom cAtom = keyexpr_x13[0]; //ok
local constant KeyExprNode ckey = keyexpr_x13[0]; //code gen to compare w cAtom

element KeyExprRep {
  Int test() {
    System s;
    KeyExprNode key = ckey; //code gen to compare w cAtom
    //Atom a = keyexpr_x13[0]; //ok, this works.

    Int i = 2;
    Atom a = cAtom; //[i];
    if(a is KeyExprNode)
    {
      KeyExprNode m_key = (KeyExprNode) a; //keyexpr_x13[0];
      s.print(m_key.m_rightIndex);
      s.assert(m_key.m_rightIndex==2u);
    }
    else
    {
      s.assert(false);
    }
    return 0;
  }
}

#:KeyExprNode.ulam
  ulam 3;
element KeyExprNode {
  typedef Unsigned(8) Byte;
  Byte m_leftIndex;  // for [,|&~]
  Byte m_rightIndex; // for [,|&]
  Byte m_keyCode;    // [a-zA-Z.@_?] or 0
  Byte m_op;         // [,|&~] or 0
}

#:DReg.ulam
  ulam 1;
element DReg {
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

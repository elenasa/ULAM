## -*- mode:ulam -*-
#=t3835_test_compiler_element_ascondquarkatomof_issue
##
##  gen output (+ interleaved asserts)
##    Unsigned Arg: 1
##    Unsigned Arg: 96
##    Int Arg: 2
##
#!
Exit status: 2
Ue_Foo : QPerc { Int mi(2);  Int asize(1);  :QPerc< Bool bb(true); > Int test() {  System s;  Atom a = Foo.instanceof cast;  { a QPerc as cond { QPerc& a;  Atom aqinas = a.atomof cast;  self mi . a ( )func . = s ( 1u )print . s ( true )assert . self asize . 1u cast = s ( 96u )print . s ( true )assert . } if } s ( self mi . )print . self bb . self mi . 2 cast == = s ( self bb . )assert . self mi . return } }
Uq_QPerc { Bool bb(false);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
## informed by a Dave ish 7/1/2016;
##
#>Foo.ulam
  ulam 2;
use QPerc;
element Foo : QPerc {

  Int mi = 0;
  Int asize;
  virtual Int func()
  {
    return 2;
  }

  Int test() {
    System s;
    Atom a = Foo.instanceof; //init for test;
    if(a as QPerc)
    {
      Atom aqinas = a.atomof; //cannot generate usage CLASSIC->ILLEGAL_STATE
      mi = a.func();
      s.print(a.sizeof); // == 1
      s.assert(a.sizeof == QPerc.sizeof);
      asize = a.sizeof;
      s.print(aqinas.sizeof); // == 96
      s.assert(aqinas.sizeof == Atom.sizeof);
    }
    s.print(mi);
    bb = (mi == 2);
    s.assert(bb);
    return mi;
  }
}

#:QPerc.ulam
  ulam 2;
quark QPerc {
  Bool bb;
  virtual Int func()
  {
    return 1;
  }
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

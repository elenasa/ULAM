## -*- mode:ulam -*-
#=t41269_test_compiler_constantclassarrayoftransients_withtransientdm
##
## gen output: (+ interleaved asserts)
##
##  Unsigned Arg: 2
##  Unsigned Arg: 4
##  Unsigned Arg: 99
##
##  (Transient transient dm with string)
##  1 assert
##  String(1) Arg: "mel"
##  String(1) Arg: "mel"
##  3 asserts
##
#!
Exit status: 0
Ue_KeyExprRep { typedef Unsigned(8) Byte;  Unsigned(8) ri0(2u);  Unsigned(8) ri1(4u);  Unsigned(8) kc2(99u);  Unsigned(8) mykc2(99u);  Unsigned(8) estr0(109u);  Unsigned(8) estr31(101u);  Unsigned(8) estr2(108u);  Unsigned(8) estr32(108u);  Int test() {  SystemU3 s;  KeyExprNode mykey = keyexpr_x13 0 [];  self ri0 . mykey m_rightIndex . = s ( mykey m_rightIndex . cast )print . s ( mykey m_rightIndex . 2u cast == )assert . self ri1 . keyexpr_x13 1 [] m_rightIndex . = s ( keyexpr_x13 1 [] m_rightIndex . cast )print . s ( keyexpr_x13 1 [] m_rightIndex . 4u cast == )assert . KeyExprNode mykeyexpr_x13[5] = keyexpr_x13;  self mykc2 . mykeyexpr_x13 2 [] m_keyCode . = self kc2 . keyexpr_x13 2 [] m_keyCode . = s ( mykeyexpr_x13 2 [] m_keyCode . cast )print . s ( mykeyexpr_x13 2 [] m_keyCode . keyexpr_x13 2 [] m_keyCode . == )assert . Tfoo elephant = keyexpr_x13 4 [] m_tfoo .;  s ( elephant esp . )assert . String mystr = elephant estr .;  s ( elephant estr . )print . String estring = keyexpr_x13 4 [] m_tfoo . estr .;  s ( estring )print . self estr0 . elephant estr 0 [] . = self estr31 . keyexpr_x13 3 [] m_tfoo . estr 1 [] . = self estr2 . elephant estr 2 [] . = self estr32 . keyexpr_x13 3 [] m_tfoo . estr 2 [] . = s ( elephant estr 0 [] . 109u == )assert . s ( keyexpr_x13 3 [] m_tfoo . estr 1 [] . 101u == )assert . s ( elephant estr 2 [] . keyexpr_x13 3 [] m_tfoo . estr 2 [] . == )assert . 0 cast return } }
Un_Tfoo { Bool esp( true);  String estr( "mel");  <NOMAIN> }
Un_KeyExprNode { typedef Unsigned(8) Byte;  Unsigned(8) m_leftIndex(0);  Unsigned(8) m_rightIndex(0);  Unsigned(8) m_keyCode(0);  Unsigned(8) m_op(0);  Tfoo m_tfoo( ctfoo);  <NOMAIN> }
Uq_SystemU3 : System { :System<> <NOMAIN> }
Uq_System { <NOMAIN> }
##
## like t41267 except transient data member too, with a String.
##
##
#>KeyExprRep.ulam
  ulam 3;
use Tfoo; //not req'd; keeps ordering the same.
//use KeyExprNode; ////without use ./KeyExprNode.ulam:9:0: ERROR: Invalid size (-2) to set for primitive type: 0Holder. No LONGER TRUE. with use localdef error w 'ctfoo'.
local constant KeyExprNode keyexpr_x13[] = {
  { .m_leftIndex = 1, .m_rightIndex = 2, .m_keyCode = 0, .m_op = '|' }, // [0]
  { .m_leftIndex = 3, .m_rightIndex = 4, .m_keyCode = 0, .m_op = '&' }, // [1]
  { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'c', .m_op = 0 }, // [2]
  { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'a', .m_op = 0 }, // [3]
  { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'b', .m_op = 0 }, // [4] , EXTRA COMMA at the end??? no difference
};
element KeyExprRep {
  typedef KeyExprNode.Byte Byte;
  Byte ri0;
  Byte ri1;
  Byte kc2;
  Byte mykc2;
  Byte estr0;
  Byte estr31;
  Byte estr2;
  Byte estr32;

  Int test() {
    SystemU3 s;

    KeyExprNode mykey = keyexpr_x13[0];
    ri0 = mykey.m_rightIndex;
    s.print(mykey.m_rightIndex);
    s.assert(mykey.m_rightIndex==2u);

    ri1 = keyexpr_x13[1].m_rightIndex;
    s.print(keyexpr_x13[1].m_rightIndex);
    s.assert(keyexpr_x13[1].m_rightIndex==4u); //reads constant class array item

    //read entire constant class array
    KeyExprNode mykeyexpr_x13[5] = keyexpr_x13;
    mykc2 = mykeyexpr_x13[2].m_keyCode;
    kc2 = local.keyexpr_x13[2].m_keyCode;
    s.print(mykeyexpr_x13[2].m_keyCode);
    s.assert(mykeyexpr_x13[2].m_keyCode==keyexpr_x13[2].m_keyCode); //reads constant class array item


    //element data member of constant class array of transients, with String data member
    Tfoo elephant = keyexpr_x13[4].m_tfoo;
    s.assert(elephant.esp);
    String mystr = elephant.estr; //look at gen code
    s.print(elephant.estr);

    String estring = keyexpr_x13[4].m_tfoo.estr;
    s.print(estring);

    estr0 = elephant.estr[0];
    estr31 = keyexpr_x13[3].m_tfoo.estr[1];
    estr2 = elephant.estr[2];
    estr32 = keyexpr_x13[3].m_tfoo.estr[2];
    s.assert(elephant.estr[0] == 'm'); //==109u
    s.assert(keyexpr_x13[3].m_tfoo.estr[1]=='e'); //==101u
    s.assert(elephant.estr[2] == keyexpr_x13[3].m_tfoo.estr[2]); //==108u 'l'
    return 0;
  }
}

#:KeyExprNode.ulam
  ulam 3;
local constant Tfoo ctfoo = { };
transient KeyExprNode {
  typedef Unsigned(8) Byte;
  Byte m_leftIndex;  // for [,|&~]
  Byte m_rightIndex; // for [,|&]
  Byte m_keyCode;    // [a-zA-Z.@_?] or 0
  Byte m_op;         // [,|&~] or 0
  Tfoo m_tfoo = ctfoo;
}

#:Tfoo.ulam
  ulam 3;
transient Tfoo {
  Bool esp = true;
  String estr = "mel";
}

#:SystemU3.ulam
  ulam 3;
quark SystemU3 : System {
  Void print(String s) native;
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

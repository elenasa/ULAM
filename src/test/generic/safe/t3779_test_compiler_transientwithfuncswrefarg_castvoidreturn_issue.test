## -*- mode:ulam -*-
#=t3779_test_compiler_transientwithfuncswrefarg_castvoidreturn_issue
##
## gen output: (+ asserts)
## Unsigned Arg: 2
## Unsigned Arg: 3
## Unsigned Arg: 2
##
#!
Exit status: -11
Ue_Mob : WindowScanner { typedef Unsigned(6) SiteNum;  Bool sp(false);  :WindowScanner< typedef Unsigned(6) SiteNum; > Int test() {  WindowServices ws;  ws ( self cast )scan . System s;  s ( ws mSites 3 [] . cast )print . s ( ws mSites 3 [] . cast 2 cast == )assert . 0 cast return } }
Uq_WindowScanner { typedef Unsigned(6) SiteNum;  <NOMAIN> }
Uq_EventWindow { typedef Unsigned(6) SiteNum;  <NOMAIN> }
Un_WindowServices { typedef Unary(4) Radius;  typedef Unsigned(6) SiteNum;  typedef Unsigned(4) Category;  constant Unsigned cCATEGORY_COUNT = 16u;  Bool status(false);  Unary(4) m_inner(0);  Unary(4) m_outer(0);  Unsigned(6) m_sn( 2u);  Unsigned(6) mSites[16](0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);  EventWindow ew( typedef Unsigned(6) SiteNum; );  <NOMAIN> }
Uq_System { <NOMAIN> }
##
## based on ish 06/11/2016 (undefined temp for anonymous reference argument to transient function), and t3773
## discovered gencode bug from return (Void) scan();
## discovered bug in NodeCast::needsACast that did not cast two classes of the same size.
##
#>Mob.ulam
  ulam 2;
element Mob : WindowScanner {
  typedef EventWindow.SiteNum SiteNum;
  Bool sp; //change the size of subclass (reveals bug in needsACast)

  virtual Bool visit(WindowServices &ws, Atom & a, SiteNum sn) {
    if (a is Self) ws.categorize(sn, 1);       // #1 is us
    //    else if (a is Empty) ws.categorize(sn, 2); // #2 is empty
    else ws.categorize(sn, 3);                  // #3 is everything else
    return true;
  }

  Int test() {
    WindowServices ws;
    ws.scan(self);

    //insure categorize was called; Void return scan (bug!)
    System s;
    s.print((Unsigned) ws.mSites[3]); //categ == 3
    s.assert(ws.mSites[3] == 2);
    return 0;
  }
}

#:WindowServices.ulam
  ulam 2;
transient WindowServices {
  typedef Unary(4) Radius;
  typedef EventWindow.SiteNum SiteNum;
  typedef Unsigned(4) Category;
  constant Unsigned cCATEGORY_COUNT = Category.maxof + 1;

  Bool status;
  Radius m_inner, m_outer;
  SiteNum m_sn = 2;
  SiteNum mSites[cCATEGORY_COUNT];
  EventWindow ew;

  Void scan(WindowScanner& scanner)
  {
    return scan(scanner, (Radius) 1, (Radius) 3);
  }

  Void scan(WindowScanner& scanner, Radius inner, Radius outer) {
    m_inner = inner;
    m_outer = outer;
    Atom a = ew[m_sn];
    status = scanner.visit(self, a, m_sn);
  }

  SiteNum categorize(SiteNum sn, Category categ)
  {
    System s;
    mSites[categ] = sn;
    m_sn = sn;
    s.print((Unsigned) sn);
    s.assert(sn == 2);
    s.print((Unsigned) categ);
    s.assert(categ == 3);
    return sn;
  }
}

#:WindowScanner.ulam
  ulam 2;
quark WindowScanner {
  typedef EventWindow.SiteNum SiteNum;
  virtual Bool visit(WindowServices& ws, Atom & a, SiteNum sn) ;
}

#:EventWindow.ulam
  ulam 3;
quark EventWindow{
  typedef Unsigned(6) SiteNum;
  Atom& aref(Int index) native;
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

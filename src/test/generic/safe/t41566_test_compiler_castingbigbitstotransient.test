## -*- mode:ulam -*-
#=t41566_test_compiler_castingbigbitstotransient
##
##  gen output: 2 asserts
#!
Exit status: 0
Ue_Anchor10 { System s();  Int test() {  typedef Bits(67) MPayload;  SegPkt10 pkt;  QSegment(67u) x;  pkt mCN . HexU64(0x0, 0x3) = pkt mUpbound . true cast = x mMessageBuffer . mPayload . pkt cast = SegPkt10 pkt2 = x mMessageBuffer . mPayload . cast;  self s . ( pkt mCN . pkt2 mCN . == )assert . self s . ( pkt2 mUpbound . cast )assert . 0 cast return } }
Un_SegPkt10 { typedef Unsigned(64) CN;  constant Unsigned(64) cNO_OP = HexU64(0x0, 0x0);  constant Unsigned(64) cSET_LENGTH = HexU64(0x0, 0x1);  constant Unsigned(64) cSET_STRETCH = HexU64(0x0, 0x2);  constant Unsigned(64) cSET_ANGLE = HexU64(0x0, 0x3);  constant Unsigned(64) cSET_FLEX = HexU64(0x0, 0x4);  constant Unsigned(64) cGROW_HEAD = HexU64(0x0, 0x5);  constant Unsigned(64) cRSV6 = HexU64(0x0, 0x6);  constant Unsigned(64) cRSV7 = HexU64(0x0, 0x7);  Bool(3) mUpbound(false);  Unsigned(64) mCN(0);  <NOMAIN> }
Un_QSegment(Unsigned cMSG_BITS) : QSeg { typedef QIMsg(bits) QC_QIMsg;  QIMsg(bits) mMessageBuffer(notready);  :QSeg< typedef Unsigned(5) SegPtr;  typedef Unsigned(2) Type; > <NOMAIN> }
Uq_System { <NOMAIN> }
Uq_QSeg { typedef Unsigned(5) SegPtr;  typedef Unsigned(2) Type;  <NOMAIN> }
Un_QIMsg(Unsigned bits) { typedef Bits(UNKNOWN) Payload;  typedef Unary(2) Direction;  constant Unary(2) cEMPTY = 0u;  constant Unary(2) cUP = 1u;  constant Unary(2) cDOWN = 3u;  Unary(2) mDirection(0);  Bits(UNKNOWN) mPayload(notready);  <NOMAIN> }
##
## see t41416, here uses new big bits
##
#>Anchor10.ulam
  ulam 5;
local constant Unsigned cMSG_BITS = SegPkt10.sizeof;
local typedef QSegment(cMSG_BITS) QSegX;

/**
   \symbol A1
   \symmetries none
   \color #448
 */
element Anchor10 {
    System s;
  Int test() {
    typedef QSegX.QC_QIMsg.Payload MPayload;
    SegPkt10 pkt;
    QSegX x;
    pkt.mCN = SegPkt10.cSET_ANGLE;
    pkt.mUpbound = true;
    x.mMessageBuffer.mPayload = (MPayload) pkt;
    SegPkt10 pkt2 = (SegPkt10) x.mMessageBuffer.mPayload;

    s.assert(pkt.mCN==pkt2.mCN);
    s.assert(pkt2.mUpbound);
    return 0;
  }
}


transient SegPkt10 {
  typedef Unsigned(64) CN;
  constant CN cNO_OP       = 0u;
  constant CN cSET_LENGTH  = 1u;
  constant CN cSET_STRETCH = 2u;
  constant CN cSET_ANGLE   = 3u;
  constant CN cSET_FLEX    = 4u;
  constant CN cGROW_HEAD   = 5u;
  constant CN cRSV6        = 6u;
  constant CN cRSV7        = 7u;

  Bool(3) mUpbound;
  CN mCN;
}



#:QSegment.ulam
  ulam 5;
quark QSeg {
  typedef Unsigned(5) SegPtr; // SN 0..24 (25..31 reserved)
  typedef Unsigned(2) Type;

}

/** Base class for a 1D fragile data transport system.  To be subclassed by SPLAT code.
 */
transient QSegment(Unsigned cMSG_BITS) : QSeg {
  // Data members
  typedef QIMsg(cMSG_BITS) QC_QIMsg;
  QC_QIMsg mMessageBuffer;

}

#:QIMsg.ulam
  ulam 5;
/** An internal message */
transient QIMsg(Unsigned bits) {
  typedef Bits(bits) Payload;
  typedef Unary(2) Direction;
  constant Direction cEMPTY = 0u;
  constant Direction cUP    = 1u;
  constant Direction cDOWN  = 2u;
  Direction mDirection;
  Payload mPayload;
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

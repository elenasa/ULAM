## -*- mode:ulam -*-
#=t41274_test_compiler_constantclassarrayoftransients_withelementdm_constantmemberofconstantclass
##
## gen output: (+ bookended asserts)
##   String(1) Arg: "ha"
##   Unsigned Arg: 2
##   String(1) Arg: "ha"
##   Unsigned Arg: 2
##
#!
Exit status: 0
Ue_KeyExprRep { Int test() {  SystemU3 s;  constant Elfoo celfooe = melfoo;  s ( celfooe esp . ! )assert . s ( celfooe estr 0 [] . )print . s ( 2u )print . s ( true )assert . constant Elfoo celfoof = keyexpr_x13 4 [] melfoo .;  s ( celfoof esp . ! )assert . s ( celfoof estr 0 [] . )print . s ( 2u )print . s ( true )assert . 0 cast return } }
Ue_Elfoo { Bool esp( true);  String estr[2]( { "melt", "let" });  constant String c_str = "reunion";  <NOMAIN> }
Un_KeyExprNode { typedef Unsigned(8) Byte;  Unsigned(8) m_leftIndex(0);  Unsigned(8) m_rightIndex(0);  Unsigned(8) m_keyCode(0);  Unsigned(8) m_op(0);  Elfoo m_elfoo( celfoo);  constant Elfoo melfoo = { .esp = false, .estr = { "ha", "oh" } };  <NOMAIN> }
Uq_SystemU3 : System { :System<> <NOMAIN> }
Uq_System { <NOMAIN> }
##
## informed by t41273: a constant member_select of a constant class (melfoo)
##
#>KeyExprRep.ulam
  ulam 3;
use Elfoo;
use KeyExprNode; ////without use ./KeyExprNode.ulam:9:0: ERROR: Invalid size (-2) to set for primitive type: 0Holder.
local constant KeyExprNode keyexpr_x13[] = {
  { .m_leftIndex = 1, .m_rightIndex = 2, .m_keyCode = 0, .m_op = '|' }, // [0]
  { .m_leftIndex = 3, .m_rightIndex = 4, .m_keyCode = 0, .m_op = '&' }, // [1]
  { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'c', .m_op = 0 }, // [2]
  { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'a', .m_op = 0 }, // [3]
  { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'b', .m_op = 0 }, // [4] , EXTRA COMMA at the end??? no difference
};
element KeyExprRep {
  Int test() {
    SystemU3 s;

    //init constant to a constant member of constant class, by Type
    constant Elfoo celfooe = KeyExprNode.melfoo;
    s.assert(!celfooe.esp); //false
    s.print(celfooe.estr[0]); //"ha"
    s.print(celfooe.estr[0].lengthof);
    s.assert(celfooe.estr[0].lengthof == 2u);

    //init constant to a constant member of constant class, by a constant class array item
    constant Elfoo celfoof = keyexpr_x13[4].melfoo;
    s.assert(!celfoof.esp); //false
    s.print(celfoof.estr[0]); //"ha"
    s.print(celfoof.estr[0].lengthof);
    s.assert(celfoof.estr[0].lengthof == 2u);
    return 0;
  }
}

#:KeyExprNode.ulam
  ulam 3;
local constant Elfoo celfoo = { };
transient KeyExprNode {
  typedef Unsigned(8) Byte;
  Byte m_leftIndex;  // for [,|&~]
  Byte m_rightIndex; // for [,|&]
  Byte m_keyCode;    // [a-zA-Z.@_?] or 0
  Byte m_op;         // [,|&~] or 0
  Elfoo m_elfoo = celfoo;
  constant Elfoo melfoo = { .esp = false, .estr = { "ha", "oh" } };
}

#:Elfoo.ulam
  ulam 3;
element Elfoo {
  Bool esp = true;
  String estr[2] = { "melt", "let" };
  constant String c_str = "reunion";
}

#:SystemU3.ulam
  ulam 3;
quark SystemU3 : System {
  Void print(String s) native;
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

## -*- mode:ulam -*-
#=t41073_test_compiler_assigntoarrayitem_questioncolon
##
## gen code output (+ interleaved asserts):
## Int(3) Arg: 0x1
## Int(3) Arg: 0x2
## Int Arg: 3
##
#!
Exit status: 0
Ue_A { Bool ok(true);  Int(3) a[4](0,0,0,2);  Int d(0);  Int test() {  System s;  Int(3) b[4];  self ok . ?  self a . 1 [] :  b 2 [] 1 cast = s ( b 2 [] )print . s ( b 2 [] 1 cast == )assert . self ok . true = self ok . ?  self a . 3 [] :  b 0 [] 2 = s ( self a . 3 [] )print . s ( self a . 3 [] 2 == )assert . Qbar qb;  self ok . ?  qb ( 0 cast )aref . :  qb ( 1 cast )aref . 3 = s ( qb ( 0 cast )aref . cast )print . s ( qb ( 0 cast )aref . cast 3 == )assert . 0 cast return } }
Uq_System { <NOMAIN> }
Uq_Qbar { Int(3) c[4](0,0,0,0);  <NOMAIN> }
##
## suggested by Dave 4/15/17 for ?: test;
##
#>A.ulam
  ulam 3;
element A {
  Bool ok;
  Int(3) a[4];
  Int test() {
    System s;
    Int(3) b[4];

    //with parens, local and data member
    (ok ? a[1] : b[2]) = 1;
    s.print(b[2]);
    s.assert(b[2]==1);

    //without parens, data member and local
    ok = true;
    ok ? a[3] : b[0] = 2;
    s.print(a[3]);
    s.assert(a[3]==2);

    //custom array, local
    Qbar qb;
    ok ? qb[0] : qb[1] = 3;
    s.print((Int) qb[0]);
    s.assert(qb[0] == 3);

    return 0;
  }
  Int d;
}

#:Qbar.ulam
  ulam 3;
quark Qbar {
  Int(3) c[4];
  Int(3)& aref(Int index)
  {
    return c[index];
  }
}

## test system quark with native overloaded print funcs; assert
#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

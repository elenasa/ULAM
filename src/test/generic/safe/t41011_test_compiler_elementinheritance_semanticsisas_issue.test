## -*- mode:ulam -*-
#=t41011_test_compiler_elementinheritance_semanticsisas_issue
##
## gen output (assert)
##
#!
Exit status: 0
Ue_R { Int test() {  System s;  Foo f;  f ( )behave . 0 cast return } }
Uq_System { <NOMAIN> }
Ue_Foo : Intermediate { Bool(7) sp(false);  System s();  :Intermediate<> ^Base<> <NOMAIN> }
Uq_Intermediate : Base { :Base<> <NOMAIN> }
Uq_Base { <NOMAIN> }
##
## Dave issue 1/19/2017, test of is/as semantics with inheritance:
##
#>R.ulam
  ulam 3;
element R {
  Int test() {
    System s;
    Foo f;
    f.behave();
    return 0;
  }
}

#:Foo.ulam
  ulam 3;
element Foo : Intermediate {
  Bool(7) sp;
  System s;
  Void behave()
  {
    Foo other;
    if(!checkis(other)) //should absolute be true, right?
      s.assert(false);

    if(!checkas(other)) //should absolute be true, right?
      s.assert(false);
  }
}

#:Intermediate.ulam
  ulam 3;
quark Intermediate : Base
{
  virtual Bool checkis(Base& base) {
    if (base is Self) {
      return true;
    }
    return false;
  }

  virtual Bool checkas(Base& base) {
    if (base as Self) {
      return true;
    }
    return false;
  }
}

#:Base.ulam
  ulam 3;
quark Base
{
  virtual Bool checkis(Base& base) { return false; }
  virtual Bool checkas(Base& base) { return false; }
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

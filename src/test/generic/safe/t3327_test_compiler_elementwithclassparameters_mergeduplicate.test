## -*- mode:ulam -*-
#=t3327_test_compiler_elementwithclassparameters_mergeduplicate
##      //before decllist:
##      //Exit status: 0\nUe_Foo { Bool(UNKNOWN) b(false);  constant Int(CONSTANT) x = NONREADYCONST;  constant Int(CONSTANT) y = NONREADYCONST;  Bool(UNKNOWN) sp(false);  Int test() {  Foo f;  Foo p;  f sp . -2 -2 == = 0 return } }\nUe_Poo { Bool valb[3](false,false,false);  <NOMAIN> }
##      //Constants have explicit types; instead of -2 NodeTerminalProxy outputs 'f.sizeof' for example.
##
#!
Exit status: 0
Ue_R { Int test() {  Foo(1,3u) f;  Foo(1,3u) p;  f sp . true = 0 cast return } }
Ue_Foo(Int x, Unsigned y) { Bool(UNKNOWN) sp(notready);  Bool(UNKNOWN) b(notready);  Bool(UNKNOWN) c[UNKNOWN](notready);  <NOMAIN> }
Uq_Poo { Bool valb[3](false,false,false);  <NOMAIN> }
##
##      //decl list with array, first c[1], then try c[x]
##      // use separate calling element R
#>R.ulam
  ulam 1;
use Foo;
element R{
  Int test() {
    Foo(1,3u) f;
    Foo(1,Poo.sizeof) p;
    f.sp = (f.sizeof == p.sizeof);
    return 0;
  }
}

#:Foo.ulam
  ulam 1;
use Poo;
element Foo(Int x, Unsigned y) {
  Bool(x) sp;
  Bool(y) b,c[x];
}
##      //bool rtn1 = fms->add("Foo.ulam","ulam 1;\nuse Poo;\nelement Foo(Int x, Int y) {\nBool(x) sp;\nBool(y) b,c;\nInt test() {\nFoo(1,3) f;\n Foo(1,Poo.sizeof) p;\n f.sp = (f.sizeof == p.sizeof);\n return 0;\n }\n }\n");
##      // try without decl list
##      //bool rtn1 = fms->add("Foo.ulam","ulam 1;\nuse Poo;\nelement Foo(Int x, Int y) {\nBool(x) sp;\nBool(y) b;\nInt test() {\nFoo(1,3) f;\n Foo(1,Poo.sizeof) p;\n f.sp = (f.sizeof == p.sizeof);\n return 0;\n }\n }\n");
##
#:Poo.ulam
  ulam 1;
quark Poo {
  Bool valb[3];
  Void reset(Bool b) {
    b = false;
  }
}
#.

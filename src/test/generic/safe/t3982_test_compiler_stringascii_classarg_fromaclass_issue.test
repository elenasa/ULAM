## -*- mode:ulam -*-
#=t3982_test_compiler_stringascii_classarg_fromaclass_issue
##
## gen output: 1 asserts
##  Int Arg: 11
##
#!
Exit status: 0
Ue_HelloWorldString : FString("Hello world") { Bool b1(true);  Int slen(11);  :FString("Hello world")< constant String msg = "Hello world";  typedef Unsigned(8) StringIndex;  typedef Unsigned(5) CharDim;  Unsigned(8) mIndex(0u);  Unsigned(5) mCol(0u);  Unsigned(5) mRow(0u); > Int test() {  System s;  constant String myfstring = "new year 17";  ElementWithString("new year 17") mye;  self slen . 11u cast = s ( self slen . )print . self b1 . self slen . 11 cast == = s ( self b1 . )assert . 0 cast return } }
Uq_FString(String msg) { typedef Unsigned(8) StringIndex;  typedef Unsigned(5) CharDim;  Unsigned(8) mIndex(0);  Unsigned(5) mCol(0);  Unsigned(5) mRow(0);  <NOMAIN> }
Uq_System { <NOMAIN> }
Ue_ElementWithString(String str) : FString(msg) { /* empty class block */ }
##
## informed by String as class arg issue by Dave 01022017; like t3981, except class arg is a func constant
##
#>HelloWorldString.ulam
  ulam 3;
local constant String lstr = "Hello world";
element HelloWorldString : FString(lstr)
{
  Bool b1;
  Int slen;
  Int test() {
    System s;
    constant String myfstring = "new year 17";
    ElementWithString(myfstring) mye;
    slen = mye.msg.lengthof; // =11
    s.print(slen);
    b1 = (slen == 11);
    s.assert(b1);
    return 0;
 }
}

#:ElementWithString.ulam
  ulam 3;
element ElementWithString(String str) : FString(str)
{
}

#:FString.ulam
  ulam 3;
quark FString(String msg) {
  typedef Unsigned(8) StringIndex;
  typedef Unsigned(5) CharDim;
  StringIndex mIndex;  // Glyph within string
  CharDim mCol;        // Site x within glyph, with baseline start at (0,0)
  CharDim mRow;        // Site y within glyph, with baseline start at (0,0)
  virtual Void behave() {
    String s = msg;
  }
}


#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

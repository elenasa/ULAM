## -*- mode:ulam -*-
#=t41214_test_compiler_elementwithclassparameterquarktemplate_Sfirstwdefault
##
##  gen output: (+ interleaved asserts)
##   Int(4) : 7
##   true
##   Int(4) : 3
##   false
##
## FAILED: ILLEGAL_ARGUMENT
#!
Exit status: 7
Ue_T { Int test() {  System sys;  constant Q(true) cqt = { .i = 7 };  S(0xb8,true) s;  sys ( s 7 . )print . sys ( s 7 . 7 == )assert . sys ( s v . b . cast )print . sys ( s v . b . )assert . constant Q(false) cqf = { .i = 3 };  S(0x18,false) sf;  sys ( sf 3 . )print . sys ( sf 3 . 3 cast == )assert . sys ( sf v . b . cast )print . sys ( sf v . b . ! )assert . s 7 . cast return } }
Uq_S(Q(flag) v, Bool bp = false) { constant Int(4) csi = v i .;  <NOMAIN> }
Uq_Q(Bool flag) { Bool b(notready);  Int(4) i(0);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
##    //informed by t41213 (S is parsed first, new parameter order w a default)
##
#>T.ulam
 ulam 3;
use S; //doesn't fail (without use S); fails with use S;
element T{
  Int test(){
    System sys;

    constant Q(true) cqt = { .i = 7};
    S(cqt, true) s;

    sys.print(s.csi);
    sys.assert(s.csi == 7);
    sys.print(s.v.b);
    sys.assert(s.v.b); //true

    //second test just to make sure
    constant Q(false) cqf = { .i = 3};
    S(cqf) sf;
    sys.print(sf.csi);
    sys.assert(sf.csi == 3);
    sys.print(sf.v.b);
    sys.assert(!sf.v.b); //false

    return s.csi; //7
  }
}

#:S.ulam
  ulam 3;
quark S(Q(bp) v, Bool bp = false){
  constant Int(4) csi = v.i; //we're all constants here, right?
}

#:Q.ulam
  ulam 1;
quark Q(Bool flag){
  Bool b = flag;
  Int(4) i;
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

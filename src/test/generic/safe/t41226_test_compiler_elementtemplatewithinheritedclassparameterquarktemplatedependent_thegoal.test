## -*- mode:ulam -*-
#=t41226_test_compiler_elementtemplatewithinheritedclassparameterquarktemplatedependent_thegoal
##
##  gen output: (+ interleaved asserts)
##   Int(4) : 7
##   true
##
#!
Exit status: 7
Ue_T { Int test() {  System sys;  E(true) et;  sys ( et 7 . )print . sys ( et 7 . 7 == )assert . sys ( et v . b . cast )print . sys ( et v . b . )assert . et 7 . cast return } }
Uq_System { <NOMAIN> }
Ue_E(Bool bp) : S(v,bp) { /* empty class block */ }
Uq_S(Q(flag) v, Bool bp) { constant Int(4) csi = v i .;  <NOMAIN> }
Uq_Q(Bool flag) { Bool b(notready);  constant Int(4) i = 7;  <NOMAIN> }
##
##    //informed by t41213, except element E has a dependent ancestor
##    //  also like t41225, except quark S has two class params and no ancestor
##    // see also t41227 for error mismatch with cqt
##
#>T.ulam
 ulam 3;
//use S; //NOT RELEVENT
element T{
  Int test(){
    System sys;

    E(true) et;

    sys.print(et.csi);
    sys.assert(et.csi == 7);
    sys.print(et.v.b);
    sys.assert(et.v.b); //true

    return et.csi; //7
  }
}

#:S.ulam
  ulam 3;
quark S(Q(bp) v, Bool bp) {
  constant Int(4) csi = v.i;
}

#:Q.ulam
  ulam 1;
quark Q(Bool flag){
  Bool b = flag;
  constant Int(4) i = 7;
}


#:E.ulam
  ulam 3;
local constant Q(true) cqt = { };
element E(Bool bp) : S(cqt, bp) { } //the goal!!


#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

## -*- mode:ulam -*-
#=t41005_test_compiler_tmpvarnotdeclared_customarraygencode_issue
##
## gen output: (+ assert)
##   Unsigned Arg: 17
##
#!
Exit status: 0
Ue_A : ConstantLabel("foobar") { :ConstantLabel("foobar")< constant String fstring = "foobar";  :Label< Unsigned(8) mStringIndex(17u);  typedef Unsigned(8) StringIndex; >> ^Label< Unsigned(8) mStringIndex(17u);  typedef Unsigned(8) StringIndex; > Int test() {  System s;  self ( )behave . s ( self mStringIndex . cast )print . s ( self mStringIndex . 17u cast == )assert . 0 cast return } }
Uq_ConstantLabel(String fstring) : Label { :Label< typedef Unsigned(8) StringIndex;  Unsigned(8) mStringIndex( 0u); > <NOMAIN> }
Uq_System { <NOMAIN> }
Uq_Label { typedef Unsigned(8) StringIndex;  Unsigned(8) mStringIndex( 0u);  <NOMAIN> }
##
## informed by Dave issue_2 on 1/17/17: custom array data member assignment (not an aref call)
##
#>A.ulam
  ulam 3;
element A : ConstantLabel("foobar") {
  Int test(){
    System s;
    behave();
    s.print(mStringIndex);
    s.assert(mStringIndex==17u);
    return 0;
  }
}

quark ConstantLabel(String fstring) : Label
{
  virtual ASCII aref(Unsigned idx)
  {
    return fstring[idx];  // Fails ARRAY_INDEX_OUT_OF_BOUNDS if necessary
  }

  virtual Unsigned alengthof()
  {
    return fstring.lengthof;
  }
}

quark Label {
  typedef Unsigned(8) StringIndex;
  StringIndex mStringIndex = 0;  // Glyph within string

  virtual ASCII aref(Unsigned idx);
  Void behave()
  {
    Unsigned effidx = 17;
    Atom & a = self.atomof; //you be like me
    Self & kid = (Self&) a; //refer to the us in the copy
    kid.mStringIndex = (StringIndex) effidx; // This is your byte <--ERROR
  }
}

##      //informed by: t3237_test_compiler_funcdef_whileifnotbreak
##      // using m
##      // new decl var for the forloop
##
##      // test system quark with native overloaded print funcs; assert
#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

## -*- mode:ulam -*-
#=t41529_test_compiler_elementandquark_templateinstanceconstantof
##      gen code output: + interleaved asserts
##          Unsigned Arg: 6
##          Unsigned Arg: 4
##
#!
Exit status: 6
Ue_A : System { Bool b(true);  typedef Parameters(4,true) P4;  :System<> Int test() {  Unsigned cpvar = Parameters(6,true).constantof 6u .;  self b . cpvar 6u cast == = self ( cpvar )print . self ( self b . )assert . self ( Parameters(4,true).constantof 4u . )print . self ( Parameters(4,true).constantof 4u . 4u cast == )assert . 6u cast return } }
Uq_System { <NOMAIN> }
Ue_Parameters(Int x, Bool bx) { constant Unsigned cp = x;  <NOMAIN> }
##
## informed by Dave's question, and t41507, with Parameters as a template class here
##
##
#>A.ulam
  ulam 5;
element A : System {
  Bool b;

  typedef Parameters(4,true) P4;

  Int test(){
    Unsigned cpvar = Parameters(6, true).constantof.cp;
    b = (cpvar == 6u);
    print(cpvar);
    assert(b);
    //immediate element
    print(P4.constantof.cp);
    assert(P4.constantof.cp == 4u);
    return Parameters(6, true).constantof.cp;
  }
}

#:Parameters.ulam
  ulam 5;
element Parameters(Int x, Bool bx) {
   constant Unsigned cp = x;
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

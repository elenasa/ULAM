## -*- mode:ulam -*-
#=t3653_test_compiler_elementandquark_arrayofquarkcaarrays_ish
##
## gen output:
## Int Arg: 4
## assert: arg is 1
## after asserts abort: arg is 1
## Int Arg: 3
## assert: arg is 1
## after asserts abort: arg is 1
## assert: arg is 1
## after asserts abort: arg is 1
##
#!
Exit status: 0
Uq_QW { Int(8) m[4](0,0,0,0);  <NOMAIN> }
Ue_IshE { Bool sp(false);  QW mA[2]( Int(8) m[4](3,0,0,0);  Int(8) m[4](4,0,0,0); );  Int test() {  System s;  self ( 1 cast 0 cast 4 cast )set . s ( self ( 1 cast 0 cast )get . )print . s ( self ( 1 cast 0 cast )get . 4 cast -b 0 cast == )assert . self ( 0 cast 0 cast 3 cast )set . s ( self ( 0 cast 0 cast )get . )print . s ( self ( 0 cast 0 cast )get . 3 cast -b 0 cast == )assert . s ( self ( 1 cast 0 cast )get . 4 cast -b 0 cast == )assert . self ( 1 cast 0 cast )get . 4 cast -b return } }
Uq_System { <NOMAIN> }
##
## informed by Dave ish 1/26/2016, (order matters)
##
#:QW.ulam
  ulam 2;
quark QW {
  Int(8) m[4];
  Int(8)& aref(Int i) { return m[i]; }
  //Void aset(Int i, Int v) { m = (Int(8)) v; }
}

#>IshE.ulam
  ulam 2;
use System;
element IshE {
  Bool sp;
  QW mA[2];
  Int get(Int x, Int y) {
    QW & r = mA[x];
    return r[y];
  }
  Void set(Int x, Int y, Int v) {
    QW & r = mA[x];
    r[y] = (Int(8)) v;
  }
  Int test() {
    System s;
    set(1,0,4);
    s.print(get(1,0));
    s.assert((get(1,0) - 4) == 0);
    set(0,0,3); //clobbers previous 'set'
    s.print(get(0,0));
    s.assert((get(0,0) - 3) == 0);
    s.assert((get(1,0) - 4) == 0);
    return (get(1,0) - 4); // should be 0
  }
}
use QW;

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

## -*- mode:ulam -*-
#=t41070_test_compiler_castquarkrefSelfascond_issue
##   gen code output: (+ assert)
##
#!
Exit status: 0
Ue_Tu : Qbar { Bool b(true);  Int me(1);  :Qbar< Int(3) mq(2); > Int test() {  System s;  Atom aa = self.atomof cast;  self b . self ( aa )func . = s ( self b . )assert . 0 cast return } }
Uq_Qbar { Int(3) mq( 2);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
## informed by Router demo QPort4.ulam, line 85
##
#>Tu.ulam
  ulam 3;
element Tu : Qbar{
  Bool b;
  Int me = 1;
  Int test(){
    System s;

    Atom aa = self.atomof;
    b = func(aa);
    s.assert(b);

    return 0;
  }
}

#:Qbar.ulam
  ulam 2;
quark Qbar {
  Int(3) mq = 2;
  Bool func(Atom aa)
  {
    Bool brtn = false;
    if(aa as Self) {
      Self s = aa;
      brtn = true;
    }
    return brtn;
  }

}


##      // FAILS BAD_CAST (of course it is! we protect against this sort of thing..)
##      //bool rtn1 = fms->add("Tu.ulam", "ulam 1;\n element Tu {\nInt test(){\n Tu t;\nAtom a;\n t = (Tu) a;\n return 0;\n}\n}\n");
##
##      // OK..using 'is' or 'as'
##
##      // test system quark with native overloaded print funcs; assert
#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

## -*- mode:ulam -*-
#=t3583_test_compiler_elementquarkinheritance_selfasbase
## gencode output (interleaved asserts):
## Bool(3) Arg: 0x7 (true)
## Unsigned Arg: 1
## Unsigned Arg: 6
## Int Arg: 6
##
#!
Exit status: 6
Ue_Foo : Soo { Bool first(false);  Int fsz(6);  :Soo< Unsigned(3) sus(4u);  :Coo< Unsigned(3) us(2u);  Bool(3) cb(true); >> ^Coo< Unsigned(3) us(2u);  Bool(3) cb(true); > Int test() {  System s;  Foo f = self cast;  { f Coo as cond { Coo& f;  s ( f cb . )print . s ( f cb . cast )assert . f us . 1u cast = s ( f us . cast )print . s ( f us . cast 1 cast == )assert . s ( 6u )print . s ( true )assert . self fsz . 6u cast = } if s ( false )assert . else } s ( self fsz . )print . self fsz . return } }
Uq_Soo : Coo { Unsigned(3) sus( 4u);  :Coo< Unsigned(3) us( 2u);  Bool(3) cb( true); > <NOMAIN> }
Uq_Coo { Unsigned(3) us( 2u);  Bool(3) cb( true);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
## element-quark inheritance, regular (non-template) with casting
## informed by t3564, t3560, t3536, t3559
##
#>Foo.ulam
  ulam 2;
use Soo;
use System;
element Foo : Soo {
  Bool first;
  Int fsz;
  Int test() {
    System s;
    Foo f = self;
    //Atom f = (Foo) self; //atoms don't work in h/as eval, only gencode
    if(f as Coo)
    {
      s.print(f.cb);
      s.assert(f.cb);
      f.us = 1u;
      s.print(f.us);
      s.assert(f.us == 1);
      s.print(f.sizeof);
      s.assert(f.sizeof == 6);
      fsz = f.sizeof;
    }
    else
      s.assert(false);
    s.print(fsz);
    return fsz;
  }
}

#:Soo.ulam
  ulam 2;
use Coo;
quark Soo : Coo {
  Unsigned(3) sus = 4u; //can't shadow ancestor
}

#:Coo.ulam
  ulam 2;
quark Coo {
  Unsigned(3) us = 2u;
  Bool(3) cb = true;
}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

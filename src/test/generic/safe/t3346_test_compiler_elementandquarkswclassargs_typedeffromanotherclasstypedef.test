## -*- mode:ulam -*-
#=t3346_test_compiler_elementandquarkswclassargs_typedeffromanotherclasstypedef
##      //Constants have explicit types
#!
Exit status: 2
Ue_P { Bool b(false);  Int test() {  constant Unsigned(3) nvar = 3u;  Int(4) arr[3];  arr 2 [] 2 cast = arr 2 [] cast return } }
Uq_Q(Int s) { typedef Unsigned(UNKNOWN) Foo;  <NOMAIN> }
Uq_V { typedef Q(3) Woof;  <NOMAIN> }
##
##      //informed by t3339:  recursive typedefs as named constant type; used for size of array
#>P.ulam
  ulam 1;
use Q;
use V;
element P {
  Bool b;
  Int test() {
    constant V.Woof.Foo nvar = 3u;
    Int(4) arr[nvar];
    arr[2] = 2;
    return arr[2];
  }
}
##
##      // unpack array doesn't work!! define SKIPEVAL in TestCase_EndToEndCompiler to skip eval step.
##      // o.w. slotsNeeded assumes 1.
##      //test: CallStack.cpp:82: MFM::UlamValue MFM::CallStack::loadUlamValueFromSlot(MFM::s32): Assertion `(m_currentFrame + slot < m_frames.size()) && (m_currentFrame + slot >= 0)' failed.
##      //bool rtn1 = fms->add("P.ulam","ulam 1;\nuse Q;\nuse V;\n element P {\nBool b;\nInt test() {\nconstant V.Woof.Foo nvar = 3u;\nInt arr[nvar];\n arr[2] = 2;\n return arr[2];\n}\n}\n");
##
#:Q.ulam
  ulam 1;
quark Q(Int s) {
  typedef Unsigned(s) Foo;
}
#:V.ulam
  ulam 1;
use Q;
quark V {
  typedef Q(3) Woof;
}
#.

## -*- mode:ulam -*-
#=t3684_test_compiler_elementandquark_elementatomoffunccallarg
##
##  gen code output: (3 asserts)
##
#!
Exit status: 0
Ue_A : QW { Bool b(true);  Bool c(false);  Bool d(true);  :QW<> Int test() {  System s;  self b . self ( self.atomof )func . = s ( self b . )assert . self d . self ( self cast )func . = s ( self d . )assert . Atom a;  self c . self ( a cast )func . = s ( self c . ! )assert . 0 cast return } }
Uq_System { <NOMAIN> }
Uq_QW { <NOMAIN> }
##
## Dave requested a way to get default values for Self (within a quark);
## a loophole, since a quark would be an undefined atom, but as a ref,
## its done (t3679).
## As of ulam-3, loophole no longer needed; now it is a runtime check,
## rather than compile time restriction.
##
#>A.ulam
  ulam 2;
use System;
use QW;
element A : QW {
  Bool b, c, d;
  Int test(){
    System s;
    b = func(self.atomof);
    s.assert(b);

    d = func((Atom&) self); //another way
    s.assert(d);

    Atom a;
    c = func(a);
    s.assert(!c);
    return 0;
  }
}

#:QW.ulam
  ulam 2;
quark QW {
  Bool func(Atom& aarg)
  {
    return (aarg is Self);
  }
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

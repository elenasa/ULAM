## -*- mode:ulam -*-
#=t41288_test_compiler_typedefanotherclasssarrayofquarks_issue
##
## gen output: 1 assert
#!
Exit status: 0
Ue_Foo { Int test() {  System s;  typedef C2D C2D2[2];  C2D pair[2];  C2D xy = xy ( 1 cast 2 cast )Self .;  pair 0 [] xy = s ( pair 0 [] m_width . 1 cast == )assert . 0 cast return } }
Uq_System { <NOMAIN> }
Uq_Other { typedef C2D C2D2[2];  <NOMAIN> }
Uq_C2D { Int(4) m_width(0);  Int(4) m_height(0);  <NOMAIN> }
##
## informed by t41287; NodeTypeDescriptor assertion hit
##  (see t41287,t41289-t41291 for other ones that work.)
## Use to fail as ./Foo.ulam:6:9: ERROR: Invalid Type: C2D used with [].
##
#>Foo.ulam
  ulam 4;
element Foo {
  Int test() {
    System s;
    typedef Other.C2D2 C2D2;
    C2D2 pair;
    C2D xy(1,2);
    pair[0] = xy;
    s.assert(pair[0].m_width==1);
    return 0;
  }
}

#:Other.ulam
  ulam 4;
//use C2D;
quark Other{
  typedef C2D C2D2[2];
}

#:C2D.ulam
  ulam 1;
quark C2D {
  Int(4) m_width;
  Int(4) m_height;
  Self(Int x, Int y) {
    m_width = (Int(4)) x;
    m_height = (Int(4)) y;
    return;
  }
  Void init() {
    m_width = (Int(4)) 9;
    m_height = 4;
    return; /* event window overload */
  }
  Int getIndex(Int a, Int b){
    return ((m_height-b) * m_width + (m_height-a));
  }
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.

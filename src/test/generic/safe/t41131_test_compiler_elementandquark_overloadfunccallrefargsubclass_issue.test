## -*- mode:ulam -*-
#=t41131_test_compiler_elementandquark_overloadfunccallrefargsubclass_issue
##
## gen output: (+ assert)
##    Int Arg: 1
##
#!
Exit status: 0
Ue_R { Bool b(false);  Int test() {  Fail f;  f ( 1 cast )fail . 0 cast return } }
Uq_Fail { System s();  <NOMAIN> }
Un_StringByteSource : ByteSource { String m_string( "");  Unsigned m_index( 0u);  :ByteSource<> <NOMAIN> }
Uq_ByteSource { <NOMAIN> }
Uq_System { <NOMAIN> }
##
## Dave ish 7/15/2017 (see also error/t41132,3)
##./System.ulam:10:1: ERROR: Class: StringByteSource is not a numeric type and cannot be safely cast to an Int.
##./System.ulam:10:1: ERROR: Class: StringByteSource is not a numeric type and cannot be safely cast to Bits.
##Unrecoverable Program Type Label FAILURE.
##
#>R.ulam
  ulam 2;
element R {
  Bool b;

  Int test(){
    //StringByteSource sbs; not necessary!
    Fail f;
    f.fail(1);
    return 0;
  }
}

#:StringByteSource.ulam
  ulam 3;
transient StringByteSource : ByteSource {
  String m_string = "";
  Unsigned m_index = 0;

  Self(String s) {
    m_string = s;
  }

  @Override
  Int readByte() {
    if (m_index >= m_string.lengthof) return -1;
    return m_string[m_index++];
  }
}

#:ByteSource.ulam
  ulam 3;
quark ByteSource {
  virtual Int readByte() ;
}

#:Fail.ulam
  ulam 2;
quark Fail {
  System s;
  Void fail() { s.assert(false); }
  Void fail(Int code) {s.print(code); s.assert(true); /*true for testing purposes only!!!*/ }
  Void fail(Bits bits) { fail((Int) bits); }
  Void fail(ByteSource & bs) { fail(bs.readByte()); }
  //Void fail(ByteSource bs) { fail(bs.readByte()); } /* can't use abstract class as argument type */
  Void fail(String string) {
    StringByteSource sbs(string); //ByteSource subclass.
    fail(sbs);
  }
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

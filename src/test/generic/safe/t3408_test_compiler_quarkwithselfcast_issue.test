## -*- mode:ulam -*-
#=t3408_test_compiler_quarkwithselfcast_issue
##    gen code output (interleaved asserts):
##        Int(3) Arg: 0x0
##        Int(4) Arg: 0x0
##        Int(3) Arg: 0x0
##        Int(4) Arg: 0x0
##        Int(3) Arg: 0x1
##        Int(4) Arg: 0x2
##        Int(3) Arg: 0x1
##        Int(4) Arg: 0x2
##        Int(3) Arg: 0x2
##        Int(4) Arg: 0x3
##        Int(3) Arg: 0x2
##        Int(4) Arg: 0x2
##
#!
Exit status: 0
Ue_Foo : IntXY(3u,4u) { :IntXY(3u,4u)< Int(3) x(2);  Int(4) y(2);  constant Unsigned xbits = 3u;  constant Unsigned ybits = 4u;  typedef Int(3) XCoord;  typedef Int(4) YCoord; > Int test() {  System s;  Foo m;  s ( self x . )print . s ( self y . )print . s ( self x . 0 cast == )assert . s ( self y . 0 cast == )assert . s ( m x . )print . s ( m y . )print . s ( m x . 0 cast == )assert . s ( m y . 0 cast == )assert . m self ( 1 cast 2 cast )make . = s ( m x . )print . s ( m y . )print . s ( m x . 1 cast == )assert . s ( m y . 2 cast == )assert . m self ( 1 cast 2 cast )makeAs . = s ( m x . )print . s ( m y . )print . s ( m x . 1 cast == )assert . s ( m y . 2 cast == )assert . m self ( 2 cast 3 cast )fromXY . cast = s ( m x . )print . s ( m y . )print . s ( m x . 2 == )assert . s ( m y . 3 cast == )assert . self ( 2 cast 2 cast )init . s ( self x . )print . s ( self y . )print . s ( self x . 2 == )assert . s ( self y . 2 cast == )assert . 0 cast return } }
Uq_IntXY(Unsigned xbits, Unsigned ybits) { typedef Int(UNKNOWN) XCoord;  typedef Int(UNKNOWN) YCoord;  Int(UNKNOWN) x(notready);  Int(UNKNOWN) y(notready);  <NOMAIN> }
Uq_System { <NOMAIN> }
#>Foo.ulam
  ulam 1;
element Foo : IntXY(3u,4u){
  Int test() {
    System s;
    Foo m;

    s.print(x);
    s.print(y);
    s.assert(x==0);
    s.assert(y==0);

    s.print(m.x);
    s.print(m.y);
    s.assert(m.x==0);
    s.assert(m.y==0);

    m = make(1,2); //works!!
    s.print(m.x);
    s.print(m.y);
    s.assert(m.x==1);
    s.assert(m.y==2);

    m = makeAs(1,2);
    s.print(m.x);
    s.print(m.y);
    s.assert(m.x==1);
    s.assert(m.y==2);

    m = (Foo) fromXY(2,3);
    s.print(m.x);
    s.print(m.y);
    s.assert(m.x==2);
    s.assert(m.y==3);

    init(2,2);
    s.print(self.x);
    s.print(self.y);
    s.assert(self.x==2);
    s.assert(self.y==2);

    return 0;
  }

  Self makeAs(Int x, Int y) {
    Atom a = self;
    if(a as Self){
      a.init(x,y);
    }
    // causes makeAs Case to Fail!
    //if(a is Self)
    //{
    //  self = (Self) a;
    //  return self;
    // }
    return (Self) a;
  }

  Self make(Int x, Int y) {
    Self ret;
    ret.init(x,y);
    return ret;
   }

}

#:IntXY.ulam
  ulam 1;
quark IntXY(Unsigned xbits, Unsigned ybits) {
  typedef Int(xbits) XCoord;
  typedef Int(ybits) YCoord;
  XCoord x;
  YCoord y;
  Atom fromXY(Int x, Int y) {
    init(x,y);
    return self.atomof; //atom; //self;
  }

  Void init(Int ax, Int ay) {
    x = (XCoord) ax;
    y = (YCoord) ay;
    if(x == x.minof) ++x;
    if(y == y.minof) ++y;
  }
}
#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

## -*- mode:ulam -*-
#=t3897_test_compiler_unpackedconstantarray_asfuncarg
##
## gen output: (+ assert)
##      Int Arg: 9
##
#!
Exit status: 9
Ue_A { Int nineth(9);  typedef Int BigSite[10];  constant Int cSite[10] = { 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9 };  Int test() {  System s;  Int site2[10] = cSite;  self nineth . self ( cSite )func . = s ( self nineth . )print . s ( self nineth . 9 cast == )assert . self nineth . return } }
Uq_System { <NOMAIN> }
##
## informed by 3896, passing a constant array as argument to func
##
#>A.ulam
  ulam 3;
use System;
element A {
  Int nineth;
  typedef Int BigSite[10];
  constant BigSite cSite = { 0,1,2,3,4,5,6,7,8,9 };

  Int func(BigSite sarr) {
    return sarr[9];
  }

  Int test(){
    System s;
    BigSite site2 = cSite;
    nineth = func(cSite); //fails (bug in NodeConstantArray::eval missing prolog)
    s.print(nineth);
    s.assert(nineth == 9);
    return nineth;
  }
}
##
##      //bool rtn1 = fms->add("A.ulam","element A {\ntypedef Int BigSite[10];\nInt test(){\n BigSite site, site2; site = site2;\n return 2;\n }\n }\n");

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

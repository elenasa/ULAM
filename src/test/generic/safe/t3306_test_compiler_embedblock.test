## -*- mode:ulam -*-
#=t3306_test_compiler_embedblock
##      /* gen code output:
##	 Int Arg: 4
##	 Int Arg: 5
##	 Int Arg: 8
##	 assert: arg is 1
##	 after assert's abort: arg is 1
##	 Int Arg: 5
##       */
##      // constant folded: 3 1 +b, and 2 4 *,
##
#!
Exit status: 5
Ue_A { System s();  Unary(6) sp(0u);  Bool b(true);  Int j(5);  Int i(5);  Int test() {  self j . 4 cast = self s . ( self j . )print . { self j . self j . 1 cast +b = self s . ( self j . )print . Int j;  j 8 cast = self s . ( j )print . self b . j 8 cast == = self s . ( self b . )assert . } self i . self j . = self s . ( self i . )print . self j . return } }
Uq_System { <NOMAIN> }
##      //requires new grammar: tests scope
##
##      // includes statements after embedded block; use of variable
##      // inside block defined outside then redefined inside;
##
#>A.ulam
  ulam 1;
use System;
element A{
  System s;
  Unary(6) sp;
  Bool b;
  Int j;
  Int test () {
    j = 1 + 3;
    s.print(j);
    {
      j = j + 1;
      s.print(j);
      Int j;
      j = 2 * 4;
      s.print(j);
      b = (j == 8);
      s.assert(b);
    }
    i = j;
    s.print(i);
    return j;
  }
  Int i;
}

##      // test system quark with native overloaded print funcs; assert
#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

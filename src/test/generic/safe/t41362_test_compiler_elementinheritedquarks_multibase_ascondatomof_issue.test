## -*- mode:ulam -*-
#=t41362_test_compiler_elementinheritedquarks_multibase_ascondatomof_issue
##
## gen output:
##   String(1) Arg: "Trying 0"
##   String(2) Arg: "CouldSwap 0"
##
#!
Exit status: -11
Uq_QBond +Fail { typedef Unsigned(6) SN;  Bool(7) sp7(false);  +Fail<> ^SystemU3<> ^System<> <NOMAIN> }
Uq_Fail +SystemU3 { +SystemU3<> ^System<> <NOMAIN> }
Uq_EventWindow { typedef Unsigned(6) SiteNum;  typedef Unsigned(3) Symmetry;  <NOMAIN> }
Uq_Bond(Bits cTYPE_TAG, Bool cBOND_SIDE, Unary(4) cMAX_BOND_LENGTH = 15u) : Fail +BondUtils { typedef holder SN;  typedef Bond(cTYPE_TAG,cBOND_SIDE,cMAX_BOND_LENGTH) MatingBond;  constant Unsigned cBOND_BITS = cMAX_BOND_LENGTH 4 == ?  6u :  cMAX_BOND_LENGTH 3 == ?  5u :  cMAX_BOND_LENGTH 2 == ?  4u :  3u;  typedef Unsigned(UNKNOWN) BondSite;  Unsigned(UNKNOWN) mBondSite(notready);  :Fail<> +BondUtils< EventWindow ew( typedef Unsigned(6) SiteNum;  typedef Unsigned(3) Symmetry; );  typedef Unsigned(6) SN; > <NOMAIN> }
Uq_BondUtils { EventWindow ew( typedef Unsigned(6) SiteNum;  typedef Unsigned(3) Symmetry; );  typedef Unsigned(6) SN;  <NOMAIN> }
Uq_Bondo : QBond +SystemU3 { EventWindow ew( typedef Unsigned(6) SiteNum;  typedef Unsigned(3) Symmetry; );  typedef Unsigned(6) SN;  :QBond< typedef Unsigned(6) SN;  Bool(7) sp7(false); > +SystemU3<> ^Fail<> ^System<> <NOMAIN> }
Uq_SystemU3 : System { :System<> <NOMAIN> }
Ue_MidBondo : Bondo +Bond(0xb0d0,true,3) +Bond(0xb0d0,false,3) { :Bondo< typedef Unsigned(6) SN;  EventWindow ew( typedef Unsigned(6) SiteNum;  typedef Unsigned(3) Symmetry; );  :QBond< typedef Unsigned(6) SN;  Bool(7) sp7(false);  +Fail< +SystemU3< :System<>> ^System<>> ^SystemU3< :System<>> ^System<>> +SystemU3< :System<>> ^Fail< +SystemU3< :System<>> ^System<>> ^System<>> +Bond(0xb0d0,true,3)< typedef Unsigned(6) SN;  constant Bits cTYPE_TAG = 45264u;  constant Bool cBOND_SIDE = true;  constant Unary(4) cMAX_BOND_LENGTH = 7u;  typedef Bond(0xb0d0,false,3) MatingBond;  constant Unsigned cBOND_BITS = 5u;  typedef Unsigned(5) BondSite;  Unsigned(5) mBondSite(0u);  :Fail< +SystemU3< :System<>> ^System<>> +BondUtils< typedef Unsigned(6) SN;  EventWindow ew( typedef Unsigned(6) SiteNum;  typedef Unsigned(3) Symmetry; ); > ^SystemU3< :System<>> ^System<>> +Bond(0xb0d0,false,3)< typedef Unsigned(6) SN;  constant Bits cTYPE_TAG = 45264u;  constant Bool cBOND_SIDE = false;  constant Unary(4) cMAX_BOND_LENGTH = 7u;  typedef Bond(0xb0d0,true,3) MatingBond;  constant Unsigned cBOND_BITS = 5u;  typedef Unsigned(5) BondSite;  Unsigned(5) mBondSite(0u);  :Fail< +SystemU3< :System<>> ^System<>> +BondUtils< typedef Unsigned(6) SN;  EventWindow ew( typedef Unsigned(6) SiteNum;  typedef Unsigned(3) Symmetry; ); > ^SystemU3< :System<>> ^System<>> ^QBond< typedef Unsigned(6) SN;  Bool(7) sp7(false);  +Fail< +SystemU3< :System<>> ^System<>> ^SystemU3< :System<>> ^System<>> ^BondUtils< typedef Unsigned(6) SN;  EventWindow ew( typedef Unsigned(6) SiteNum;  typedef Unsigned(3) Symmetry; ); > ^Fail< +SystemU3< :System<>> ^System<>> ^SystemU3< :System<>> ^System<> Int test() {  System s;  self ( )behave . 0 cast return } }
Uq_System { <NOMAIN> }
Uq_C2D { Int(6) m_width( 9);  Int(6) m_height( 4);  <NOMAIN> }
##
## informed by Dave ish 10/19/19; cannot recreate with this simplified test.
## nor with this more complicated version. what is missing?
## eval fails, but gen code is fine.
##
#>QBond.ulam
 ulam 5;
quark QBond + Fail {
  typedef EventWindow.SiteNum SN;

  Bool(7) sp7;
  virtual Int couldMoveToAll(SN dest);

  Int couldSwap(Atom& obj1, Atom& obj2) {
    SN dest = 1;
    if(couldMaybeMoveTo(obj1,dest) > 0)
      return dest;
    return 0;  // Otherwise good to go here
  }

  Int couldMaybeMoveTo(Atom& obj, SN dest)
  {
    Int rtni,rtnj;
    if(obj as QBond)
      rtni = obj.couldMoveToAll(dest); //fails

    if(obj is QBond) //works, should be same
    {
      QBond & qbref = (QBond &) obj;
      rtnj = qbref.couldMoveToAll(dest);
    }

    return rtni;
  }
}

#:Bond.ulam
  ulam 3;
quark Bond(Bits cTYPE_TAG, Bool cBOND_SIDE, Unary(4) cMAX_BOND_LENGTH=4) : Fail +BondUtils {
    typedef EventWindow.SiteNum SN;
    typedef Bond(cTYPE_TAG,!cBOND_SIDE,cMAX_BOND_LENGTH) MatingBond;

    constant Unsigned cBOND_BITS =
      cMAX_BOND_LENGTH == 4 ? 6u :
      (cMAX_BOND_LENGTH == 3 ? 5u :
       (cMAX_BOND_LENGTH == 2 ? 4u :
	3u ));
    typedef Unsigned(cBOND_BITS) BondSite;

    BondSite mBondSite;
}

#:Bondo.ulam
  ulam 5;
quark Bondo : QBond + SystemU3{
  EventWindow ew;
  typedef EventWindow.SiteNum SN;

  Void doEvent() {
    SN candidate = 0; //(SN) between(1,24);
    print("Trying 0");
    Atom & catom = ew[candidate];
    if(couldSwap(self.atomof, catom) > 0)
    {
      print("CouldSwap 0");
    }
  }

  Void behave() {
    doEvent();
  }
}

#:MidBondo.ulam
  ulam 5;

local typedef Bond(0xb0d0,true,3u) BondoFrom;
local typedef Bond(0xb0d0,false,3u) BondoTo;

element MidBondo : Bondo + BondoFrom + BondoTo
{
  Int test()
  {
    System s;
    behave(); //same problem!! so simple too..
    return 0;
  }


  @Override
  Int couldMoveToAll(SN dest) {
    //return minInt(self.BondoFrom.couldMove(obj),
    //            self.BondoTo.couldMove(obj));
    return 1;
  }
}

#:BondUtils.ulam
  ulam 5;
quark BondUtils {
  Int minInt(Int x, Int y) {
    return (x < y) ? x : y;
  }

  EventWindow ew;
  typedef EventWindow.SiteNum SN;
  Unsigned siteDistance(SN sn1, SN sn2) {
    //    C2D c1(1,2); // = ew.getCoord(sn1);
    //C2D c2(2,4); // = ew.getCoord(sn2);
    return 4; //c1.manhattanDistance(c2);
  }

  SN oppositeSN(SN n) {
    if (n == 0) return 0;
    return n; //ew.getSiteNumberRaw(-ew.getCoordRaw(n));
  }

  SN getSN(C2D c) {
    return 0; //ew.getSiteNumberRaw(c);
  }
}

#:C2D.ulam
  ulam 1;
quark C2D {
  Int(6) m_width = 9;
  Int(6) m_height = 4;
  Void init(Int x, Int y) {
    m_width = (Int(6)) x;
    m_height = (Int(6)) y;
    return;
  }
  Int getIndex(Int a, Int b){
    return ((m_height-b) * m_width + (m_height-a));
  }
}

#:EventWindow.ulam
  ulam 3;
quark EventWindow{
  typedef Unsigned(6) SiteNum;
  typedef Unsigned(3) Symmetry;

  Atom& aref(Int index) native;
  SiteNum getSiteNumber(Atom& ar, Symmetry sym){
    return 1; //stub
  }
}

#:Fail.ulam
  ulam 5;
quark Fail + SystemU3 {
  Void fail() { assert(false); }
  Void fail(Int code) {print(code); assert(true); /*true for testing purposes only!!!*/ }
  Void fail(Bits bits) { fail((Int) bits); }
  Void fail(String string) {
    print(string);
    fail();
  }
}

#:SystemU3.ulam
  ulam 3;
quark SystemU3 : System {
  Void print(String s) native;
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

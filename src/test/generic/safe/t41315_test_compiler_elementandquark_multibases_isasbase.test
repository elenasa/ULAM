## -*- mode:ulam -*-
#=t41315_test_compiler_elementandquark_multibases_isasbase
##
## gen output: (w interleaved asserts )
## Int Arg: 412
## Int Arg: 412
## Int Arg: 410
## Int Arg: 410
## Int Arg: 311
## Int Arg: 311
##
#!
Exit status: 0
Ue_E4 : QBase3 +QBase2 +QBase1 { Int m_c4(412);  Int m_a4(410);  Bool m_isqb1(true);  Bool m_b4c(true);  Bool m_b4a(true);  Bool m_b4b(true);  typedef QBase2 QB2;  :QBase3< Bool m_b3(false);  :QBase1< Bool m_b1(false); >> +QBase2< Bool m_b2(false); > +QBase1< Bool m_b1(false); > Int test() {  System s;  typedef QBase1 QB1;  Atom a = E4.instanceof cast;  self m_isqb1 . a QBase1 is = s ( self m_isqb1 . )assert . { a QBase2 as cond { QBase2& a;  self m_c4 . a ( )vfuncc . = s ( self m_c4 . )print . s ( self m_c4 . 412 cast == )assert . } if } QBase2& qb2ref = a cast;  Int c4 = qb2ref ( )vfuncc .;  s ( c4 )print . s ( c4 self m_c4 . == )assert . self m_b4c . c4 self m_c4 . == = { a QBase1 as cond { QBase1& a;  self m_a4 . a ( )vfunca . = s ( self m_a4 . )print . s ( self m_a4 . 410 cast == )assert . } if } QBase1& qb1ref = a cast;  Int a4 = qb1ref ( )vfunca .;  s ( a4 )print . s ( a4 self m_a4 . == )assert . self m_b4a . a4 self m_a4 . == = Int mb4;  { a QBase1 as cond { QBase1& a;  mb4 a ( )vfuncb . = s ( mb4 )print . s ( mb4 311 cast == )assert . } if } Int b4 = qb1ref ( )vfuncb .;  s ( b4 )print . s ( b4 mb4 == )assert . self m_b4b . b4 mb4 == = 0 cast return } }
Uq_QBase3 : QBase1 { Bool m_b3(false);  :QBase1< Bool m_b1(false); > <NOMAIN> }
Uq_QBase2 { Bool m_b2(false);  <NOMAIN> }
Uq_QBase1 { Bool m_b1(false);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
##       informed by t41311; here, compare 'as' and refs of base classes;
##       effective-self does not change.
##
#>E4.ulam
  ulam 5;
element E4 : QBase3 +QBase2 +QBase1 {
  Int m_c4;
  Int m_a4;
  Bool m_isqb1;
  Bool m_b4c, m_b4a, m_b4b;

  virtual Int vfuncc() { return 412; }
  virtual Int vfunca() { return 410; }
  virtual Void behave() { }
  typedef QBase2 QB2;

  Int test()
  {
    System s;
    typedef Super.Super QB1;

    Atom a = E4.instanceof;
    m_isqb1 = (a is QB1);
    s.assert(m_isqb1);

    if(a as QB2)
    {
      m_c4 = a.vfuncc(); //412
      s.print(m_c4);
      s.assert(m_c4==412);
    }

    QBase2& qb2ref = (QBase2&) a;
    Int c4 = qb2ref.vfuncc();
    s.print(c4);
    s.assert(c4==m_c4);
    m_b4c = (c4==m_c4);

    //which QB1?? E4 override.
    if(a as QB1)
    {
      m_a4 = a.vfunca(); //410
      s.print(m_a4);
      s.assert(m_a4==410);
    }

    QBase1& qb1ref = (QBase1&) a;
    Int a4 = qb1ref.vfunca();
    s.print(a4);
    s.assert(a4==m_a4);
    m_b4a = (a4==m_a4);

    //which QB1?? QBase3s..the more specific.
    Int mb4;
    if(a as QB1)
    {
      mb4 = a.vfuncb(); //311
      s.print(mb4);
      s.assert(mb4==311);
    }

    Int b4 = qb1ref.vfuncb();
    s.print(b4);
    s.assert(b4==mb4);
    m_b4b = (b4==mb4);
    return 0;
  }
}

#:QBase1.ulam
    ulam 4;
quark QBase1 {
  Bool m_b1;
  Void funcNotVirtualSoIrrelevantHere() { }
  virtual Int vfuncb() { return 111; }   //ambiguous (see t41305); ok now..
  virtual Int vfunca() { m_b1 = true; return 110; }
}

#:QBase2.ulam
  ulam 4;
quark QBase2 {
  Bool m_b2;
  //  typedef Unsigned(8) ARGB[4]; INHERITED!!
  virtual ARGB getColor(Unsigned s) { return super.getColor(s); }
  //virtual Int vfunca() { return 210; } //ambiguous (see t41312)
  virtual Int vfuncc() { m_b2 = true; return 212; }
}

#:QBase3.ulam
  ulam 4;
quark QBase3 : QBase1 {
  Bool m_b3;
  virtual Int vfuncb() { return 311; }
  virtual Int vfunca() { m_b3 = true; return 310; }
}


#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.

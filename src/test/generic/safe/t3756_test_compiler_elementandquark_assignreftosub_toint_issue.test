## -*- mode:ulam -*-
#=t3756_test_compiler_elementandquark_assignreftosub_toint_issue
#!
Exit status: -11
Ue_A : QW { Bool b(false);  Bool c(false);  :QW< Bool bw(false);  :Qbase< Unary(5) m_five(0u); >> ^Qbase< Unary(5) m_five(0u); > Int test() {  System s;  Qbase& qref = self cast;  A apple = qref cast;  A apple3 = qref.atomof cast;  A& appleref = qref cast;  Atom& atr = qref.atomof;  Atom a = qref.atomof cast;  0 cast return } }
Uq_QW : Qbase { Bool bw(false);  :Qbase< Unary(5) m_five(0); > <NOMAIN> }
Uq_System { <NOMAIN> }
Uq_Qbase { Unary(5) m_five(0);  <NOMAIN> }
##
## Dave requested a way to get default values for Self (within a quark);
## a loophole, since a quark would be an undefined atom, but as a ref, its done (t3679)
## As of ulam-3, loophole no longer needed; now it is a runtime check, rather than compile time restriction.
##
## informed by t3689: bug fixed that required a cast because toInt existed (apple = qref)
##
#>A.ulam
  ulam 2;
element A : QW {
  Bool b, c;
  Int test(){
    System s;

    //case 1: CastAsDecendentElement (to be ref)
    Qbase& qref = self;

    //case 2: (init) genCodeCastAncestorQuarkAsSubElement
    //./A.ulam:11:16: ERROR: Cannot explicitly cast Qbase& to type: A.
    A apple = (A) qref; //unused var (qref read)

    //case 3: (assign) genCodeCastAncestorQuarkAsSubElement
    //./A.ulam:15:15: ERROR: Cannot explicitly cast Qbase& to type: A.
    ////A apple2;
    ////apple2 = (A) qref; //unused var (qref read)

    //case 4: Atom To Element
    A apple3 = (A) qref.atomof;

    //case 5: (to ref) genCodeCastAncestorQuarkAsSubElement
    A& appleref = (A&) qref; //unused var (qref read); can't use .atomof

    //case 6: AtomRef to AtomRef
    Atom & atr = qref.atomof;

    //case 7: AtomRef to Atom
    Atom a = qref.atomof;
    return 0;
  }
}

#:QW.ulam
  ulam 2;
quark QW : Qbase{
  Bool bw;
  Self func()
  {
    Atom a = self.atomof;
    Self& sra = (Self&) a; //immediate quark with current values
    return sra;
  }
}

#:Qbase.ulam
  ulam 2;
quark Qbase{
  Unary(5) m_five;
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

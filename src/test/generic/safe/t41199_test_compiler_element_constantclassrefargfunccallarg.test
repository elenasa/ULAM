## -*- mode:ulam -*-
#=t41199_test_compiler_element_constantclassrefargfunccallarg
##
##  gen output: (+ interleaved asserts)
##      Unary(3) Arg: 0x2
##      Bool(3) Arg: 0x0 (false)
##      Unary(3) Arg: 0x3
##      Bool(3) Arg: 0x7 (true)
#!
Exit status: 2
Ue_Foo { System s();  Int(4) m_i(0);  QW m_q( Unary(3) mun(2u); );  Int test() {  Foo f;  QW& qref = f m_q . cast;  Bool b = self ( qref cast )check .;  self s . ( f m_q . mun . )print . self s . ( f m_q . mun . cast 2u == )assert . self s . ( b cast )print . self s . ( b ! )assert . QW qw;  Bool bqw = self ( qw cast )check .;  self s . ( qw mun . )print . self s . ( qw mun . cast 3u == )assert . self s . ( bqw cast )print . self s . ( bqw )assert . f m_q . mun . cast return } }
Uq_System { <NOMAIN> }
Uq_QW { Unary(3) mun( 7u);  <NOMAIN> }
##
## informed by t3801, except with constant ref function parameter
##
#>Foo.ulam
  ulam 2;
use System;
element Foo {
  System s;
  Int(4) m_i;
  QW m_q = { .mun = 2u };
  Bool check(constant QW& qok) {
    if (qok.mun == 3u)
      return true;
    return false;
  }

  Int test() {
    Foo f; //local storage
    QW & qref = f.m_q; //what does gencode look like?
    Bool b = check(qref);
    s.print(f.m_q.mun); //should be =2
    s.assert(f.m_q.mun == 0x2);
    s.print(b);
    s.assert(!b);

    QW qw; //default vvalue
    Bool bqw = check(qw);
    s.print(qw.mun); //should be =3 default
    s.assert(qw.mun == 0x3);
    s.print(bqw);
    s.assert(bqw);
    return f.m_q.mun; //==2
  }
}

#:QW.ulam
  ulam 2;
quark QW {
  Unary(3) mun = 0x3;
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

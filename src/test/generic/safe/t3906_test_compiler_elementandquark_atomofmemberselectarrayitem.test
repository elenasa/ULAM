## -*- mode:ulam -*-
#=t3906_test_compiler_elementandquark_atomofmemberselectarrayitem
##      gen code output: 1 assert
##
#!
Exit status: -11
Ue_R { Int test() {  System s;  T tr[2];  tr 1 [] m_earr 2 [] . b . true = Atom me = tr 1 [] m_earr 2 [] ..atomof cast;  { me A as cond { A& me;  s ( me b . )assert . } if } 0 cast return } }
Uq_System { <NOMAIN> }
Un_T { Bool b(false);  A m_earr[3]( Bool b(false);  QW m_q[4]( Unary(3) m_y(0); ), ( Unary(3) m_y(0); ), ( Unary(3) m_y(0); ), ( Unary(3) m_y(0); ); ), ( Bool b(false);  QW m_q[4]( Unary(3) m_y(0); ), ( Unary(3) m_y(0); ), ( Unary(3) m_y(0); ), ( Unary(3) m_y(0); ); ), ( Bool b(false);  QW m_q[4]( Unary(3) m_y(0); ), ( Unary(3) m_y(0); ), ( Unary(3) m_y(0); ), ( Unary(3) m_y(0); ); );  <NOMAIN> }
Ue_A { Bool b(false);  QW m_q[4]( Unary(3) m_y(0); ), ( Unary(3) m_y(0); ), ( Unary(3) m_y(0); ), ( Unary(3) m_y(0); );  <NOMAIN> }
Uq_QW { Unary(3) m_y(0);  <NOMAIN> }
##
## informed by t3905, except with lots of array items
##
#>R.ulam
  ulam 3;
element R {
   Int test(){
    System s;
    T tr[2];
    tr[1].m_earr[2].b = true;
    Atom me = tr[1].m_earr[2].m_q[3].atomof;

    if(me as A)
      s.assert(me.b);
    return 0;
  }
}

#:T.ulam
  ulam 2;
transient T {
  Bool b;
  A m_earr[3];
}

#:A.ulam
  ulam 2;
element A {
  Bool b;
  QW m_q[4];
}

#:QW.ulam
  ulam 2;
quark QW {
  Unary(3) m_y;
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.

ulam 1;

use Empty;

quark AtomUtils {

  typedef Unsigned(16) Type;

  /** Get the type of Atom a.

      \returns The type number of a, greater than or equal to 0, or -1
      if a has a corrupted or unknown type
   */
  Int getType(Atom a) native;

  /** Determine if '.atomof' could be performed on the given ref without failing.

      \returns true iff ref refers to something that has a storage
      atom associated with it, false otherwise.
  */
  Bool hasAtomof(UrSelf& ref) native;

  Type getValidType(Atom a)
  {
    Fail f;
    Int i = getType(a);
    if (i < 0) f.fail();
    return (Type) i;
  }

  /** Get the type of the empty site

      \returns The type number corresponding to an empty site
   */
  Type getEmptyType() {
    Empty a;
    return getValidType((Atom) a);
  }

  /** Test if an Atom is an empty atom

      \returns true iff a is an empty atom.
   */
  Bool isEmpty(Atom a) {
    return getType(a)==getEmptyType();
  }

  /** Build a default atom of type t.  If au is a AtomUtils and t is a
      legal type, than the expression
      <code> (t == au.getType(au.new(t)) </code>
      will be true.

      \returns an instance of Empty if t is negative or an unknown or
      illegal type value, otherwise returns a default atom of the
      given type.
   */
  Atom new(Int t) native;

  /**
     Read fieldLength (from 0 to 32) contiguous bits starting at
     stateIndex.
   */
  Bits read(Atom a, Unsigned stateIndex, Unsigned fieldLength) native;

  /**
     Return a copy of \c a, modified so that the fieldLength (from 0
     to 32) contiguous bits starting at stateIndex contain the
     rightmost fieldLength bits of \c bits
   */
  Atom writeCopy(Atom a, Bits bits, Unsigned stateIndex, Unsigned fieldLength) native;


}

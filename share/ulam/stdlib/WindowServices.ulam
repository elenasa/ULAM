ulam 1;

use Empty;
use EventWindow;
use MDist;
use Random;
use DebugUtils;
use AtomUtils;
use Fail;

/**
   A simple scanning framework to help automate common event window
   search and selection tasks.

   \author Dave Ackley
   \symbol WS
   \color #000
   \license lgpl
   \placeable no
*/
element WindowServices {
  // Typedefs
  typedef Unsigned(3) Radius;

  typedef Unsigned(6) Index;
  typedef Index IndexArray[4];

  typedef Unsigned(8) Count;
  typedef Count CountArray[4];

  typedef Unsigned(2) Slot;
  typedef EventWindow.SiteNum SiteNum;

  // Utilities
  MDist mdist;
  Random random;
  DebugUtils debug;
  EventWindow ew;
  Fail fail;

  // Constants
  constant Int cNO_SITES_HIT =        -1;
  constant Int cEMPTY_SITES_HIT =     -2;
  constant Int cNONEMPTY_SITES_HIT =  -3;
  constant Int cALL_SITES_HIT =       -4;

  constant Int cMIN_SCAN_CODE =       cALL_SITES_HIT;


  // Data members
  Radius firstRadius;
  Radius lastRadius;
  Index currentIndex;
  CountArray hitCount;
  IndexArray chosenIndex;

  // Methods
  Void init() {
    reset(0, 4);
  }

  Void reset(Radius first, Radius last) {
    firstRadius = first;
    lastRadius = last;
    reset();
  }

  Void reset() {
    for (Int i = 0; i < 4; i += 1) {
      hitCount[i] = 0;
      chosenIndex[i] = 0;
    }
    currentIndex = currentIndex.maxof;
  }

  Bool scan(Int t0) { return scan(t0, cNO_SITES_HIT, cNO_SITES_HIT, cNO_SITES_HIT); }
  Bool scan(Int t0, Int t1) { return scan(t0, t1, cNO_SITES_HIT, cNO_SITES_HIT); }
  Bool scan(Int t0, Int t1, Int t2) { return scan(t0, t1, t2, cNO_SITES_HIT); }

  /**
     Scan the event window from the firstRadius (by default 0) through
     the lastRadius (by default, 4), looking for instances of up to
     four types, t1, t2, t3, t4.

     The following special cases apply:
      - If a type is WindowServices.cNO_SITES_HIT (-1), then no sites sites will be considered hits
      - if a type is WindowServices.cEMPTY_SITES_HIT (-2), then all empty sites will be considered hits
      - if a type is WindowServices.cNONEMPTY_SITES_HIT (-3), then all non-empty sites will be considered hits.
      - if a type is WindowServices.cALL_SITES_HIT (-4), then all sites will be considered hits.

     All other negative type values are reserved and will cause
     failure if used.

     Use reset(int,int) to specify the firstRadius and
     lastRadius. Return true if any matches were found.
   */
  Bool scan(Int t0, Int t1, Int t2, Int t3) {

    if (t0 < cMIN_SCAN_CODE ||
        t1 < cMIN_SCAN_CODE ||
        t2 < cMIN_SCAN_CODE ||
        t3 < cMIN_SCAN_CODE)
      fail.fail();

    AtomUtils tu;
    Int et = tu.getEmptyType();
    reset();
    for (Int slot = next(); slot >= 0; slot = next()) {
      Atom a = ew[(SiteNum) slot];
      Int at = tu.getType(a);
      if (at < 0) continue;
      if ((t0 == -4) || (t0 == -2 && at == et) || (t0 == -3 && at != et) || (at == t0)) hit(0);
      if ((t1 == -4) || (t1 == -2 && at == et) || (t1 == -3 && at != et) || (at == t1)) hit(1);
      if ((t2 == -4) || (t2 == -2 && at == et) || (t2 == -3 && at != et) || (at == t2)) hit(2);
      if ((t3 == -4) || (t3 == -2 && at == et) || (t3 == -3 && at != et) || (at == t3)) hit(3);
    }
    return (getHits(0) + getHits(1) + getHits(2) + getHits(3)) > 0;
  }

  Int next() {
    Index end = mdist.getLastIndex(lastRadius);

    if (currentIndex == currentIndex.maxof)
      currentIndex = mdist.getFirstIndex(firstRadius);
    else if (currentIndex <= end)
      currentIndex += 1;

    if (currentIndex > end) return -1;

    return currentIndex;
  }

  Bool hit() { return hit((Slot) 0, (Unsigned) 1); }

  Bool hit(Slot slot) { return hit(slot, (Unsigned) 1); }

  Bool hit(Slot slot, Unsigned weight) {
    hitCount[slot] = (Count) (hitCount[slot] + weight);
    if (random.create((Unsigned) hitCount[slot]) < weight) {
      chosenIndex[slot] = currentIndex;
      return true;
    }
    return false;
  }

  Count getHits() {
    return getHits((Slot) 0);
  }

  Count getHits(Slot slot) { return hitCount[slot]; }

  Index getPick() {
    return getPick((Slot) 0);
  }

  Index getPick(Slot slot) {
    if (getHits(slot) == 0)
      return Index.maxof;
    return chosenIndex[slot];
  }

  /*
  Int test() {
    Int count = 0;
    Int n0 = 0;

    init();

    for (Int index = next(); index >= 0; index = next()) {
      ++count;
    }

    if (count != 41) return 1;

    count = 0;
    init();
    for (Int index2 = next(); index2 >= 0; index2 = next()) {
      for (Int idx = 0; idx < 4; idx += 1) {
        Bits mask = 1<< (Unsigned) idx;
        Bits bcount = count;
        if ((count&mask) != 0) hit((Slot) idx);
      }
      count += 1;
    }
    debug.print(-2);

    n0 = getHits((Slot) 0);                // This works
    debug.print(n0);

    n0 = getHits((Slot) 1);
    debug.print(n0);

    n0 = getHits((Slot) 2);
    debug.print(n0);

    n0 = getHits((Slot) 3);
    debug.print(n0);

    return 0;
  }
  */
}

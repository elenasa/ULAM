ulam 5;

/**
   ByteStream, an ulam-5 multiple-inheritance-based byte stream abstraction
 */
quark ByteStream {

  /* There isn't much here at present, but IO-agnostic format controls
     and such could eventually go here */

  Fail mFail; //< An object everybody can fail on

  constant String cFAIL_UNSUP = "UNSUPPORTED OPERATION";
  constant String cFAIL_ILARG = "ILLEGAL ARGUMENT";

}

quark ByteStreamReader +ByteStream {

  /**
     Attempt to read the next byte from the stream.  Return value >= 0
     is the next byte read.  A return value of -1 means EOF, a return
     value of -2 means no bytes are immediately available (but some
     might be later), and a return value <= -3 means some (reasonably)
     permanent error condition occurred.
   */
  virtual Int readByte() ;

  virtual Bool canReread() { return false; }

  virtual Void reread() { mFail.fail(cFAIL_UNSUP); }
}

quark ByteStreamWriter +ByteStream {

  virtual Bool canRewrite() { return false; }

  virtual Void rewrite() { mFail.fail(cFAIL_UNSUP); }

  /**
     Attempt to write the byte x to the stream.  Return value == 0
     means the byte was sucessfully written.  A return value of -1
     means EOF, a return value of -2 means no bytes could be written
     now (but output might be possible later), and a return value <=
     -3 means some (reasonably) permanent error condition occurred.

   */
  virtual Int writeByte(ASCII x) ;

  /////
  // OUTPUT ROUTINES
  //

  Self & printChar(ASCII byte) {
    writeByte(byte);
    return self;
  }

  Self & print(String s)
  {
    for (Unsigned i = 0; i < s.lengthof; ++i)
    {
      ASCII a = s[i];
      writeByte(a);
    }
    return self;
  }

  Self & print(Bool b)
  {
    ASCII ch = '0';
    if (b) ch = '1';
    writeByte(ch);
    return self;
  }

  Self & print(Unsigned n)
  {
    return print(n,10u);
  }

  Self & print(Unsigned n, Unsigned base)
  {
    if (n == 0u) return print("0");
    if (base == 0u) base = 10u;

    String c = "0123456789abcdefghijklmnopqrstuvwxyz";
    if (base < 2u || base >= c.lengthof) mFail.fail(cFAIL_ILARG);

    if (n >= base) print(n/base,base);

    writeByte(c[n%base]);

    return self;
  }

  Self & print(Int n)
  {
    if (n == -2147483648) return print("-2147483648");
    if (n < 0) {
      print("-");
      n = -n;
    }
    return print((Unsigned) n, 10u);
  }

  virtual Unsigned writeBytes(ByteStreamReader & r)
  {
    return writeBytes(r, Unsigned.maxof);
  }

  virtual Unsigned writeBytes(ByteStreamReader & r, Unsigned max)
  {
    for (Unsigned i = 0; i < max; ++i)
    {
      Int ch = r.readByte();
      if (ch < 0) return i;
      writeByte((ASCII) ch);
    }
    return max;
  }

  virtual Self & writeBytes(String s)
  {
    for (Unsigned i = 0; i < s.lengthof; ++i)
      writeByte(s[i]);
    return self;
  }

  Self & printf(String format, ...) native ;

}

quark ByteStreamReaderWriter +ByteStreamReader +ByteStreamWriter {
}


quark ByteStreamNull + ByteStreamReaderWriter {

  @Override
  virtual Int readByte() { return -1; } // immediate EOF

  @Override
  virtual Bool canRewrite() { return true; } // can rewrite but does nothing

  @Override
  virtual Void rewrite() {  } // ignored

  @Override
  virtual Int writeByte(ASCII x) { return 0; } // 0 == 'byte written'

}

ulam 1;

/** Mapping from two SiteNumbers X and Y to integer degrees <= 180.
    Given X < 41, X > Y, and Y > 0, cSiteNumsToAngleArray[X-2][Y-1] is
    the answer.

    See MDist.acuteAngle(Index s1, Index s2) for use.

    Generated by /data/ackley/PART4/code/E/spikes5/QBond5/code/siteToDeg.pl
*/
local constant String cSiteNumsToAngleArray[40] = {
    /*  X  Y    */
    /*  2  1..1 */ "\132",
    /*  3  1..2 */ "\132\264",
    /*  4  1..3 */ "\264\132\132",
    /*  5  1..4 */ "\055\055\207\207",
    /*  6  1..5 */ "\055\207\055\207\132",
    /*  7  1..6 */ "\207\055\207\055\132\263",
    /*  8  1..7 */ "\207\207\055\055\263\132\132",
    /*  9  1..8 */ "\000\132\132\264\055\055\207\207",
    /* 10  1..9 */ "\132\000\264\132\055\207\055\207\132",
    /* 11  1..10*/ "\132\264\000\132\207\055\207\055\132\264",
    /* 12  1..11*/ "\264\132\132\000\207\207\055\055\264\132\132",
    /* 13  1..12*/ "\032\077\164\231\022\107\154\241\032\077\164\231",
    /* 14  1..13*/ "\032\164\077\231\107\022\241\154\032\164\077\231\065",
    /* 15  1..14*/ "\077\032\231\164\022\154\107\241\077\032\231\164\044\132",
    /* 16  1..15*/ "\077\231\032\164\154\022\241\107\077\231\032\164\132\044\176",
    /* 17  1..16*/ "\164\032\231\077\107\241\022\154\164\032\231\077\132\217\065\263",
    /* 18  1..17*/ "\164\231\032\077\241\107\154\022\164\231\032\077\217\132\263\065\176",
    /* 19  1..18*/ "\231\077\164\032\154\241\022\107\231\077\164\032\176\263\132\217\044\132",
    /* 20  1..19*/ "\231\164\077\032\241\154\107\022\231\164\077\032\263\176\217\132\132\044\065",
    /* 21  1..20*/ "\000\132\132\264\055\055\207\207\000\132\132\264\032\032\077\077\164\164\231\231",
    /* 22  1..21*/ "\132\000\264\132\055\207\055\207\132\000\264\132\077\164\032\231\032\231\077\164\132",
    /* 23  1..22*/ "\132\264\000\132\207\055\207\055\132\264\000\132\164\077\231\032\231\032\164\077\132\264",
    /* 24  1..23*/ "\264\132\132\000\207\207\055\055\264\132\132\000\231\231\164\164\077\077\032\032\264\132\132",
    /* 25  1..24*/ "\055\055\207\207\000\132\132\263\055\055\207\207\022\107\022\154\107\241\154\241\055\055\207\207",
    /* 26  1..25*/ "\055\207\055\207\132\000\263\132\055\207\055\207\107\022\154\022\241\107\241\154\055\207\055\207\132",
    /* 27  1..26*/ "\207\055\207\055\132\263\000\132\207\055\207\055\154\241\107\241\022\154\022\107\207\055\207\055\132\263",
    /* 28  1..27*/ "\207\207\055\055\263\132\132\000\207\207\055\055\241\154\241\107\154\022\107\022\207\207\055\055\263\132\132",
    /* 29  1..28*/ "\022\107\154\241\032\077\164\231\022\107\154\241\010\055\055\121\142\207\207\253\022\107\154\241\032\077\164\231",
    /* 30  1..29*/ "\022\154\107\241\077\032\231\164\022\154\107\241\055\010\121\055\207\142\253\207\022\154\107\241\077\032\231\164\044",
    /* 31  1..30*/ "\107\022\241\154\032\164\077\231\107\022\241\154\055\142\010\207\055\253\121\207\107\022\241\154\032\164\077\231\065\132",
    /* 32  1..31*/ "\107\241\022\154\164\032\231\077\107\241\022\154\142\055\207\010\253\055\207\121\107\241\022\154\164\032\231\077\132\065\217",
    /* 33  1..32*/ "\154\022\241\107\077\231\032\164\154\022\241\107\121\207\055\253\010\207\055\142\154\022\241\107\077\231\032\164\132\176\044\263",
    /* 34  1..33*/ "\154\241\022\107\231\077\164\032\154\241\022\107\207\121\253\055\207\010\142\055\154\241\022\107\231\077\164\032\176\132\263\044\217",
    /* 35  1..34*/ "\241\107\154\022\164\231\032\077\241\107\154\022\207\253\142\207\055\121\010\055\241\107\154\022\164\231\032\077\217\263\132\176\065\132",
    /* 36  1..35*/ "\241\154\107\022\231\164\077\032\241\154\107\022\253\207\207\142\121\055\055\010\241\154\107\022\231\164\077\032\263\217\176\132\132\065\044",
    /* 37  1..36*/ "\000\132\132\264\055\055\207\207\000\132\132\264\032\032\077\077\164\164\231\231\000\132\132\264\055\055\207\207\022\022\107\107\154\154\241\241",
    /* 38  1..37*/ "\132\000\264\132\055\207\055\207\132\000\264\132\077\164\032\231\032\231\077\164\132\000\264\132\055\207\055\207\107\154\022\241\022\241\107\154\132",
    /* 39  1..38*/ "\132\264\000\132\207\055\207\055\132\264\000\132\164\077\231\032\231\032\164\077\132\264\000\132\207\055\207\055\154\107\241\022\241\022\154\107\132\264",
    /* 40  1..39*/ "\264\132\132\000\207\207\055\055\264\132\132\000\231\231\164\164\077\077\032\032\264\132\132\000\207\207\055\055\241\241\154\154\107\107\022\022\264\132\132"
};

local constant String cUnsigned6To32TimesSqrt = 
  "\000\040\055\067\100\107\116\124\132\140\145\152\156\163\167\173\200\203\207\213\217\222\226\231\234\240\243\246\251\254\257\262\265\267\272\275\300\302\305\307\312\314\317\321\324\326\331\333\335\340\342\344\346\350\353\355\357\361\363\365\367\371\373\375";

/**
   Access to selected MFM simulator 'MDist' methods.  ('MDist'
   originally stood for 'Manhattan distance', but it now includes
   other functions, such as angles and conversions between site
   numbers and C2D, and other metrics, such as 'ESL' for 'Euclidean
   Squared Length'.  In addition, since ulam 5, access to PSym point
   symmetry methods is provided.)

   Often some higher-level interface (such as WindowServices) might be
   preferable to this.  MDist is particularly useful because it does
   not require access to the EventWindow, which is unavailable in some
   execution contexts (most notably, during UrSelf.renderGraphics).

   \sa WindowServices
   \sa EventWindow
   \sa UrSelf
 */
quark MDist {
  typedef Unsigned(3) Radius;
  typedef Unsigned(5) ESLRadius;
  typedef Unsigned(6) Index;
  typedef Unsigned(3) Symmetry;

  Index getFirstIndex(Radius radius) native;

  Index getLastIndex(Radius radius) native;

  Index getFirstESLIndex(ESLRadius eslRadius) native;

  Index getLastESLIndex(ESLRadius eslRadius) native;

  C2D getSiteCoord(Index siteNumber) native;

  C2D symMap(C2D pt, Symmetry sym) native; //{ C2D ret(sym,2); return ret; }

  Symmetry symInverse(Symmetry sym) native;

  Index symMap(Index siteNumber, Symmetry sym) {
    C2D c = getSiteCoord(siteNumber);
    C2D m = symMap(c, sym);
    return getSiteNumber(m);
  }

  Index getSiteNumber(C2D coord) native;

  /** Angle (0..180) between SiteNumbers s1 and s2,
      construed as vectors from the origin.

   \returns 0 if either s1 or s2 is 0 (since 0 denotes the origin, in
             which case, strictly speaking, there is no angle)

   \returns the angle, in integer degrees, between s1 and s2
   */ 
  Unsigned acuteAngle(Index s1, Index s2) {
    if (s1 == s2) return 0u;
    if (s1 < s2) { Index tmp = s1; s1 = s2; s2 = tmp; }
    if (s2 == 0) return 0u;
    return cSiteNumsToAngleArray[s1-2][s2-1];
  }

  Unsigned angleCW(Index s1, Index s2) {
    Unsigned acute = acuteAngle(s1,s2);
    C2D c1 = getSiteCoord(s1);
    C2D c2 = getSiteCoord(s2);
    Int zsign = c1.getX()*c2.getY() - c1.getY()*c2.getX();
    if (zsign < 0) acute = 360u - acute;
    return acute;
  }

  /** Compute 32 times the square root of x, for x in the range 0..63
   */
  Unsigned sqrt32(Unsigned(6) x) {
    return cUnsigned6To32TimesSqrt[x];
  }
}

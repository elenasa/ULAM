ulam 2;
use AtomUtils;

/**
   Methods to access and manipulate the active event window.  The
   EventWindow quark is 0 bits long, because it is just an interface
   to the singleton event window external to ulam processing.  As a
   result, EventWindow quarks can be created with impunity, and all
   will access the same event window state, but on the other hand, all
   (or at least most) of the methods in this class will FAIL if there
   is actually no event in progress, which is an issue during calls on
   methods such as getColor and renderGraphics.

   \sa MDist for various site and coord mapping methods that can be
       used whether an event is in progress or not

   \author Dave Ackley
   \license lgpl
 */

quark EventWindow {
  AtomUtils au;

  typedef Unsigned(6) SiteNum;
  typedef Unsigned(3) Symmetry;

  constant Symmetry cSYMMETRY_000L = 0u;
  constant Symmetry cSYMMETRY_090L = 1u;
  constant Symmetry cSYMMETRY_180L = 2u;
  constant Symmetry cSYMMETRY_270L = 3u;
  constant Symmetry cSYMMETRY_000R = 4u;
  constant Symmetry cSYMMETRY_090R = 5u;
  constant Symmetry cSYMMETRY_180R = 6u;
  constant Symmetry cSYMMETRY_270R = 7u;

  typedef Unsigned(3) Dir;
  constant Dir cDIR_NORTH =     0u;
  constant Dir cDIR_NORTHEAST = 1u;
  constant Dir cDIR_EAST =      2u;
  constant Dir cDIR_SOUTHEAST = 3u;
  constant Dir cDIR_SOUTH =     4u;
  constant Dir cDIR_SOUTHWEST = 5u;
  constant Dir cDIR_WEST =      6u;
  constant Dir cDIR_NORTHWEST = 7u;

  /**
     Access the maximum possible number of sites in the event window.
     Note this function returns a fixed value (41, given the manhattan
     distance 4 event window radius), and does not the number of \e
     accessible sites given an event window.

     \sa getRadius()
     \sa getAccessibleSize()
     \sa isAccessible()
   */
  SiteNum size() native;

  /**
     Return the maximum accessible radius in this event window, a
     value from 0 to 4.  In general this returns whatever was the
     '\radius' declaration in the element that started the current
     event; if no \radius declaration was present there, this returns
     4 and the full event window is accessible.
   */
  Unsigned getRadius() native;

  SiteNum getAccessibleSize() {
    MDist md;
    typedef MDist.Radius Radius;
    typedef MDist.Index Index;
    Unsigned rad = getRadius();
    return md.getFirstIndex((Radius) (rad + 1u));
  }

  Atom& aref(SiteNum index) native;
  Atom& aref(C2D coord) { return aref(getSiteNumberRaw(coord)); }

  Bool isLegal(SiteNum index) { return index < size(); }
  Bool isLegal(C2D coord) { return isLegal(getSiteNumberRaw(coord)); }

  /** Determine the accessibility of index, considering the following three factors:

      (1) Is index a legal SiteNum under any circumstances?  
      (2) If so, does index fit inside the currently accessible EventWindow radius?
      (3) If so, is the indicated site live?

      \returns false if the answer to any of those questions is 'no', otherwise true.

      \sa getAccessibleSize()
      \sa isLive(SiteNum)
  */

  Bool isAccessible(SiteNum index) { return index < getAccessibleSize() && isLive(index); }
  Bool isAccessible(C2D coord) { return isLegal(coord) && isAccessible(getSiteNumberRaw(coord)); }

  Bool isLive(SiteNum index) native;
  Bool isLive(C2D coord) { return isLegal(coord) && isLive(getSiteNumberRaw(coord)); }

  Bool isEmpty(SiteNum index) { return isLive(index) && au.isEmpty(aref(index)); }
  Bool isEmpty(C2D coord) { return isLegal(coord) && isEmpty(getSiteNumberRaw(coord)); }

  Bool swap(SiteNum index1, SiteNum index2)  native;
  Bool swap(C2D coord1, C2D coord2) { return swap(getSiteNumberRaw(coord1), getSiteNumberRaw(coord2)); }

  /** Get the SiteNum corresponding to the given raster \c index, if
      it is legal, else return EventWindow.size() (which is an illegal
      SiteNum, and will cause event window array accesses to fail if
      used).
  */
  SiteNum getSiteNumberFromRasterIndex(SiteNum index) native ;

  /** Get the raster index corresponding to the given \c sitenum, if
      it is legal, else return EventWindow.size() (which is an illegal
      SiteNum, and will cause event window array accesses to fail if
      used).
  */
  SiteNum getRasterIndexFromSiteNumber(SiteNum sitenum) native ;

  C2D getCoord(SiteNum siteNum) native;

  C2D getCoordRaw(SiteNum siteNum) {
    Symmetry old = changeSymmetry(cSYMMETRY_000L);
    C2D raw = getCoord(siteNum);
    changeSymmetry(old);
    return raw;
  }

  /**
     Map directCoord through the current symmetry and return the
     corresponding position.
   */
  C2D mapSym(C2D directCoord) native;

  /** Get the SiteNum corresponding to \c coord, if it exists, else
      return EventWindow.size() (which is an illegal SiteNum, and will
      cause event window array accesses to fail if used).
  */
  SiteNum getSiteNumber(C2D coord) native;

  /** Get the SiteNum corresponding to \c coord, if it exists, else
      return EventWindow.size() (which is an illegal SiteNum, and will
      cause event window array accesses to fail if used).  Unlike
      getSiteNumber, getSiteNumberRaw ignores the current EventWindow
      Symmetry and always uses the 'direct' mapping (as if the
      symmetry was cSYMMETRY_000L).
  */
  SiteNum getSiteNumberRaw(C2D coord) native;

  /**
     Access the SiteNum of the Atom referred to by ar, if that atom is
     actually stored in an accessible location within the EventWindow,
     or else returns SiteNum.maxof.  The sn returned is relative to
     symmetry sym.  The following code always returns its argument:

       Atom& func(Atom & ar) {
         EventWindow.SiteNum sn = ew.getSiteNumber(ar,ew.getSymmetry());
         if (sn == EventWindow.SiteNum.maxof) return ar;
         return ew[sn];
       }

     Note that SiteNum.maxof may be returned for two possible reasons:

     (1) The Atom may have nothing to do with the EventWindow, as in:

         Atom a;           // In local storage
         Atom & ar = (Atom &) a;
         EventWindow.SiteNum sn = ew.getSiteNumber(ar,ew.getSymmetry()); // sn gets SiteNum.maxof

     (2) The underlying atom storage may actually be in the
         EventWindow but the atom may not be accessible due to limited
         event radius.  In other words, ew.getSN(ar,sym) will never
         return a SiteNum sn unless ew.isAccessible(sn) is true under
         symmetry sym.

     \return The SiteNum where the atom referred to by ar can be
     found, or SiteNum.maxof if ar does not refer to an accessible Atom
     in the EventWindow.

     \since 4.1
   */
  SiteNum getSiteNumber(Atom& ar, Symmetry sym) native;

  /**
     Convenience form to access the SiteNum of the atom referred to by
     ref, if possible, relative to the current symmetry.  Equivalent
     to ew.getSiteNumber(ref, ew.getSymmetry())

     \sa getSiteNumber(Atom&,Symmetry)

     \since 5.0
  */
  SiteNum getSiteNumber(Atom& ref) {
    return getSiteNumber(ref, getSymmetry());
  }

  /**
     Access the SiteNum of the class instance referred to by ref, if
     possible, relative to the symmetry sym.  Returns SiteNum.maxof if:

     (1) ref does not have atom storage backing it, or

     (2) The atom backing ref is not in the event window, or

     (3) The eventwindow atom backing ref is not accessible

     \sa getSiteNumber(Atom&,Symmetry)
     \sa AtomUtils.hasAtomof(UrSelf&)

     \since 4.1
  */
  SiteNum getSiteNumber(UrSelf& ref, Symmetry sym) { 
    AtomUtils au;
    if (!au.hasAtomof(ref)) return SiteNum.maxof;
    return getSiteNumber((Atom&) ref, sym);
  }

  /**
     Convenience form to access the SiteNum of the class instance
     referred to by ref, if possible, relative to the current
     symmetry.  Equivalent to ew.getSiteNumber(ref, ew.getSymmetry())

     \sa getSiteNumber(UrSelf&,Symmetry)

     \since 5.0
  */
  SiteNum getSiteNumber(UrSelf& ref) {
    return getSiteNumber(ref, getSymmetry());
  }

  /** Set the EventWindow symmetry to \c newSym, and return its
      previous value.  The prevailing EventWindow symmetry affects the
      interpretation of SiteNum and C2D in most of the EventWindow
      methods.
  */
  Symmetry changeSymmetry(Symmetry newSym) native;

  /** Get the current EventWindow symmetry.  The prevailing
      EventWindow symmetry affects the interpretation of SiteNum and
      C2D in most of the EventWindow methods.
  */
  Symmetry getSymmetry() native;

  /**
     (Deprecated)
   */
  Void diffuse() native;
}
